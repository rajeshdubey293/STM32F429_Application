
STM32F429_Empty_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080050a8  080050a8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005470  08005470  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005478  08005478  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800547c  0800547c  0001547c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000148  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e34  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a93  00000000  00000000  00032edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00035970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001010  00000000  00000000  00036aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005a58  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b49b  00000000  00000000  0003d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100653  00000000  00000000  000589a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158ff6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fe0  00000000  00000000  00159048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005090 	.word	0x08005090

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08005090 	.word	0x08005090

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <GPIO_Init>:
 */

#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef *port, uint16_t pin_number)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef gpio_init_struct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
	Clock_Enable(port);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f813 	bl	800060c <Clock_Enable>
	gpio_init_struct.Pin = pin_number;
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
	gpio_init_struct.Speed = GPIO_SPEED_FAST;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(port, &gpio_init_struct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 fc1b 	bl	8000e38 <HAL_GPIO_Init>
}
 8000602:	bf00      	nop
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <Clock_Enable>:

void Clock_Enable(GPIO_TypeDef *port)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(port == GPIOA)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a4f      	ldr	r2, [pc, #316]	; (8000754 <Clock_Enable+0x148>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d10e      	bne.n	800063a <Clock_Enable+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
 8000620:	4b4d      	ldr	r3, [pc, #308]	; (8000758 <Clock_Enable+0x14c>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a4c      	ldr	r2, [pc, #304]	; (8000758 <Clock_Enable+0x14c>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
 800062c:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <Clock_Enable+0x14c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		__HAL_RCC_GPIOG_CLK_ENABLE();
	else if(port == GPIOH)
		__HAL_RCC_GPIOH_CLK_ENABLE();
	else
		printf("Enter Valid Port\r\n");
}
 8000638:	e087      	b.n	800074a <Clock_Enable+0x13e>
	else if(port == GPIOB)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a47      	ldr	r2, [pc, #284]	; (800075c <Clock_Enable+0x150>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d10e      	bne.n	8000660 <Clock_Enable+0x54>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
 8000646:	4b44      	ldr	r3, [pc, #272]	; (8000758 <Clock_Enable+0x14c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a43      	ldr	r2, [pc, #268]	; (8000758 <Clock_Enable+0x14c>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b41      	ldr	r3, [pc, #260]	; (8000758 <Clock_Enable+0x14c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	623b      	str	r3, [r7, #32]
 800065c:	6a3b      	ldr	r3, [r7, #32]
}
 800065e:	e074      	b.n	800074a <Clock_Enable+0x13e>
	else if(port == GPIOC)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a3f      	ldr	r2, [pc, #252]	; (8000760 <Clock_Enable+0x154>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d10e      	bne.n	8000686 <Clock_Enable+0x7a>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <Clock_Enable+0x14c>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a39      	ldr	r2, [pc, #228]	; (8000758 <Clock_Enable+0x14c>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b37      	ldr	r3, [pc, #220]	; (8000758 <Clock_Enable+0x14c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	61fb      	str	r3, [r7, #28]
 8000682:	69fb      	ldr	r3, [r7, #28]
}
 8000684:	e061      	b.n	800074a <Clock_Enable+0x13e>
	else if(port == GPIOD)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a36      	ldr	r2, [pc, #216]	; (8000764 <Clock_Enable+0x158>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d10e      	bne.n	80006ac <Clock_Enable+0xa0>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <Clock_Enable+0x14c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <Clock_Enable+0x14c>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <Clock_Enable+0x14c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]
}
 80006aa:	e04e      	b.n	800074a <Clock_Enable+0x13e>
	else if(port == GPIOE)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <Clock_Enable+0x15c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d10e      	bne.n	80006d2 <Clock_Enable+0xc6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <Clock_Enable+0x14c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <Clock_Enable+0x14c>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <Clock_Enable+0x14c>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	f003 0310 	and.w	r3, r3, #16
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
}
 80006d0:	e03b      	b.n	800074a <Clock_Enable+0x13e>
	else if(port == GPIOF)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a25      	ldr	r2, [pc, #148]	; (800076c <Clock_Enable+0x160>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d10e      	bne.n	80006f8 <Clock_Enable+0xec>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <Clock_Enable+0x14c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <Clock_Enable+0x14c>)
 80006e4:	f043 0320 	orr.w	r3, r3, #32
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <Clock_Enable+0x14c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
}
 80006f6:	e028      	b.n	800074a <Clock_Enable+0x13e>
	else if(port == GPIOG)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <Clock_Enable+0x164>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d10e      	bne.n	800071e <Clock_Enable+0x112>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <Clock_Enable+0x14c>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	4a13      	ldr	r2, [pc, #76]	; (8000758 <Clock_Enable+0x14c>)
 800070a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070e:	6313      	str	r3, [r2, #48]	; 0x30
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <Clock_Enable+0x14c>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	e015      	b.n	800074a <Clock_Enable+0x13e>
	else if(port == GPIOH)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <Clock_Enable+0x168>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d10e      	bne.n	8000744 <Clock_Enable+0x138>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <Clock_Enable+0x14c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <Clock_Enable+0x14c>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <Clock_Enable+0x14c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
}
 8000742:	e002      	b.n	800074a <Clock_Enable+0x13e>
		printf("Enter Valid Port\r\n");
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <Clock_Enable+0x16c>)
 8000746:	f003 fca3 	bl	8004090 <puts>
}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020000 	.word	0x40020000
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400
 8000760:	40020800 	.word	0x40020800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40021000 	.word	0x40021000
 800076c:	40021400 	.word	0x40021400
 8000770:	40021800 	.word	0x40021800
 8000774:	40021c00 	.word	0x40021c00
 8000778:	080050a8 	.word	0x080050a8

0800077c <GPIO_Pin_Toggle>:

inline void GPIO_Pin_Toggle(GPIO_TypeDef *port, uint16_t pin_number)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(port, pin_number);
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	4619      	mov	r1, r3
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 fcff 	bl	8001190 <HAL_GPIO_TogglePin>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <I2C_Init>:
#include "I2C.h"

I2C_HandleTypeDef hi2c1;

void I2C_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <I2C_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <I2C_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <I2C_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <I2C_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <I2C_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <I2C_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <I2C_Init+0x74>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007be:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <I2C_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <I2C_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <I2C_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <I2C_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <I2C_Init+0x74>)
 80007da:	f000 fcf3 	bl	80011c4 <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <I2C_Init+0x4c>
	{
		Error_Handler();
 80007e4:	f003 f9c6 	bl	8003b74 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <I2C_Init+0x74>)
 80007ec:	f000 fe2e 	bl	800144c <HAL_I2CEx_ConfigAnalogFilter>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <I2C_Init+0x5e>
	{
		Error_Handler();
 80007f6:	f003 f9bd 	bl	8003b74 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <I2C_Init+0x74>)
 80007fe:	f000 fe61 	bl	80014c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <I2C_Init+0x70>
	{
		Error_Handler();
 8000808:	f003 f9b4 	bl	8003b74 <Error_Handler>
	}

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000094 	.word	0x20000094
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <Timer_Init>:
TIM_HandleTypeDef htim;

volatile uint32_t sysTick = 0;;

void Timer_Init(TIM_TypeDef *Timer)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	htim.Instance = Timer;
 8000824:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <Timer_Init+0x34>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
	htim.Init.Prescaler = 1;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <Timer_Init+0x34>)
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
	htim.Init.Period = 20000-1;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <Timer_Init+0x34>)
 8000832:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000836:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim) != HAL_OK)
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <Timer_Init+0x34>)
 800083a:	f001 fb6b 	bl	8001f14 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <Timer_Init+0x2c>
	{
		Error_Handler();
 8000844:	f003 f996 	bl	8003b74 <Error_Handler>
	}
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000e8 	.word	0x200000e8

08000854 <Timer_Start_IT>:
{
	HAL_TIM_Base_Start(&htim);
}

inline void Timer_Start_IT(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <Timer_Start_IT+0x10>)
 800085a:	f001 fbab 	bl	8001fb4 <HAL_TIM_Base_Start_IT>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000e8 	.word	0x200000e8

08000868 <HAL_TIM_PeriodElapsedCallback>:

inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	sysTick++;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000878:	6013      	str	r3, [r2, #0]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000130 	.word	0x20000130

0800088c <SysTick_Get>:
inline uint32_t SysTick_Get(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	return sysTick;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <SysTick_Get+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000130 	.word	0x20000130

080008a4 <SysTick_Set>:
inline void SysTick_Set(uint8_t tmpSysTick)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	sysTick = (uint32_t)tmpSysTick;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <SysTick_Set+0x1c>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	20000130 	.word	0x20000130

080008c4 <UART_Init>:

extern uint8_t rx_Buffer;
char byte_Available = 0;

void UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <UART_Init+0x4c>)
 80008fc:	f001 fdae 	bl	800245c <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <UART_Init+0x46>
	{
		Error_Handler();
 8000906:	f003 f935 	bl	8003b74 <Error_Handler>
	}

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000134 	.word	0x20000134
 8000914:	40011000 	.word	0x40011000

08000918 <Print_Msg>:

void Print_Msg(char *format,...)
{
 8000918:	b40f      	push	{r0, r1, r2, r3}
 800091a:	b580      	push	{r7, lr}
 800091c:	b096      	sub	sp, #88	; 0x58
 800091e:	af00      	add	r7, sp, #0
	char tx_Buffer[80];
	/*Extract the the argument list using VA APIS */
	va_list args;
	va_start(args, format);
 8000920:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000924:	607b      	str	r3, [r7, #4]
	vsprintf(tx_Buffer, format,args);
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fbcc 	bl	80040cc <vsiprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)tx_Buffer, strlen(tx_Buffer), 10);
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fc63 	bl	8000204 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29a      	uxth	r2, r3
 8000942:	f107 0108 	add.w	r1, r7, #8
 8000946:	230a      	movs	r3, #10
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <Print_Msg+0x44>)
 800094a:	f001 fdd4 	bl	80024f6 <HAL_UART_Transmit>
	va_end(args);
}
 800094e:	bf00      	nop
 8000950:	3758      	adds	r7, #88	; 0x58
 8000952:	46bd      	mov	sp, r7
 8000954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr
 800095c:	20000134 	.word	0x20000134

08000960 <HAL_UART_RxCpltCallback>:
inline void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	byte_Available = 1;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_UART_RxCpltCallback+0x20>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_Buffer, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	4904      	ldr	r1, [pc, #16]	; (8000984 <HAL_UART_RxCpltCallback+0x24>)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <HAL_UART_RxCpltCallback+0x28>)
 8000974:	f001 fe51 	bl	800261a <HAL_UART_Receive_IT>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000178 	.word	0x20000178
 8000984:	200001a8 	.word	0x200001a8
 8000988:	20000134 	.word	0x20000134

0800098c <UART_Interrupt_Start>:
inline void UART_Receive(char *tmp_Rx_Buffer)
{
	HAL_UART_Receive(&huart1, (uint8_t*)tmp_Rx_Buffer, 1, 100);
}
inline void UART_Interrupt_Start(char *tmp_Rx_Buffer)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)tmp_Rx_Buffer, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <UART_Interrupt_Start+0x1c>)
 800099a:	f001 fe3e 	bl	800261a <HAL_UART_Receive_IT>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000134 	.word	0x20000134

080009ac <UART_Get_Rx_Byte>:
inline void UART_Get_Rx_Byte(char *tmp_Rx_Buffer, uint8_t size)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]

	*tmp_Rx_Buffer = rx_Buffer;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <UART_Get_Rx_Byte+0x28>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	701a      	strb	r2, [r3, #0]
	byte_Available = 0;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <UART_Get_Rx_Byte+0x2c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	200001a8 	.word	0x200001a8
 80009d8:	20000178 	.word	0x20000178

080009dc <UART_Rx_Byte_Available>:
inline int8_t UART_Rx_Byte_Available(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	return byte_Available;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <UART_Rx_Byte_Available+0x14>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b25b      	sxtb	r3, r3
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20000178 	.word	0x20000178

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <HAL_Init+0x40>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_Init+0x40>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x40>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f92b 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f003 f8aa 	bl	8003b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023c00 	.word	0x40023c00

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f943 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	f000 f90b 	bl	8000c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000010 	.word	0x20000010
 8000a90:	20000004 	.word	0x20000004
 8000a94:	20000000 	.word	0x20000000

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	2000017c 	.word	0x2000017c

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000017c 	.word	0x2000017c

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff29 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff3e 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5d 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff31 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffa2 	bl	8000c34 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000cfe:	f000 f802 	bl	8000d06 <HAL_SYSTICK_Callback>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d22:	f7ff fecd 	bl	8000ac0 <HAL_GetTick>
 8000d26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d008      	beq.n	8000d46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e052      	b.n	8000dec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0216 	bic.w	r2, r2, #22
 8000d54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	695a      	ldr	r2, [r3, #20]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d103      	bne.n	8000d76 <HAL_DMA_Abort+0x62>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d007      	beq.n	8000d86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0208 	bic.w	r2, r2, #8
 8000d84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d96:	e013      	b.n	8000dc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d98:	f7ff fe92 	bl	8000ac0 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d90c      	bls.n	8000dc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2220      	movs	r2, #32
 8000daa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2203      	movs	r2, #3
 8000db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e015      	b.n	8000dec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1e4      	bne.n	8000d98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd2:	223f      	movs	r2, #63	; 0x3f
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d004      	beq.n	8000e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00c      	b.n	8000e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2205      	movs	r2, #5
 8000e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0201 	bic.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e177      	b.n	8001144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8166 	bne.w	800113e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80c0 	beq.w	800113e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b66      	ldr	r3, [pc, #408]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a65      	ldr	r2, [pc, #404]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_GPIO_Init+0x324>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fda:	4a61      	ldr	r2, [pc, #388]	; (8001160 <HAL_GPIO_Init+0x328>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a58      	ldr	r2, [pc, #352]	; (8001164 <HAL_GPIO_Init+0x32c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d037      	beq.n	8001076 <HAL_GPIO_Init+0x23e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a57      	ldr	r2, [pc, #348]	; (8001168 <HAL_GPIO_Init+0x330>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d031      	beq.n	8001072 <HAL_GPIO_Init+0x23a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a56      	ldr	r2, [pc, #344]	; (800116c <HAL_GPIO_Init+0x334>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d02b      	beq.n	800106e <HAL_GPIO_Init+0x236>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a55      	ldr	r2, [pc, #340]	; (8001170 <HAL_GPIO_Init+0x338>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d025      	beq.n	800106a <HAL_GPIO_Init+0x232>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a54      	ldr	r2, [pc, #336]	; (8001174 <HAL_GPIO_Init+0x33c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01f      	beq.n	8001066 <HAL_GPIO_Init+0x22e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a53      	ldr	r2, [pc, #332]	; (8001178 <HAL_GPIO_Init+0x340>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x22a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x344>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x226>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a51      	ldr	r2, [pc, #324]	; (8001180 <HAL_GPIO_Init+0x348>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x222>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a50      	ldr	r2, [pc, #320]	; (8001184 <HAL_GPIO_Init+0x34c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x21e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_GPIO_Init+0x350>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x21a>
 800104e:	2309      	movs	r3, #9
 8001050:	e012      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001052:	230a      	movs	r3, #10
 8001054:	e010      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001056:	2308      	movs	r3, #8
 8001058:	e00e      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800105a:	2307      	movs	r3, #7
 800105c:	e00c      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800105e:	2306      	movs	r3, #6
 8001060:	e00a      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001062:	2305      	movs	r3, #5
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001066:	2304      	movs	r3, #4
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x240>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x240>
 8001076:	2300      	movs	r3, #0
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001088:	4935      	ldr	r1, [pc, #212]	; (8001160 <HAL_GPIO_Init+0x328>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_GPIO_Init+0x354>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <HAL_GPIO_Init+0x354>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_GPIO_Init+0x354>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e4:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_GPIO_Init+0x354>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_GPIO_Init+0x354>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_GPIO_Init+0x354>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_GPIO_Init+0x354>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_GPIO_Init+0x354>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	f67f ae84 	bls.w	8000e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40021400 	.word	0x40021400
 800117c:	40021800 	.word	0x40021800
 8001180:	40021c00 	.word	0x40021c00
 8001184:	40022000 	.word	0x40022000
 8001188:	40022400 	.word	0x40022400
 800118c:	40013c00 	.word	0x40013c00

08001190 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43d9      	mvns	r1, r3
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	400b      	ands	r3, r1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e12b      	b.n	800142e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f002 fd72 	bl	8003cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2224      	movs	r2, #36	; 0x24
 80011f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001228:	f000 fe4c 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a81      	ldr	r2, [pc, #516]	; (8001438 <HAL_I2C_Init+0x274>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d807      	bhi.n	8001248 <HAL_I2C_Init+0x84>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a80      	ldr	r2, [pc, #512]	; (800143c <HAL_I2C_Init+0x278>)
 800123c:	4293      	cmp	r3, r2
 800123e:	bf94      	ite	ls
 8001240:	2301      	movls	r3, #1
 8001242:	2300      	movhi	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	e006      	b.n	8001256 <HAL_I2C_Init+0x92>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a7d      	ldr	r2, [pc, #500]	; (8001440 <HAL_I2C_Init+0x27c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	bf94      	ite	ls
 8001250:	2301      	movls	r3, #1
 8001252:	2300      	movhi	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0e7      	b.n	800142e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4a78      	ldr	r2, [pc, #480]	; (8001444 <HAL_I2C_Init+0x280>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0c9b      	lsrs	r3, r3, #18
 8001268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	430a      	orrs	r2, r1
 800127c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <HAL_I2C_Init+0x274>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d802      	bhi.n	8001298 <HAL_I2C_Init+0xd4>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3301      	adds	r3, #1
 8001296:	e009      	b.n	80012ac <HAL_I2C_Init+0xe8>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	4a69      	ldr	r2, [pc, #420]	; (8001448 <HAL_I2C_Init+0x284>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	099b      	lsrs	r3, r3, #6
 80012aa:	3301      	adds	r3, #1
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	430b      	orrs	r3, r1
 80012b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	495c      	ldr	r1, [pc, #368]	; (8001438 <HAL_I2C_Init+0x274>)
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d819      	bhi.n	8001300 <HAL_I2C_Init+0x13c>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1e59      	subs	r1, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012da:	1c59      	adds	r1, r3, #1
 80012dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012e0:	400b      	ands	r3, r1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00a      	beq.n	80012fc <HAL_I2C_Init+0x138>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e59      	subs	r1, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f4:	3301      	adds	r3, #1
 80012f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fa:	e051      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 80012fc:	2304      	movs	r3, #4
 80012fe:	e04f      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d111      	bne.n	800132c <HAL_I2C_Init+0x168>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1e58      	subs	r0, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	440b      	add	r3, r1
 8001316:	fbb0 f3f3 	udiv	r3, r0, r3
 800131a:	3301      	adds	r3, #1
 800131c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	e012      	b.n	8001352 <HAL_I2C_Init+0x18e>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1e58      	subs	r0, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	0099      	lsls	r1, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001342:	3301      	adds	r3, #1
 8001344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf0c      	ite	eq
 800134c:	2301      	moveq	r3, #1
 800134e:	2300      	movne	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_Init+0x196>
 8001356:	2301      	movs	r3, #1
 8001358:	e022      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10e      	bne.n	8001380 <HAL_I2C_Init+0x1bc>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1e58      	subs	r0, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6859      	ldr	r1, [r3, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	440b      	add	r3, r1
 8001370:	fbb0 f3f3 	udiv	r3, r0, r3
 8001374:	3301      	adds	r3, #1
 8001376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137e:	e00f      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1e58      	subs	r0, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	0099      	lsls	r1, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	fbb0 f3f3 	udiv	r3, r0, r3
 8001396:	3301      	adds	r3, #1
 8001398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	6809      	ldr	r1, [r1, #0]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69da      	ldr	r2, [r3, #28]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6911      	ldr	r1, [r2, #16]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68d2      	ldr	r2, [r2, #12]
 80013da:	4311      	orrs	r1, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2220      	movs	r2, #32
 800141a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	000186a0 	.word	0x000186a0
 800143c:	001e847f 	.word	0x001e847f
 8001440:	003d08ff 	.word	0x003d08ff
 8001444:	431bde83 	.word	0x431bde83
 8001448:	10624dd3 	.word	0x10624dd3

0800144c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b20      	cmp	r3, #32
 8001460:	d129      	bne.n	80014b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2224      	movs	r2, #36	; 0x24
 8001466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0210 	bic.w	r2, r2, #16
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0201 	orr.w	r2, r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2220      	movs	r2, #32
 80014ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80014b6:	2302      	movs	r3, #2
  }
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b20      	cmp	r3, #32
 80014dc:	d12a      	bne.n	8001534 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2224      	movs	r2, #36	; 0x24
 80014e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	f023 030f 	bic.w	r3, r3, #15
 8001504:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b29a      	uxth	r2, r3
 800150a:	89fb      	ldrh	r3, [r7, #14]
 800150c:	4313      	orrs	r3, r2
 800150e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	89fa      	ldrh	r2, [r7, #14]
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2220      	movs	r2, #32
 800152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	e000      	b.n	8001536 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001534:	2302      	movs	r3, #2
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001570:	f7ff faa6 	bl	8000ac0 <HAL_GetTick>
 8001574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001576:	e009      	b.n	800158c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001578:	f7ff faa2 	bl	8000ac0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001586:	d901      	bls.n	800158c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e01f      	b.n	80015cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_PWREx_EnableOverDrive+0x98>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001598:	d1ee      	bne.n	8001578 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a0:	f7ff fa8e 	bl	8000ac0 <HAL_GetTick>
 80015a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015a6:	e009      	b.n	80015bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015a8:	f7ff fa8a 	bl	8000ac0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015b6:	d901      	bls.n	80015bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e007      	b.n	80015cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_PWREx_EnableOverDrive+0x98>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015c8:	d1ee      	bne.n	80015a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	420e0040 	.word	0x420e0040
 80015dc:	40007000 	.word	0x40007000
 80015e0:	420e0044 	.word	0x420e0044

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e267      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d075      	beq.n	80016ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001602:	4b88      	ldr	r3, [pc, #544]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b04      	cmp	r3, #4
 800160c:	d00c      	beq.n	8001628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160e:	4b85      	ldr	r3, [pc, #532]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001616:	2b08      	cmp	r3, #8
 8001618:	d112      	bne.n	8001640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	4b82      	ldr	r3, [pc, #520]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001626:	d10b      	bne.n	8001640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d05b      	beq.n	80016ec <HAL_RCC_OscConfig+0x108>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d157      	bne.n	80016ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e242      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001648:	d106      	bne.n	8001658 <HAL_RCC_OscConfig+0x74>
 800164a:	4b76      	ldr	r3, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a75      	ldr	r2, [pc, #468]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e01d      	b.n	8001694 <HAL_RCC_OscConfig+0xb0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x98>
 8001662:	4b70      	ldr	r3, [pc, #448]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6f      	ldr	r2, [pc, #444]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6c      	ldr	r2, [pc, #432]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0xb0>
 800167c:	4b69      	ldr	r3, [pc, #420]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a68      	ldr	r2, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b66      	ldr	r3, [pc, #408]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a65      	ldr	r2, [pc, #404]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 800168e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fa10 	bl	8000ac0 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fa0c 	bl	8000ac0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e207      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0xc0>
 80016c2:	e014      	b.n	80016ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff f9fc 	bl	8000ac0 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff f9f8 	bl	8000ac0 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1f3      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	4b51      	ldr	r3, [pc, #324]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0xe8>
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d063      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016fa:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170e:	2b08      	cmp	r3, #8
 8001710:	d11c      	bne.n	800174c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001712:	4b44      	ldr	r3, [pc, #272]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d116      	bne.n	800174c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_RCC_OscConfig+0x152>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e1c7      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4937      	ldr	r1, [pc, #220]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	e03a      	b.n	80017c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x244>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff f9b1 	bl	8000ac0 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff f9ad 	bl	8000ac0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e1a8      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4925      	ldr	r1, [pc, #148]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_RCC_OscConfig+0x244>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f990 	bl	8000ac0 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff f98c 	bl	8000ac0 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e187      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d036      	beq.n	800183c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d016      	beq.n	8001804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_RCC_OscConfig+0x248>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff f970 	bl	8000ac0 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff f96c 	bl	8000ac0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e167      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_OscConfig+0x240>)
 80017f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x200>
 8001802:	e01b      	b.n	800183c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_OscConfig+0x248>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff f959 	bl	8000ac0 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	e00e      	b.n	8001830 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff f955 	bl	8000ac0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d907      	bls.n	8001830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e150      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
 8001824:	40023800 	.word	0x40023800
 8001828:	42470000 	.word	0x42470000
 800182c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ea      	bne.n	8001812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8097 	beq.w	8001978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184e:	4b81      	ldr	r3, [pc, #516]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10f      	bne.n	800187a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b7d      	ldr	r3, [pc, #500]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a7c      	ldr	r2, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b7a      	ldr	r3, [pc, #488]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	4b77      	ldr	r3, [pc, #476]	; (8001a58 <HAL_RCC_OscConfig+0x474>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d118      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	4b74      	ldr	r3, [pc, #464]	; (8001a58 <HAL_RCC_OscConfig+0x474>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a73      	ldr	r2, [pc, #460]	; (8001a58 <HAL_RCC_OscConfig+0x474>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff f915 	bl	8000ac0 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff f911 	bl	8000ac0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e10c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <HAL_RCC_OscConfig+0x474>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x2ea>
 80018c0:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a63      	ldr	r2, [pc, #396]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x324>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x30c>
 80018d6:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a5e      	ldr	r2, [pc, #376]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a5b      	ldr	r2, [pc, #364]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0x324>
 80018f0:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a57      	ldr	r2, [pc, #348]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
 80018fc:	4b55      	ldr	r3, [pc, #340]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a54      	ldr	r2, [pc, #336]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d015      	beq.n	800193c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff f8d6 	bl	8000ac0 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff f8d2 	bl	8000ac0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0cb      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192e:	4b49      	ldr	r3, [pc, #292]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0ee      	beq.n	8001918 <HAL_RCC_OscConfig+0x334>
 800193a:	e014      	b.n	8001966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff f8c0 	bl	8000ac0 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001942:	e00a      	b.n	800195a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7ff f8bc 	bl	8000ac0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0b5      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195a:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ee      	bne.n	8001944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196c:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	4a38      	ldr	r2, [pc, #224]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a1 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001982:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b08      	cmp	r3, #8
 800198c:	d05c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d141      	bne.n	8001a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <HAL_RCC_OscConfig+0x478>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f890 	bl	8000ac0 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f88c 	bl	8000ac0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e087      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	019b      	lsls	r3, r3, #6
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	3b01      	subs	r3, #1
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	491b      	ldr	r1, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x478>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff f865 	bl	8000ac0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f861 	bl	8000ac0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e05c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x416>
 8001a18:	e054      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0x478>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f84e 	bl	8000ac0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f84a 	bl	8000ac0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e045      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x444>
 8001a46:	e03d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e038      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_OscConfig+0x4ec>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d028      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d121      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d11a      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a90:	4013      	ands	r3, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d111      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0cc      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCC_ClockConfig+0x1b8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d90c      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b65      	ldr	r3, [pc, #404]	; (8001c8c <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0b8      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b28:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b40:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	494d      	ldr	r1, [pc, #308]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d044      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d119      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e07f      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b92:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e06f      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e067      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb2:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f023 0203 	bic.w	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4934      	ldr	r1, [pc, #208]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc4:	f7fe ff7c 	bl	8000ac0 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bcc:	f7fe ff78 	bl	8000ac0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e04f      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 020c 	and.w	r2, r3, #12
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d1eb      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d20c      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e032      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4916      	ldr	r1, [pc, #88]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	490e      	ldr	r1, [pc, #56]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c5a:	f000 f821 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	490a      	ldr	r1, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	5ccb      	ldrb	r3, [r1, r3]
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fedc 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00
 8001c90:	40023800 	.word	0x40023800
 8001c94:	080053c0 	.word	0x080053c0
 8001c98:	20000010 	.word	0x20000010
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca4:	b094      	sub	sp, #80	; 0x50
 8001ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
 8001cac:	2300      	movs	r3, #0
 8001cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb8:	4b79      	ldr	r3, [pc, #484]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	f200 80e1 	bhi.w	8001e8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x3a>
 8001cd2:	e0db      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4b73      	ldr	r3, [pc, #460]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cd8:	e0db      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cda:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cde:	e0d8      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce0:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf6:	4b6a      	ldr	r3, [pc, #424]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	099b      	lsrs	r3, r3, #6
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d12:	4622      	mov	r2, r4
 8001d14:	462b      	mov	r3, r5
 8001d16:	f04f 0000 	mov.w	r0, #0
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	0159      	lsls	r1, r3, #5
 8001d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d24:	0150      	lsls	r0, r2, #5
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	1a51      	subs	r1, r2, r1
 8001d2e:	6139      	str	r1, [r7, #16]
 8001d30:	4629      	mov	r1, r5
 8001d32:	eb63 0301 	sbc.w	r3, r3, r1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d44:	4659      	mov	r1, fp
 8001d46:	018b      	lsls	r3, r1, #6
 8001d48:	4651      	mov	r1, sl
 8001d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d4e:	4651      	mov	r1, sl
 8001d50:	018a      	lsls	r2, r1, #6
 8001d52:	4651      	mov	r1, sl
 8001d54:	ebb2 0801 	subs.w	r8, r2, r1
 8001d58:	4659      	mov	r1, fp
 8001d5a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d72:	4690      	mov	r8, r2
 8001d74:	4699      	mov	r9, r3
 8001d76:	4623      	mov	r3, r4
 8001d78:	eb18 0303 	adds.w	r3, r8, r3
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	462b      	mov	r3, r5
 8001d80:	eb49 0303 	adc.w	r3, r9, r3
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d92:	4629      	mov	r1, r5
 8001d94:	024b      	lsls	r3, r1, #9
 8001d96:	4621      	mov	r1, r4
 8001d98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	024a      	lsls	r2, r1, #9
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da6:	2200      	movs	r2, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001db0:	f7fe fa86 	bl	80002c0 <__aeabi_uldivmod>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4613      	mov	r3, r2
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dbc:	e058      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4611      	mov	r1, r2
 8001dca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dd8:	4642      	mov	r2, r8
 8001dda:	464b      	mov	r3, r9
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	0159      	lsls	r1, r3, #5
 8001de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dea:	0150      	lsls	r0, r2, #5
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4641      	mov	r1, r8
 8001df2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001df6:	4649      	mov	r1, r9
 8001df8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e10:	ebb2 040a 	subs.w	r4, r2, sl
 8001e14:	eb63 050b 	sbc.w	r5, r3, fp
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	00eb      	lsls	r3, r5, #3
 8001e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e26:	00e2      	lsls	r2, r4, #3
 8001e28:	4614      	mov	r4, r2
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	4643      	mov	r3, r8
 8001e2e:	18e3      	adds	r3, r4, r3
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	464b      	mov	r3, r9
 8001e34:	eb45 0303 	adc.w	r3, r5, r3
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e46:	4629      	mov	r1, r5
 8001e48:	028b      	lsls	r3, r1, #10
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e50:	4621      	mov	r1, r4
 8001e52:	028a      	lsls	r2, r1, #10
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	61fa      	str	r2, [r7, #28]
 8001e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e64:	f7fe fa2c 	bl	80002c0 <__aeabi_uldivmod>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3750      	adds	r7, #80	; 0x50
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	00f42400 	.word	0x00f42400
 8001ea8:	007a1200 	.word	0x007a1200

08001eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000010 	.word	0x20000010

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec8:	f7ff fff0 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	080053d0 	.word	0x080053d0

08001eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ef0:	f7ff ffdc 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0b5b      	lsrs	r3, r3, #13
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4903      	ldr	r1, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	080053d0 	.word	0x080053d0

08001f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e041      	b.n	8001faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f001 fe5a 	bl	8003bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 f9ce 	bl	80022f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04e      	b.n	800206a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d022      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d01d      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_TIM_Base_Start_IT+0xc8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d018      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_TIM_Base_Start_IT+0xcc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_TIM_Base_Start_IT+0xd0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00e      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <HAL_TIM_Base_Start_IT+0xd4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d009      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_TIM_Base_Start_IT+0xd8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_TIM_Base_Start_IT+0xdc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b06      	cmp	r3, #6
 8002044:	d010      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002056:	e007      	b.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40010000 	.word	0x40010000
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800
 8002084:	40000c00 	.word	0x40000c00
 8002088:	40010400 	.word	0x40010400
 800208c:	40014000 	.word	0x40014000
 8002090:	40001800 	.word	0x40001800

08002094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0202 	mvn.w	r2, #2
 80020c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8ee 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8e0 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8f1 	bl	80022cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b04      	cmp	r3, #4
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0204 	mvn.w	r2, #4
 8002114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8c4 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8b6 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8c7 	bl	80022cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0208 	mvn.w	r2, #8
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2204      	movs	r2, #4
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f89a 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f88c 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f89d 	bl	80022cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0210 	mvn.w	r2, #16
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2208      	movs	r2, #8
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f870 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f862 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f873 	bl	80022cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0201 	mvn.w	r2, #1
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fb28 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	2b80      	cmp	r3, #128	; 0x80
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f902 	bl	8002448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d107      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f838 	bl	80022e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b20      	cmp	r3, #32
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b20      	cmp	r3, #32
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0220 	mvn.w	r2, #32
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8cc 	bl	8002434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a40      	ldr	r2, [pc, #256]	; (8002408 <TIM_Base_SetConfig+0x114>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d00f      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3d      	ldr	r2, [pc, #244]	; (800240c <TIM_Base_SetConfig+0x118>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00b      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3c      	ldr	r2, [pc, #240]	; (8002410 <TIM_Base_SetConfig+0x11c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <TIM_Base_SetConfig+0x120>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3a      	ldr	r2, [pc, #232]	; (8002418 <TIM_Base_SetConfig+0x124>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d108      	bne.n	8002346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <TIM_Base_SetConfig+0x114>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02b      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d027      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2c      	ldr	r2, [pc, #176]	; (800240c <TIM_Base_SetConfig+0x118>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d023      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <TIM_Base_SetConfig+0x11c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01f      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2a      	ldr	r2, [pc, #168]	; (8002414 <TIM_Base_SetConfig+0x120>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01b      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a29      	ldr	r2, [pc, #164]	; (8002418 <TIM_Base_SetConfig+0x124>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d017      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a28      	ldr	r2, [pc, #160]	; (800241c <TIM_Base_SetConfig+0x128>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <TIM_Base_SetConfig+0x12c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00f      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <TIM_Base_SetConfig+0x130>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00b      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a25      	ldr	r2, [pc, #148]	; (8002428 <TIM_Base_SetConfig+0x134>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a24      	ldr	r2, [pc, #144]	; (800242c <TIM_Base_SetConfig+0x138>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d003      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a23      	ldr	r2, [pc, #140]	; (8002430 <TIM_Base_SetConfig+0x13c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d108      	bne.n	80023b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <TIM_Base_SetConfig+0x114>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <TIM_Base_SetConfig+0xf8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <TIM_Base_SetConfig+0x124>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d103      	bne.n	80023f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	615a      	str	r2, [r3, #20]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40010000 	.word	0x40010000
 800240c:	40000400 	.word	0x40000400
 8002410:	40000800 	.word	0x40000800
 8002414:	40000c00 	.word	0x40000c00
 8002418:	40010400 	.word	0x40010400
 800241c:	40014000 	.word	0x40014000
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800
 8002428:	40001800 	.word	0x40001800
 800242c:	40001c00 	.word	0x40001c00
 8002430:	40002000 	.word	0x40002000

08002434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e03f      	b.n	80024ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 fbd6 	bl	8003c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fddf 	bl	8003064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b08a      	sub	sp, #40	; 0x28
 80024fa:	af02      	add	r7, sp, #8
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	d17c      	bne.n	8002610 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_UART_Transmit+0x2c>
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e075      	b.n	8002612 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_UART_Transmit+0x3e>
 8002530:	2302      	movs	r3, #2
 8002532:	e06e      	b.n	8002612 <HAL_UART_Transmit+0x11c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800254a:	f7fe fab9 	bl	8000ac0 <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002564:	d108      	bne.n	8002578 <HAL_UART_Transmit+0x82>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e003      	b.n	8002580 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002588:	e02a      	b.n	80025e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fb1f 	bl	8002bd8 <UART_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e036      	b.n	8002612 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	3302      	adds	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e007      	b.n	80025d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1cf      	bne.n	800258a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2140      	movs	r1, #64	; 0x40
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 faef 	bl	8002bd8 <UART_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e006      	b.n	8002612 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	4613      	mov	r3, r2
 8002626:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d11d      	bne.n	8002670 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Receive_IT+0x26>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e016      	b.n	8002672 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_UART_Receive_IT+0x38>
 800264e:	2302      	movs	r3, #2
 8002650:	e00f      	b.n	8002672 <HAL_UART_Receive_IT+0x58>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	461a      	mov	r2, r3
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fb24 	bl	8002cb4 <UART_Start_Receive_IT>
 800266c:	4603      	mov	r3, r0
 800266e:	e000      	b.n	8002672 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
  }
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0ba      	sub	sp, #232	; 0xe8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10f      	bne.n	80026e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_UART_IRQHandler+0x66>
 80026ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fc07 	bl	8002eee <UART_Receive_IT>
      return;
 80026e0:	e256      	b.n	8002b90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80de 	beq.w	80028a8 <HAL_UART_IRQHandler+0x22c>
 80026ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80d1 	beq.w	80028a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_UART_IRQHandler+0xae>
 8002712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800272a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_UART_IRQHandler+0xd2>
 8002736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800274e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_UART_IRQHandler+0xf6>
 800275a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d011      	beq.n	80027a2 <HAL_UART_IRQHandler+0x126>
 800277e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800278a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f043 0208 	orr.w	r2, r3, #8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 81ed 	beq.w	8002b86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_UART_IRQHandler+0x14e>
 80027b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fb92 	bl	8002eee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <HAL_UART_IRQHandler+0x17a>
 80027ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04f      	beq.n	8002896 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa9a 	bl	8002d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d141      	bne.n	800288e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002818:	e853 3f00 	ldrex	r3, [r3]
 800281c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3314      	adds	r3, #20
 8002832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002836:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800283a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800284e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1d9      	bne.n	800280a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	2b00      	cmp	r3, #0
 800285c:	d013      	beq.n	8002886 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	4a7d      	ldr	r2, [pc, #500]	; (8002a58 <HAL_UART_IRQHandler+0x3dc>)
 8002864:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fac2 	bl	8000df4 <HAL_DMA_Abort_IT>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002880:	4610      	mov	r0, r2
 8002882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	e00e      	b.n	80028a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f990 	bl	8002bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288c:	e00a      	b.n	80028a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f98c 	bl	8002bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	e006      	b.n	80028a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f988 	bl	8002bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80028a2:	e170      	b.n	8002b86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a4:	bf00      	nop
    return;
 80028a6:	e16e      	b.n	8002b86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f040 814a 	bne.w	8002b46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8143 	beq.w	8002b46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 813c 	beq.w	8002b46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	f040 80b4 	bne.w	8002a5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8140 	beq.w	8002b8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800290e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002912:	429a      	cmp	r2, r3
 8002914:	f080 8139 	bcs.w	8002b8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800291e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292a:	f000 8088 	beq.w	8002a3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800294c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800295a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800295e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002962:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002966:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1d9      	bne.n	800292e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3314      	adds	r3, #20
 8002980:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002984:	e853 3f00 	ldrex	r3, [r3]
 8002988:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800298a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3314      	adds	r3, #20
 800299a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800299e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e1      	bne.n	800297a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3314      	adds	r3, #20
 80029bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3314      	adds	r3, #20
 80029d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e3      	bne.n	80029b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	330c      	adds	r3, #12
 8002a02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a06:	e853 3f00 	ldrex	r3, [r3]
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0e:	f023 0310 	bic.w	r3, r3, #16
 8002a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a20:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e3      	bne.n	80029fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f96b 	bl	8000d14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8b6 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a54:	e099      	b.n	8002b8a <HAL_UART_IRQHandler+0x50e>
 8002a56:	bf00      	nop
 8002a58:	08002df7 	.word	0x08002df7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 808b 	beq.w	8002b8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8086 	beq.w	8002b8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	330c      	adds	r3, #12
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	e853 3f00 	ldrex	r3, [r3]
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002aa6:	647a      	str	r2, [r7, #68]	; 0x44
 8002aa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e3      	bne.n	8002a82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3314      	adds	r3, #20
 8002ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ade:	633a      	str	r2, [r7, #48]	; 0x30
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e3      	bne.n	8002aba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0310 	bic.w	r3, r3, #16
 8002b16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b24:	61fa      	str	r2, [r7, #28]
 8002b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	69b9      	ldr	r1, [r7, #24]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	617b      	str	r3, [r7, #20]
   return(result);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e3      	bne.n	8002b00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f83e 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b44:	e023      	b.n	8002b8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_UART_IRQHandler+0x4ea>
 8002b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f95d 	bl	8002e1e <UART_Transmit_IT>
    return;
 8002b64:	e014      	b.n	8002b90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00e      	beq.n	8002b90 <HAL_UART_IRQHandler+0x514>
 8002b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f99d 	bl	8002ebe <UART_EndTransmit_IT>
    return;
 8002b84:	e004      	b.n	8002b90 <HAL_UART_IRQHandler+0x514>
    return;
 8002b86:	bf00      	nop
 8002b88:	e002      	b.n	8002b90 <HAL_UART_IRQHandler+0x514>
      return;
 8002b8a:	bf00      	nop
 8002b8c:	e000      	b.n	8002b90 <HAL_UART_IRQHandler+0x514>
      return;
 8002b8e:	bf00      	nop
  }
}
 8002b90:	37e8      	adds	r7, #232	; 0xe8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop

08002b98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b090      	sub	sp, #64	; 0x40
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be8:	e050      	b.n	8002c8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf0:	d04c      	beq.n	8002c8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bf8:	f7fd ff62 	bl	8000ac0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d241      	bcs.n	8002c8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c28:	637a      	str	r2, [r7, #52]	; 0x34
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c30:	e841 2300 	strex	r3, r2, [r1]
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e5      	bne.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3314      	adds	r3, #20
 8002c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3314      	adds	r3, #20
 8002c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c5c:	623a      	str	r2, [r7, #32]
 8002c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	69f9      	ldr	r1, [r7, #28]
 8002c62:	6a3a      	ldr	r2, [r7, #32]
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e00f      	b.n	8002cac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d09f      	beq.n	8002bea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3740      	adds	r7, #64	; 0x40
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2222      	movs	r2, #34	; 0x22
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0220 	orr.w	r2, r2, #32
 8002d20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b095      	sub	sp, #84	; 0x54
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d58:	643a      	str	r2, [r7, #64]	; 0x40
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3314      	adds	r3, #20
 8002d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e5      	bne.n	8002d6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d119      	bne.n	8002ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f023 0310 	bic.w	r3, r3, #16
 8002dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dc8:	61ba      	str	r2, [r7, #24]
 8002dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e5      	bne.n	8002da8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dea:	bf00      	nop
 8002dec:	3754      	adds	r7, #84	; 0x54
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff fecb 	bl	8002bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b21      	cmp	r3, #33	; 0x21
 8002e30:	d13e      	bne.n	8002eb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d114      	bne.n	8002e66 <UART_Transmit_IT+0x48>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d110      	bne.n	8002e66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	1c9a      	adds	r2, r3, #2
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	621a      	str	r2, [r3, #32]
 8002e64:	e008      	b.n	8002e78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	1c59      	adds	r1, r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6211      	str	r1, [r2, #32]
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4619      	mov	r1, r3
 8002e86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10f      	bne.n	8002eac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fe5a 	bl	8002b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08c      	sub	sp, #48	; 0x30
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b22      	cmp	r3, #34	; 0x22
 8002f00:	f040 80ab 	bne.w	800305a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0c:	d117      	bne.n	8002f3e <UART_Receive_IT+0x50>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d113      	bne.n	8002f3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	1c9a      	adds	r2, r3, #2
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f3c:	e026      	b.n	8002f8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d007      	beq.n	8002f62 <UART_Receive_IT+0x74>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <UART_Receive_IT+0x82>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e008      	b.n	8002f82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d15a      	bne.n	8003056 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0220 	bic.w	r2, r2, #32
 8002fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d135      	bne.n	800304c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f023 0310 	bic.w	r3, r3, #16
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	623a      	str	r2, [r7, #32]
 8003008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	69f9      	ldr	r1, [r7, #28]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	61bb      	str	r3, [r7, #24]
   return(result);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e5      	bne.n	8002fe6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b10      	cmp	r3, #16
 8003026:	d10a      	bne.n	800303e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fdbb 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
 800304a:	e002      	b.n	8003052 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd fc87 	bl	8000960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e002      	b.n	800305c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3730      	adds	r7, #48	; 0x30
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b0c0      	sub	sp, #256	; 0x100
 800306a:	af00      	add	r7, sp, #0
 800306c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	68d9      	ldr	r1, [r3, #12]
 8003082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	ea40 0301 	orr.w	r3, r0, r1
 800308c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	431a      	orrs	r2, r3
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030bc:	f021 010c 	bic.w	r1, r1, #12
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030ca:	430b      	orrs	r3, r1
 80030cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030de:	6999      	ldr	r1, [r3, #24]
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	ea40 0301 	orr.w	r3, r0, r1
 80030ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4b8f      	ldr	r3, [pc, #572]	; (8003330 <UART_SetConfig+0x2cc>)
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d005      	beq.n	8003104 <UART_SetConfig+0xa0>
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <UART_SetConfig+0x2d0>)
 8003100:	429a      	cmp	r2, r3
 8003102:	d104      	bne.n	800310e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7fe fef2 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8003108:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800310c:	e003      	b.n	8003116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800310e:	f7fe fed9 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8003112:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003120:	f040 810c 	bne.w	800333c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800312e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003136:	4622      	mov	r2, r4
 8003138:	462b      	mov	r3, r5
 800313a:	1891      	adds	r1, r2, r2
 800313c:	65b9      	str	r1, [r7, #88]	; 0x58
 800313e:	415b      	adcs	r3, r3
 8003140:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003146:	4621      	mov	r1, r4
 8003148:	eb12 0801 	adds.w	r8, r2, r1
 800314c:	4629      	mov	r1, r5
 800314e:	eb43 0901 	adc.w	r9, r3, r1
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800315e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003166:	4690      	mov	r8, r2
 8003168:	4699      	mov	r9, r3
 800316a:	4623      	mov	r3, r4
 800316c:	eb18 0303 	adds.w	r3, r8, r3
 8003170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003174:	462b      	mov	r3, r5
 8003176:	eb49 0303 	adc.w	r3, r9, r3
 800317a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800318a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800318e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003192:	460b      	mov	r3, r1
 8003194:	18db      	adds	r3, r3, r3
 8003196:	653b      	str	r3, [r7, #80]	; 0x50
 8003198:	4613      	mov	r3, r2
 800319a:	eb42 0303 	adc.w	r3, r2, r3
 800319e:	657b      	str	r3, [r7, #84]	; 0x54
 80031a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031a8:	f7fd f88a 	bl	80002c0 <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4b61      	ldr	r3, [pc, #388]	; (8003338 <UART_SetConfig+0x2d4>)
 80031b2:	fba3 2302 	umull	r2, r3, r3, r2
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	011c      	lsls	r4, r3, #4
 80031ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031cc:	4642      	mov	r2, r8
 80031ce:	464b      	mov	r3, r9
 80031d0:	1891      	adds	r1, r2, r2
 80031d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80031d4:	415b      	adcs	r3, r3
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031dc:	4641      	mov	r1, r8
 80031de:	eb12 0a01 	adds.w	sl, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb43 0b01 	adc.w	fp, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031fc:	4692      	mov	sl, r2
 80031fe:	469b      	mov	fp, r3
 8003200:	4643      	mov	r3, r8
 8003202:	eb1a 0303 	adds.w	r3, sl, r3
 8003206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800320a:	464b      	mov	r3, r9
 800320c:	eb4b 0303 	adc.w	r3, fp, r3
 8003210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003220:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003228:	460b      	mov	r3, r1
 800322a:	18db      	adds	r3, r3, r3
 800322c:	643b      	str	r3, [r7, #64]	; 0x40
 800322e:	4613      	mov	r3, r2
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	647b      	str	r3, [r7, #68]	; 0x44
 8003236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800323a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800323e:	f7fd f83f 	bl	80002c0 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4611      	mov	r1, r2
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <UART_SetConfig+0x2d4>)
 800324a:	fba3 2301 	umull	r2, r3, r3, r1
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2264      	movs	r2, #100	; 0x64
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	1acb      	subs	r3, r1, r3
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800325e:	4b36      	ldr	r3, [pc, #216]	; (8003338 <UART_SetConfig+0x2d4>)
 8003260:	fba3 2302 	umull	r2, r3, r3, r2
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800326c:	441c      	add	r4, r3
 800326e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003278:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800327c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	1891      	adds	r1, r2, r2
 8003286:	63b9      	str	r1, [r7, #56]	; 0x38
 8003288:	415b      	adcs	r3, r3
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800328c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003290:	4641      	mov	r1, r8
 8003292:	1851      	adds	r1, r2, r1
 8003294:	6339      	str	r1, [r7, #48]	; 0x30
 8003296:	4649      	mov	r1, r9
 8003298:	414b      	adcs	r3, r1
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032a8:	4659      	mov	r1, fp
 80032aa:	00cb      	lsls	r3, r1, #3
 80032ac:	4651      	mov	r1, sl
 80032ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b2:	4651      	mov	r1, sl
 80032b4:	00ca      	lsls	r2, r1, #3
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	4642      	mov	r2, r8
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032c4:	464b      	mov	r3, r9
 80032c6:	460a      	mov	r2, r1
 80032c8:	eb42 0303 	adc.w	r3, r2, r3
 80032cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032e4:	460b      	mov	r3, r1
 80032e6:	18db      	adds	r3, r3, r3
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ea:	4613      	mov	r3, r2
 80032ec:	eb42 0303 	adc.w	r3, r2, r3
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032fa:	f7fc ffe1 	bl	80002c0 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <UART_SetConfig+0x2d4>)
 8003304:	fba3 1302 	umull	r1, r3, r3, r2
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	2164      	movs	r1, #100	; 0x64
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	3332      	adds	r3, #50	; 0x32
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <UART_SetConfig+0x2d4>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	f003 0207 	and.w	r2, r3, #7
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4422      	add	r2, r4
 800332a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800332c:	e105      	b.n	800353a <UART_SetConfig+0x4d6>
 800332e:	bf00      	nop
 8003330:	40011000 	.word	0x40011000
 8003334:	40011400 	.word	0x40011400
 8003338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800333c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003340:	2200      	movs	r2, #0
 8003342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003346:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800334a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800334e:	4642      	mov	r2, r8
 8003350:	464b      	mov	r3, r9
 8003352:	1891      	adds	r1, r2, r2
 8003354:	6239      	str	r1, [r7, #32]
 8003356:	415b      	adcs	r3, r3
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
 800335a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800335e:	4641      	mov	r1, r8
 8003360:	1854      	adds	r4, r2, r1
 8003362:	4649      	mov	r1, r9
 8003364:	eb43 0501 	adc.w	r5, r3, r1
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	00eb      	lsls	r3, r5, #3
 8003372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003376:	00e2      	lsls	r2, r4, #3
 8003378:	4614      	mov	r4, r2
 800337a:	461d      	mov	r5, r3
 800337c:	4643      	mov	r3, r8
 800337e:	18e3      	adds	r3, r4, r3
 8003380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003384:	464b      	mov	r3, r9
 8003386:	eb45 0303 	adc.w	r3, r5, r3
 800338a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800339a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033aa:	4629      	mov	r1, r5
 80033ac:	008b      	lsls	r3, r1, #2
 80033ae:	4621      	mov	r1, r4
 80033b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033b4:	4621      	mov	r1, r4
 80033b6:	008a      	lsls	r2, r1, #2
 80033b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033bc:	f7fc ff80 	bl	80002c0 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4b60      	ldr	r3, [pc, #384]	; (8003548 <UART_SetConfig+0x4e4>)
 80033c6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	011c      	lsls	r4, r3, #4
 80033ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	1891      	adds	r1, r2, r2
 80033e6:	61b9      	str	r1, [r7, #24]
 80033e8:	415b      	adcs	r3, r3
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f0:	4641      	mov	r1, r8
 80033f2:	1851      	adds	r1, r2, r1
 80033f4:	6139      	str	r1, [r7, #16]
 80033f6:	4649      	mov	r1, r9
 80033f8:	414b      	adcs	r3, r1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003408:	4659      	mov	r1, fp
 800340a:	00cb      	lsls	r3, r1, #3
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003412:	4651      	mov	r1, sl
 8003414:	00ca      	lsls	r2, r1, #3
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	4603      	mov	r3, r0
 800341c:	4642      	mov	r2, r8
 800341e:	189b      	adds	r3, r3, r2
 8003420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003424:	464b      	mov	r3, r9
 8003426:	460a      	mov	r2, r1
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	67bb      	str	r3, [r7, #120]	; 0x78
 800343a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003448:	4649      	mov	r1, r9
 800344a:	008b      	lsls	r3, r1, #2
 800344c:	4641      	mov	r1, r8
 800344e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003452:	4641      	mov	r1, r8
 8003454:	008a      	lsls	r2, r1, #2
 8003456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800345a:	f7fc ff31 	bl	80002c0 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <UART_SetConfig+0x4e4>)
 8003464:	fba3 1302 	umull	r1, r3, r3, r2
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	2164      	movs	r1, #100	; 0x64
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	3332      	adds	r3, #50	; 0x32
 8003476:	4a34      	ldr	r2, [pc, #208]	; (8003548 <UART_SetConfig+0x4e4>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003482:	441c      	add	r4, r3
 8003484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003488:	2200      	movs	r2, #0
 800348a:	673b      	str	r3, [r7, #112]	; 0x70
 800348c:	677a      	str	r2, [r7, #116]	; 0x74
 800348e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003492:	4642      	mov	r2, r8
 8003494:	464b      	mov	r3, r9
 8003496:	1891      	adds	r1, r2, r2
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	415b      	adcs	r3, r3
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a2:	4641      	mov	r1, r8
 80034a4:	1851      	adds	r1, r2, r1
 80034a6:	6039      	str	r1, [r7, #0]
 80034a8:	4649      	mov	r1, r9
 80034aa:	414b      	adcs	r3, r1
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034ba:	4659      	mov	r1, fp
 80034bc:	00cb      	lsls	r3, r1, #3
 80034be:	4651      	mov	r1, sl
 80034c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c4:	4651      	mov	r1, sl
 80034c6:	00ca      	lsls	r2, r1, #3
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	4603      	mov	r3, r0
 80034ce:	4642      	mov	r2, r8
 80034d0:	189b      	adds	r3, r3, r2
 80034d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d4:	464b      	mov	r3, r9
 80034d6:	460a      	mov	r2, r1
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	663b      	str	r3, [r7, #96]	; 0x60
 80034e8:	667a      	str	r2, [r7, #100]	; 0x64
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034f6:	4649      	mov	r1, r9
 80034f8:	008b      	lsls	r3, r1, #2
 80034fa:	4641      	mov	r1, r8
 80034fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003500:	4641      	mov	r1, r8
 8003502:	008a      	lsls	r2, r1, #2
 8003504:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003508:	f7fc feda 	bl	80002c0 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <UART_SetConfig+0x4e4>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2164      	movs	r1, #100	; 0x64
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a08      	ldr	r2, [pc, #32]	; (8003548 <UART_SetConfig+0x4e4>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4422      	add	r2, r4
 8003538:	609a      	str	r2, [r3, #8]
}
 800353a:	bf00      	nop
 800353c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003540:	46bd      	mov	sp, r7
 8003542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003546:	bf00      	nop
 8003548:	51eb851f 	.word	0x51eb851f

0800354c <SC_Process>:

char *user_Name = "admin";
char *user_Pass = "password";

void SC_Process(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
	if(Authenticated_User() != USER_AUTHENICATED)
 8003550:	f000 f942 	bl	80037d8 <Authenticated_User>
 8003554:	4603      	mov	r3, r0
 8003556:	2b34      	cmp	r3, #52	; 0x34
 8003558:	d147      	bne.n	80035ea <SC_Process+0x9e>
	{
		return;
	}
	if(UART_Rx_Byte_Available())
 800355a:	f7fd fa3f 	bl	80009dc <UART_Rx_Byte_Available>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d047      	beq.n	80035f4 <SC_Process+0xa8>
	{
		UART_Get_Rx_Byte(&sc_Rx_Buffer, 1);
 8003564:	2101      	movs	r1, #1
 8003566:	4824      	ldr	r0, [pc, #144]	; (80035f8 <SC_Process+0xac>)
 8003568:	f7fd fa20 	bl	80009ac <UART_Get_Rx_Byte>
		if(sc_Option == MAIN_MENU)
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <SC_Process+0xb0>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b0d      	cmp	r3, #13
 8003572:	d103      	bne.n	800357c <SC_Process+0x30>
		{
			sc_Option = sc_Rx_Buffer;
 8003574:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <SC_Process+0xac>)
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	4b20      	ldr	r3, [pc, #128]	; (80035fc <SC_Process+0xb0>)
 800357a:	701a      	strb	r2, [r3, #0]
		}
		switch(sc_Option)
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <SC_Process+0xb0>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b79      	cmp	r3, #121	; 0x79
 8003582:	d023      	beq.n	80035cc <SC_Process+0x80>
 8003584:	2b79      	cmp	r3, #121	; 0x79
 8003586:	dc27      	bgt.n	80035d8 <SC_Process+0x8c>
 8003588:	2b78      	cmp	r3, #120	; 0x78
 800358a:	d015      	beq.n	80035b8 <SC_Process+0x6c>
 800358c:	2b78      	cmp	r3, #120	; 0x78
 800358e:	dc23      	bgt.n	80035d8 <SC_Process+0x8c>
 8003590:	2b31      	cmp	r3, #49	; 0x31
 8003592:	d002      	beq.n	800359a <SC_Process+0x4e>
 8003594:	2b32      	cmp	r3, #50	; 0x32
 8003596:	d02a      	beq.n	80035ee <SC_Process+0xa2>
 8003598:	e01e      	b.n	80035d8 <SC_Process+0x8c>
		{
		case DEBUG_MODE:
			Debug_Menu_Decode(sc_Rx_Buffer);
 800359a:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <SC_Process+0xac>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f890 	bl	80036c4 <Debug_Menu_Decode>
			if(sc_Debug_Option == DEBUG_MENU_UNKNOWN)
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <SC_Process+0xb4>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b3a      	cmp	r3, #58	; 0x3a
 80035aa:	d122      	bne.n	80035f2 <SC_Process+0xa6>
			{
				Show_Main_Menu();
 80035ac:	f000 f86c 	bl	8003688 <Show_Main_Menu>
				sc_Option = MAIN_MENU;
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <SC_Process+0xb0>)
 80035b2:	220d      	movs	r2, #13
 80035b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80035b6:	e01c      	b.n	80035f2 <SC_Process+0xa6>
		case BOOTLOADER_MODE:
			break;
		case EXIT:
			sc_Option = MAIN_MENU_UNKNOWN;
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <SC_Process+0xb0>)
 80035ba:	2279      	movs	r2, #121	; 0x79
 80035bc:	701a      	strb	r2, [r3, #0]
			sc_User_State = USER_UNKNOWN;
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <SC_Process+0xb8>)
 80035c0:	2235      	movs	r2, #53	; 0x35
 80035c2:	701a      	strb	r2, [r3, #0]
			Print_Msg("Exited \r\n");
 80035c4:	4810      	ldr	r0, [pc, #64]	; (8003608 <SC_Process+0xbc>)
 80035c6:	f7fd f9a7 	bl	8000918 <Print_Msg>
			break;
 80035ca:	e013      	b.n	80035f4 <SC_Process+0xa8>
		case MAIN_MENU_UNKNOWN:
			Show_Main_Menu();
 80035cc:	f000 f85c 	bl	8003688 <Show_Main_Menu>
			sc_Option = MAIN_MENU;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <SC_Process+0xb0>)
 80035d2:	220d      	movs	r2, #13
 80035d4:	701a      	strb	r2, [r3, #0]
			break;
 80035d6:	e00d      	b.n	80035f4 <SC_Process+0xa8>
		default:
			Print_Msg("Invalid Options\r\n");
 80035d8:	480c      	ldr	r0, [pc, #48]	; (800360c <SC_Process+0xc0>)
 80035da:	f7fd f99d 	bl	8000918 <Print_Msg>
			Show_Main_Menu();
 80035de:	f000 f853 	bl	8003688 <Show_Main_Menu>
			sc_Option = MAIN_MENU;
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <SC_Process+0xb0>)
 80035e4:	220d      	movs	r2, #13
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e004      	b.n	80035f4 <SC_Process+0xa8>
		return;
 80035ea:	bf00      	nop
 80035ec:	e002      	b.n	80035f4 <SC_Process+0xa8>
			break;
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <SC_Process+0xa8>
			break;
 80035f2:	bf00      	nop
		}
	}
}
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000180 	.word	0x20000180
 80035fc:	20000005 	.word	0x20000005
 8003600:	20000006 	.word	0x20000006
 8003604:	20000007 	.word	0x20000007
 8003608:	080050d0 	.word	0x080050d0
 800360c:	080050dc 	.word	0x080050dc

08003610 <Show_Debug_Menu>:

void Show_Debug_Menu(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
	Print_Msg("******* STM32F4 Debug Menu *******\r\n\n");
 8003614:	4811      	ldr	r0, [pc, #68]	; (800365c <Show_Debug_Menu+0x4c>)
 8003616:	f7fd f97f 	bl	8000918 <Print_Msg>
	Print_Msg("\t1. System Information \r\n");
 800361a:	4811      	ldr	r0, [pc, #68]	; (8003660 <Show_Debug_Menu+0x50>)
 800361c:	f7fd f97c 	bl	8000918 <Print_Msg>
	Print_Msg("\t2. Turn On Red LED \r\n");
 8003620:	4810      	ldr	r0, [pc, #64]	; (8003664 <Show_Debug_Menu+0x54>)
 8003622:	f7fd f979 	bl	8000918 <Print_Msg>
	Print_Msg("\t3. Turn OFF Red LED \r\n");
 8003626:	4810      	ldr	r0, [pc, #64]	; (8003668 <Show_Debug_Menu+0x58>)
 8003628:	f7fd f976 	bl	8000918 <Print_Msg>
	Print_Msg("\t4. Turn ON Green LED \r\n");
 800362c:	480f      	ldr	r0, [pc, #60]	; (800366c <Show_Debug_Menu+0x5c>)
 800362e:	f7fd f973 	bl	8000918 <Print_Msg>
	Print_Msg("\t5. Turn OFF Green LED \r\n");
 8003632:	480f      	ldr	r0, [pc, #60]	; (8003670 <Show_Debug_Menu+0x60>)
 8003634:	f7fd f970 	bl	8000918 <Print_Msg>
	Print_Msg("\t6. Software Version \r\n");
 8003638:	480e      	ldr	r0, [pc, #56]	; (8003674 <Show_Debug_Menu+0x64>)
 800363a:	f7fd f96d 	bl	8000918 <Print_Msg>
	Print_Msg("\t7. Reserved for Future Use \r\n");
 800363e:	480e      	ldr	r0, [pc, #56]	; (8003678 <Show_Debug_Menu+0x68>)
 8003640:	f7fd f96a 	bl	8000918 <Print_Msg>
	Print_Msg("\t8. Reserved for Future Use \r\n");
 8003644:	480d      	ldr	r0, [pc, #52]	; (800367c <Show_Debug_Menu+0x6c>)
 8003646:	f7fd f967 	bl	8000918 <Print_Msg>
	Print_Msg("\t9. Back To Main Menu\r\n\n");
 800364a:	480d      	ldr	r0, [pc, #52]	; (8003680 <Show_Debug_Menu+0x70>)
 800364c:	f7fd f964 	bl	8000918 <Print_Msg>
	//Print_Msg("*********************************************\r\n\n");
	Print_Msg("**********************************\r\n\n");
 8003650:	480c      	ldr	r0, [pc, #48]	; (8003684 <Show_Debug_Menu+0x74>)
 8003652:	f7fd f961 	bl	8000918 <Print_Msg>
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	080050f0 	.word	0x080050f0
 8003660:	08005118 	.word	0x08005118
 8003664:	08005134 	.word	0x08005134
 8003668:	0800514c 	.word	0x0800514c
 800366c:	08005164 	.word	0x08005164
 8003670:	08005180 	.word	0x08005180
 8003674:	0800519c 	.word	0x0800519c
 8003678:	080051b4 	.word	0x080051b4
 800367c:	080051d4 	.word	0x080051d4
 8003680:	080051f4 	.word	0x080051f4
 8003684:	08005210 	.word	0x08005210

08003688 <Show_Main_Menu>:
void Show_Main_Menu(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	Print_Msg("******* STM32F4 Main Menu *******\r\n\n");
 800368c:	4808      	ldr	r0, [pc, #32]	; (80036b0 <Show_Main_Menu+0x28>)
 800368e:	f7fd f943 	bl	8000918 <Print_Msg>
	Print_Msg("\t1. Enter Debug Mode \r\n");
 8003692:	4808      	ldr	r0, [pc, #32]	; (80036b4 <Show_Main_Menu+0x2c>)
 8003694:	f7fd f940 	bl	8000918 <Print_Msg>
	Print_Msg("\t2. Upgrade Application \r\n");
 8003698:	4807      	ldr	r0, [pc, #28]	; (80036b8 <Show_Main_Menu+0x30>)
 800369a:	f7fd f93d 	bl	8000918 <Print_Msg>
	Print_Msg("\tx. Exit \r\n\n");
 800369e:	4807      	ldr	r0, [pc, #28]	; (80036bc <Show_Main_Menu+0x34>)
 80036a0:	f7fd f93a 	bl	8000918 <Print_Msg>
	Print_Msg("*********************************\r\n\n");
 80036a4:	4806      	ldr	r0, [pc, #24]	; (80036c0 <Show_Main_Menu+0x38>)
 80036a6:	f7fd f937 	bl	8000918 <Print_Msg>

}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	08005238 	.word	0x08005238
 80036b4:	08005260 	.word	0x08005260
 80036b8:	08005278 	.word	0x08005278
 80036bc:	08005294 	.word	0x08005294
 80036c0:	080052a4 	.word	0x080052a4

080036c4 <Debug_Menu_Decode>:
void Debug_Menu_Decode(char debug_Option)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
	if(sc_Debug_Option == DEBUG_MENU)
 80036ce:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <Debug_Menu_Decode+0xec>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b3b      	cmp	r3, #59	; 0x3b
 80036d4:	d102      	bne.n	80036dc <Debug_Menu_Decode+0x18>
	{
		sc_Debug_Option = debug_Option;
 80036d6:	4a36      	ldr	r2, [pc, #216]	; (80037b0 <Debug_Menu_Decode+0xec>)
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	7013      	strb	r3, [r2, #0]
	}
	switch(sc_Debug_Option)
 80036dc:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <Debug_Menu_Decode+0xec>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	3b31      	subs	r3, #49	; 0x31
 80036e2:	2b09      	cmp	r3, #9
 80036e4:	d856      	bhi.n	8003794 <Debug_Menu_Decode+0xd0>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <Debug_Menu_Decode+0x28>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	08003715 	.word	0x08003715
 80036f0:	08003723 	.word	0x08003723
 80036f4:	08003737 	.word	0x08003737
 80036f8:	0800374b 	.word	0x0800374b
 80036fc:	0800375f 	.word	0x0800375f
 8003700:	08003773 	.word	0x08003773
 8003704:	08003795 	.word	0x08003795
 8003708:	08003795 	.word	0x08003795
 800370c:	08003781 	.word	0x08003781
 8003710:	08003789 	.word	0x08003789
	{
	case SYS_INFO:
		Print_Msg("STM32F429 Discovery Board \r\n");
 8003714:	4827      	ldr	r0, [pc, #156]	; (80037b4 <Debug_Menu_Decode+0xf0>)
 8003716:	f7fd f8ff 	bl	8000918 <Print_Msg>
		sc_Debug_Option = DEBUG_MENU;
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <Debug_Menu_Decode+0xec>)
 800371c:	223b      	movs	r2, #59	; 0x3b
 800371e:	701a      	strb	r2, [r3, #0]
		break;
 8003720:	e041      	b.n	80037a6 <Debug_Menu_Decode+0xe2>

	case LED1_ON:
		LED1_ON_FLAG = 1;
 8003722:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <Debug_Menu_Decode+0xf4>)
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
		Print_Msg("Green LED is ON\r\n");
 8003728:	4824      	ldr	r0, [pc, #144]	; (80037bc <Debug_Menu_Decode+0xf8>)
 800372a:	f7fd f8f5 	bl	8000918 <Print_Msg>
		sc_Debug_Option = DEBUG_MENU;
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <Debug_Menu_Decode+0xec>)
 8003730:	223b      	movs	r2, #59	; 0x3b
 8003732:	701a      	strb	r2, [r3, #0]
		break;
 8003734:	e037      	b.n	80037a6 <Debug_Menu_Decode+0xe2>

	case LED1_OFF:
		LED1_ON_FLAG = 1;
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <Debug_Menu_Decode+0xf4>)
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
		Print_Msg("Green LED is OFF\r\n");
 800373c:	4820      	ldr	r0, [pc, #128]	; (80037c0 <Debug_Menu_Decode+0xfc>)
 800373e:	f7fd f8eb 	bl	8000918 <Print_Msg>
		sc_Debug_Option = DEBUG_MENU;
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <Debug_Menu_Decode+0xec>)
 8003744:	223b      	movs	r2, #59	; 0x3b
 8003746:	701a      	strb	r2, [r3, #0]
		break;
 8003748:	e02d      	b.n	80037a6 <Debug_Menu_Decode+0xe2>

	case LED2_ON:
		LED2_ON_FLAG = 1;
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <Debug_Menu_Decode+0x100>)
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
		Print_Msg("Red LED is ON\r\n");
 8003750:	481d      	ldr	r0, [pc, #116]	; (80037c8 <Debug_Menu_Decode+0x104>)
 8003752:	f7fd f8e1 	bl	8000918 <Print_Msg>
		sc_Debug_Option = DEBUG_MENU;
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <Debug_Menu_Decode+0xec>)
 8003758:	223b      	movs	r2, #59	; 0x3b
 800375a:	701a      	strb	r2, [r3, #0]
		break;
 800375c:	e023      	b.n	80037a6 <Debug_Menu_Decode+0xe2>

	case LED2_OFF:
		LED2_ON_FLAG = 1;
 800375e:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <Debug_Menu_Decode+0x100>)
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
		Print_Msg("Red LED is OFF\r\n");
 8003764:	4819      	ldr	r0, [pc, #100]	; (80037cc <Debug_Menu_Decode+0x108>)
 8003766:	f7fd f8d7 	bl	8000918 <Print_Msg>
		sc_Debug_Option = DEBUG_MENU;
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <Debug_Menu_Decode+0xec>)
 800376c:	223b      	movs	r2, #59	; 0x3b
 800376e:	701a      	strb	r2, [r3, #0]
		break;
 8003770:	e019      	b.n	80037a6 <Debug_Menu_Decode+0xe2>

	case SOFTWARE_VERSION:
		Print_Msg("Beta Release\r\n");
 8003772:	4817      	ldr	r0, [pc, #92]	; (80037d0 <Debug_Menu_Decode+0x10c>)
 8003774:	f7fd f8d0 	bl	8000918 <Print_Msg>
		sc_Debug_Option = DEBUG_MENU;
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <Debug_Menu_Decode+0xec>)
 800377a:	223b      	movs	r2, #59	; 0x3b
 800377c:	701a      	strb	r2, [r3, #0]
		break;
 800377e:	e012      	b.n	80037a6 <Debug_Menu_Decode+0xe2>

	case RET_MAIN_MENU:
		sc_Debug_Option = DEBUG_MENU_UNKNOWN;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <Debug_Menu_Decode+0xec>)
 8003782:	223a      	movs	r2, #58	; 0x3a
 8003784:	701a      	strb	r2, [r3, #0]
		break;
 8003786:	e00e      	b.n	80037a6 <Debug_Menu_Decode+0xe2>

	case DEBUG_MENU_UNKNOWN:
		Show_Debug_Menu();
 8003788:	f7ff ff42 	bl	8003610 <Show_Debug_Menu>
		sc_Debug_Option = DEBUG_MENU;
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <Debug_Menu_Decode+0xec>)
 800378e:	223b      	movs	r2, #59	; 0x3b
 8003790:	701a      	strb	r2, [r3, #0]
		break;
 8003792:	e008      	b.n	80037a6 <Debug_Menu_Decode+0xe2>

	default:
		Print_Msg("Invalid Debug Option \r\n");
 8003794:	480f      	ldr	r0, [pc, #60]	; (80037d4 <Debug_Menu_Decode+0x110>)
 8003796:	f7fd f8bf 	bl	8000918 <Print_Msg>
		Show_Debug_Menu();
 800379a:	f7ff ff39 	bl	8003610 <Show_Debug_Menu>
		sc_Debug_Option = DEBUG_MENU;
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <Debug_Menu_Decode+0xec>)
 80037a0:	223b      	movs	r2, #59	; 0x3b
 80037a2:	701a      	strb	r2, [r3, #0]
		break;
 80037a4:	bf00      	nop
	}
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000006 	.word	0x20000006
 80037b4:	080052cc 	.word	0x080052cc
 80037b8:	20000181 	.word	0x20000181
 80037bc:	080052ec 	.word	0x080052ec
 80037c0:	08005300 	.word	0x08005300
 80037c4:	20000182 	.word	0x20000182
 80037c8:	08005314 	.word	0x08005314
 80037cc:	08005324 	.word	0x08005324
 80037d0:	08005338 	.word	0x08005338
 80037d4:	08005348 	.word	0x08005348

080037d8 <Authenticated_User>:
SC_User_Decode Authenticated_User(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
	if(UART_Rx_Byte_Available())
 80037dc:	f7fd f8fe 	bl	80009dc <UART_Rx_Byte_Available>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80a0 	beq.w	8003928 <Authenticated_User+0x150>
	{

		switch(sc_User_State)
 80037e8:	4b52      	ldr	r3, [pc, #328]	; (8003934 <Authenticated_User+0x15c>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	3b31      	subs	r3, #49	; 0x31
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	f200 8096 	bhi.w	8003920 <Authenticated_User+0x148>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <Authenticated_User+0x24>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003811 	.word	0x08003811
 8003800:	0800386d 	.word	0x0800386d
 8003804:	08003921 	.word	0x08003921
 8003808:	080038fd 	.word	0x080038fd
 800380c:	08003905 	.word	0x08003905
		{
		case USER_NAME:
			UART_Get_Rx_Byte(&sc_Rx_Buffer, 1);
 8003810:	2101      	movs	r1, #1
 8003812:	4849      	ldr	r0, [pc, #292]	; (8003938 <Authenticated_User+0x160>)
 8003814:	f7fd f8ca 	bl	80009ac <UART_Get_Rx_Byte>
			if( (sc_Rx_Buffer != '\r') && (sc_Rx_Buffer != '\n'))
 8003818:	4b47      	ldr	r3, [pc, #284]	; (8003938 <Authenticated_User+0x160>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b0d      	cmp	r3, #13
 800381e:	d015      	beq.n	800384c <Authenticated_User+0x74>
 8003820:	4b45      	ldr	r3, [pc, #276]	; (8003938 <Authenticated_User+0x160>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b0a      	cmp	r3, #10
 8003826:	d011      	beq.n	800384c <Authenticated_User+0x74>
			{
				Print_Msg("%c", sc_Rx_Buffer);
 8003828:	4b43      	ldr	r3, [pc, #268]	; (8003938 <Authenticated_User+0x160>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	4843      	ldr	r0, [pc, #268]	; (800393c <Authenticated_User+0x164>)
 8003830:	f7fd f872 	bl	8000918 <Print_Msg>
				user_Name_Array[i++] = sc_Rx_Buffer;
 8003834:	4b42      	ldr	r3, [pc, #264]	; (8003940 <Authenticated_User+0x168>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	b2d1      	uxtb	r1, r2
 800383c:	4a40      	ldr	r2, [pc, #256]	; (8003940 <Authenticated_User+0x168>)
 800383e:	7011      	strb	r1, [r2, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <Authenticated_User+0x160>)
 8003844:	7819      	ldrb	r1, [r3, #0]
 8003846:	4b3f      	ldr	r3, [pc, #252]	; (8003944 <Authenticated_User+0x16c>)
 8003848:	5499      	strb	r1, [r3, r2]
				user_Name_Array[i] = '\0';
				sc_User_State = USER_PASS;
				i = 0;
				Print_Msg("\r\nUser Password: ");
			}
			break;
 800384a:	e06e      	b.n	800392a <Authenticated_User+0x152>
				user_Name_Array[i] = '\0';
 800384c:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <Authenticated_User+0x168>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b3c      	ldr	r3, [pc, #240]	; (8003944 <Authenticated_User+0x16c>)
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]
				sc_User_State = USER_PASS;
 8003858:	4b36      	ldr	r3, [pc, #216]	; (8003934 <Authenticated_User+0x15c>)
 800385a:	2232      	movs	r2, #50	; 0x32
 800385c:	701a      	strb	r2, [r3, #0]
				i = 0;
 800385e:	4b38      	ldr	r3, [pc, #224]	; (8003940 <Authenticated_User+0x168>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
				Print_Msg("\r\nUser Password: ");
 8003864:	4838      	ldr	r0, [pc, #224]	; (8003948 <Authenticated_User+0x170>)
 8003866:	f7fd f857 	bl	8000918 <Print_Msg>
			break;
 800386a:	e05e      	b.n	800392a <Authenticated_User+0x152>
		case USER_PASS:
			UART_Get_Rx_Byte(&sc_Rx_Buffer, 1);
 800386c:	2101      	movs	r1, #1
 800386e:	4832      	ldr	r0, [pc, #200]	; (8003938 <Authenticated_User+0x160>)
 8003870:	f7fd f89c 	bl	80009ac <UART_Get_Rx_Byte>
			if( (sc_Rx_Buffer != '\r') && (sc_Rx_Buffer != '\n'))
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <Authenticated_User+0x160>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b0d      	cmp	r3, #13
 800387a:	d018      	beq.n	80038ae <Authenticated_User+0xd6>
 800387c:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <Authenticated_User+0x160>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b0a      	cmp	r3, #10
 8003882:	d014      	beq.n	80038ae <Authenticated_User+0xd6>
			{
				user_Pass_Array[i++] = sc_Rx_Buffer;
 8003884:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <Authenticated_User+0x168>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	b2d1      	uxtb	r1, r2
 800388c:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <Authenticated_User+0x168>)
 800388e:	7011      	strb	r1, [r2, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b29      	ldr	r3, [pc, #164]	; (8003938 <Authenticated_User+0x160>)
 8003894:	7819      	ldrb	r1, [r3, #0]
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <Authenticated_User+0x174>)
 8003898:	5499      	strb	r1, [r3, r2]
				sc_Rx_Buffer = '*';
 800389a:	4b27      	ldr	r3, [pc, #156]	; (8003938 <Authenticated_User+0x160>)
 800389c:	222a      	movs	r2, #42	; 0x2a
 800389e:	701a      	strb	r2, [r3, #0]
				Print_Msg("%c", sc_Rx_Buffer);
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <Authenticated_User+0x160>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
 80038a6:	4825      	ldr	r0, [pc, #148]	; (800393c <Authenticated_User+0x164>)
 80038a8:	f7fd f836 	bl	8000918 <Print_Msg>
 80038ac:	e025      	b.n	80038fa <Authenticated_User+0x122>
			}
			else
			{
				user_Pass_Array[i] = '\0';
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <Authenticated_User+0x168>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b25      	ldr	r3, [pc, #148]	; (800394c <Authenticated_User+0x174>)
 80038b6:	2100      	movs	r1, #0
 80038b8:	5499      	strb	r1, [r3, r2]
				if ( (strcmp(user_Name, user_Name_Array) == 0)
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <Authenticated_User+0x178>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4921      	ldr	r1, [pc, #132]	; (8003944 <Authenticated_User+0x16c>)
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fc fc95 	bl	80001f0 <strcmp>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <Authenticated_User+0x114>
						&& (strcmp(user_Pass, user_Pass_Array) == 0) )
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <Authenticated_User+0x17c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	491e      	ldr	r1, [pc, #120]	; (800394c <Authenticated_User+0x174>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fc fc8c 	bl	80001f0 <strcmp>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <Authenticated_User+0x114>
				{
					sc_User_State = USER_AUTHENICATED;
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <Authenticated_User+0x15c>)
 80038e0:	2234      	movs	r2, #52	; 0x34
 80038e2:	701a      	strb	r2, [r3, #0]
					Print_Msg("\r\nUser Authenticated\r\n");
 80038e4:	481c      	ldr	r0, [pc, #112]	; (8003958 <Authenticated_User+0x180>)
 80038e6:	f7fd f817 	bl	8000918 <Print_Msg>
 80038ea:	e006      	b.n	80038fa <Authenticated_User+0x122>
				}
				else
				{
					Print_Msg("\r\nWrong User Name and Password\r\n");
 80038ec:	481b      	ldr	r0, [pc, #108]	; (800395c <Authenticated_User+0x184>)
 80038ee:	f7fd f813 	bl	8000918 <Print_Msg>
					sc_User_State = USER_UNKNOWN;
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <Authenticated_User+0x15c>)
 80038f4:	2235      	movs	r2, #53	; 0x35
 80038f6:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80038f8:	e017      	b.n	800392a <Authenticated_User+0x152>
 80038fa:	e016      	b.n	800392a <Authenticated_User+0x152>
		case USER_AUTHENICATED:
			sc_User_State = USER_AUTHENICATED;
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <Authenticated_User+0x15c>)
 80038fe:	2234      	movs	r2, #52	; 0x34
 8003900:	701a      	strb	r2, [r3, #0]
			break;
 8003902:	e012      	b.n	800392a <Authenticated_User+0x152>
		case USER_UNKNOWN:
			UART_Get_Rx_Byte(&sc_Rx_Buffer, 1);
 8003904:	2101      	movs	r1, #1
 8003906:	480c      	ldr	r0, [pc, #48]	; (8003938 <Authenticated_User+0x160>)
 8003908:	f7fd f850 	bl	80009ac <UART_Get_Rx_Byte>
			Print_Msg("User Name: ");
 800390c:	4814      	ldr	r0, [pc, #80]	; (8003960 <Authenticated_User+0x188>)
 800390e:	f7fd f803 	bl	8000918 <Print_Msg>
			sc_User_State = USER_NAME;
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <Authenticated_User+0x15c>)
 8003914:	2231      	movs	r2, #49	; 0x31
 8003916:	701a      	strb	r2, [r3, #0]
			i = 0;
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <Authenticated_User+0x168>)
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
			break;
 800391e:	e004      	b.n	800392a <Authenticated_User+0x152>
		default:
			sc_User_State = USER_UNKNOWN;
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <Authenticated_User+0x15c>)
 8003922:	2235      	movs	r2, #53	; 0x35
 8003924:	701a      	strb	r2, [r3, #0]
			break;
 8003926:	e000      	b.n	800392a <Authenticated_User+0x152>
		}
	}
 8003928:	bf00      	nop

	return sc_User_State;
 800392a:	4b02      	ldr	r3, [pc, #8]	; (8003934 <Authenticated_User+0x15c>)
 800392c:	781b      	ldrb	r3, [r3, #0]
}
 800392e:	4618      	mov	r0, r3
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000007 	.word	0x20000007
 8003938:	20000180 	.word	0x20000180
 800393c:	08005360 	.word	0x08005360
 8003940:	20000183 	.word	0x20000183
 8003944:	20000184 	.word	0x20000184
 8003948:	08005364 	.word	0x08005364
 800394c:	20000190 	.word	0x20000190
 8003950:	20000008 	.word	0x20000008
 8003954:	2000000c 	.word	0x2000000c
 8003958:	08005378 	.word	0x08005378
 800395c:	08005390 	.word	0x08005390
 8003960:	080053b4 	.word	0x080053b4

08003964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003964:	480d      	ldr	r0, [pc, #52]	; (800399c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003966:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003968:	f000 fae0 	bl	8003f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800396c:	480c      	ldr	r0, [pc, #48]	; (80039a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800396e:	490d      	ldr	r1, [pc, #52]	; (80039a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003970:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <LoopForever+0xe>)
  movs r3, #0
 8003972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003974:	e002      	b.n	800397c <LoopCopyDataInit>

08003976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397a:	3304      	adds	r3, #4

0800397c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800397c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003980:	d3f9      	bcc.n	8003976 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003984:	4c0a      	ldr	r4, [pc, #40]	; (80039b0 <LoopForever+0x16>)
  movs r3, #0
 8003986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003988:	e001      	b.n	800398e <LoopFillZerobss>

0800398a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800398c:	3204      	adds	r2, #4

0800398e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003990:	d3fb      	bcc.n	800398a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003992:	f000 fae3 	bl	8003f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003996:	f000 f80f 	bl	80039b8 <main>

0800399a <LoopForever>:

LoopForever:
  b LoopForever
 800399a:	e7fe      	b.n	800399a <LoopForever>
  ldr   r0, =_estack
 800399c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80039a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80039a8:	08005480 	.word	0x08005480
  ldr r2, =_sbss
 80039ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80039b0:	200001c0 	.word	0x200001c0

080039b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039b4:	e7fe      	b.n	80039b4 <ADC_IRQHandler>
	...

080039b8 <main>:
char tempValue[10] = {0};

extern char LED1_ON_FLAG;
extern char LED2_ON_FLAG;
int main(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	HAL_Init();
 80039bc:	f7fd f81a 	bl	80009f4 <HAL_Init>
	SystemClock_Config();
 80039c0:	f000 f868 	bl	8003a94 <SystemClock_Config>

	Timer_Init(TIM6);
 80039c4:	482b      	ldr	r0, [pc, #172]	; (8003a74 <main+0xbc>)
 80039c6:	f7fc ff29 	bl	800081c <Timer_Init>
	UART_Init();
 80039ca:	f7fc ff7b 	bl	80008c4 <UART_Init>
	I2C_Init();
 80039ce:	f7fc fee5 	bl	800079c <I2C_Init>

	GPIO_Init(GPIOG, GPIO_PIN_14);
 80039d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039d6:	4828      	ldr	r0, [pc, #160]	; (8003a78 <main+0xc0>)
 80039d8:	f7fc fdf4 	bl	80005c4 <GPIO_Init>
	GPIO_Init(GPIOG, GPIO_PIN_13);
 80039dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039e0:	4825      	ldr	r0, [pc, #148]	; (8003a78 <main+0xc0>)
 80039e2:	f7fc fdef 	bl	80005c4 <GPIO_Init>

	Timer_Start_IT();
 80039e6:	f7fc ff35 	bl	8000854 <Timer_Start_IT>
	UART_Interrupt_Start(&rx_Buffer);
 80039ea:	4824      	ldr	r0, [pc, #144]	; (8003a7c <main+0xc4>)
 80039ec:	f7fc ffce 	bl	800098c <UART_Interrupt_Start>

	/* Loop forever */
	for(;;)
	{

		if(SysTick_Get() > 0)
 80039f0:	f7fc ff4c 	bl	800088c <SysTick_Get>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0fa      	beq.n	80039f0 <main+0x38>
		{

			led1_Counter += SysTick_Get();
 80039fa:	f7fc ff47 	bl	800088c <SysTick_Get>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <main+0xc8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <main+0xc8>)
 8003a08:	6013      	str	r3, [r2, #0]
			led2_Counter += SysTick_Get();
 8003a0a:	f7fc ff3f 	bl	800088c <SysTick_Get>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <main+0xcc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4413      	add	r3, r2
 8003a16:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <main+0xcc>)
 8003a18:	6013      	str	r3, [r2, #0]
			sc_Counter += SysTick_Get();
 8003a1a:	f7fc ff37 	bl	800088c <SysTick_Get>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <main+0xd0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <main+0xd0>)
 8003a28:	6013      	str	r3, [r2, #0]
			SysTick_Set(0);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fc ff3a 	bl	80008a4 <SysTick_Set>
			if(LED1_ON_FLAG == 1)
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <main+0xd4>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d107      	bne.n	8003a48 <main+0x90>
			{
				LED1_ON_FLAG = 0;
 8003a38:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <main+0xd4>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
				GPIO_Pin_Toggle(GPIOG, GPIO_PIN_13);
 8003a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a42:	480d      	ldr	r0, [pc, #52]	; (8003a78 <main+0xc0>)
 8003a44:	f7fc fe9a 	bl	800077c <GPIO_Pin_Toggle>
			}

			if(LED2_ON_FLAG == 1)
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <main+0xd8>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <main+0xa8>
			{
				LED2_ON_FLAG = 0;
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <main+0xd8>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	701a      	strb	r2, [r3, #0]
				GPIO_Pin_Toggle(GPIOG, GPIO_PIN_14);
 8003a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a5a:	4807      	ldr	r0, [pc, #28]	; (8003a78 <main+0xc0>)
 8003a5c:	f7fc fe8e 	bl	800077c <GPIO_Pin_Toggle>
			}
			if(sc_Counter >= 10)
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <main+0xd0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b09      	cmp	r3, #9
 8003a66:	d9c3      	bls.n	80039f0 <main+0x38>
			{
				sc_Counter = 0;
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <main+0xd0>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
				SC_Process();
 8003a6e:	f7ff fd6d 	bl	800354c <SC_Process>
		if(SysTick_Get() > 0)
 8003a72:	e7bd      	b.n	80039f0 <main+0x38>
 8003a74:	40001000 	.word	0x40001000
 8003a78:	40021800 	.word	0x40021800
 8003a7c:	200001a8 	.word	0x200001a8
 8003a80:	2000019c 	.word	0x2000019c
 8003a84:	200001a0 	.word	0x200001a0
 8003a88:	200001a4 	.word	0x200001a4
 8003a8c:	20000181 	.word	0x20000181
 8003a90:	20000182 	.word	0x20000182

08003a94 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b094      	sub	sp, #80	; 0x50
 8003a98:	af00      	add	r7, sp, #0
	/*    Configure processor to run at full speed i.e 180Mhz */
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a9a:	f107 0320 	add.w	r3, r7, #32
 8003a9e:	2230      	movs	r2, #48	; 0x30
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fa7e 	bl	8003fa4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa8:	f107 030c 	add.w	r3, r7, #12
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <SystemClock_Config+0xd8>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	4a2a      	ldr	r2, [pc, #168]	; (8003b6c <SystemClock_Config+0xd8>)
 8003ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <SystemClock_Config+0xd8>)
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <SystemClock_Config+0xdc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <SystemClock_Config+0xdc>)
 8003ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <SystemClock_Config+0xdc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003afa:	2302      	movs	r3, #2
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b02:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003b04:	2304      	movs	r3, #4
 8003b06:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 8003b08:	2350      	movs	r3, #80	; 0x50
 8003b0a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b10:	2307      	movs	r3, #7
 8003b12:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b14:	f107 0320 	add.w	r3, r7, #32
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd fd63 	bl	80015e4 <HAL_RCC_OscConfig>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8003b24:	f000 f826 	bl	8003b74 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003b28:	f7fd fd0c 	bl	8001544 <HAL_PWREx_EnableOverDrive>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8003b32:	f000 f81f 	bl	8003b74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b36:	230f      	movs	r3, #15
 8003b38:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b46:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b4c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	2105      	movs	r1, #5
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fd ffbd 	bl	8001ad4 <HAL_RCC_ClockConfig>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8003b60:	f000 f808 	bl	8003b74 <Error_Handler>
	}
}
 8003b64:	bf00      	nop
 8003b66:	3750      	adds	r7, #80	; 0x50
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40007000 	.word	0x40007000

08003b74 <Error_Handler>:

void Error_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b78:	b672      	cpsid	i
}
 8003b7a:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003b7c:	e7fe      	b.n	8003b7c <Error_Handler+0x8>
	...

08003b80 <HAL_MspInit>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"


void HAL_MspInit(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_MspInit+0x70>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_MspInit+0x70>)
 8003b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b94:	6453      	str	r3, [r2, #68]	; 0x44
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <HAL_MspInit+0x70>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_MspInit+0x70>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a11      	ldr	r2, [pc, #68]	; (8003bf0 <HAL_MspInit+0x70>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_MspInit+0x70>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003bbe:	2007      	movs	r0, #7
 8003bc0:	f7fd f85a 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/

	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f06f 000b 	mvn.w	r0, #11
 8003bcc:	f7fd f85f 	bl	8000c8e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f06f 000a 	mvn.w	r0, #10
 8003bd8:	f7fd f859 	bl	8000c8e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2100      	movs	r1, #0
 8003be0:	f06f 0009 	mvn.w	r0, #9
 8003be4:	f7fd f853 	bl	8000c8e <HAL_NVIC_SetPriority>
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_TIM_Base_MspInit+0x3c>)
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <HAL_TIM_Base_MspInit+0x3c>)
 8003c06:	f043 0310 	orr.w	r3, r3, #16
 8003c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_TIM_Base_MspInit+0x3c>)
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c18:	2036      	movs	r0, #54	; 0x36
 8003c1a:	f7fd f854 	bl	8000cc6 <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	210f      	movs	r1, #15
 8003c22:	2036      	movs	r0, #54	; 0x36
 8003c24:	f7fd f833 	bl	8000c8e <HAL_NVIC_SetPriority>

}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800

08003c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
	if(huart->Instance==USART1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_UART_MspInit+0x94>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d134      	bne.n	8003cc0 <HAL_UART_MspInit+0x8c>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_UART_MspInit+0x98>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_UART_MspInit+0x98>)
 8003c60:	f043 0310 	orr.w	r3, r3, #16
 8003c64:	6453      	str	r3, [r2, #68]	; 0x44
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_UART_MspInit+0x98>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_UART_MspInit+0x98>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_UART_MspInit+0x98>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_UART_MspInit+0x98>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
		/**USART1 GPIO Configuration
    	PA9  ------> USART1_TX
    	PA10 ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c92:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ca0:	2307      	movs	r3, #7
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <HAL_UART_MspInit+0x9c>)
 8003cac:	f7fd f8c4 	bl	8000e38 <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	2025      	movs	r0, #37	; 0x25
 8003cb6:	f7fc ffea 	bl	8000c8e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cba:	2025      	movs	r0, #37	; 0x25
 8003cbc:	f7fd f803 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
	}

}
 8003cc0:	bf00      	nop
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40020000 	.word	0x40020000

08003cd4 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
	if(hi2c->Instance==I2C1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_I2C_MspInit+0x84>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d12b      	bne.n	8003d4e <HAL_I2C_MspInit+0x7a>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_I2C_MspInit+0x88>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
    	PB6------> I2C1_SCL
    	PB7------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d12:	23c0      	movs	r3, #192	; 0xc0
 8003d14:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d16:	2312      	movs	r3, #18
 8003d18:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d22:	2304      	movs	r3, #4
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	480c      	ldr	r0, [pc, #48]	; (8003d60 <HAL_I2C_MspInit+0x8c>)
 8003d2e:	f7fd f883 	bl	8000e38 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_I2C_MspInit+0x88>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
	}

}
 8003d4e:	bf00      	nop
 8003d50:	3728      	adds	r7, #40	; 0x28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40005400 	.word	0x40005400
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020400 	.word	0x40020400

08003d64 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003d68:	e7fe      	b.n	8003d68 <NMI_Handler+0x4>

08003d6a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8003d6e:	e7fe      	b.n	8003d6e <HardFault_Handler+0x4>

08003d70 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8003d74:	e7fe      	b.n	8003d74 <MemManage_Handler+0x4>

08003d76 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8003d7a:	e7fe      	b.n	8003d7a <BusFault_Handler+0x4>

08003d7c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8003d80:	e7fe      	b.n	8003d80 <UsageFault_Handler+0x4>

08003d82 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003d82:	b480      	push	{r7}
 8003d84:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003db0:	f7fc fe72 	bl	8000a98 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8003db4:	f7fc ffa1 	bl	8000cfa <HAL_SYSTICK_IRQHandler>
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <TIM6_DAC_IRQHandler>:

extern TIM_HandleTypeDef htim;
extern UART_HandleTypeDef huart1;

void TIM6_DAC_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim);
 8003dc0:	4802      	ldr	r0, [pc, #8]	; (8003dcc <TIM6_DAC_IRQHandler+0x10>)
 8003dc2:	f7fe f967 	bl	8002094 <HAL_TIM_IRQHandler>
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200000e8 	.word	0x200000e8

08003dd0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <USART1_IRQHandler+0x10>)
 8003dd6:	f7fe fc51 	bl	800267c <HAL_UART_IRQHandler>
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000134 	.word	0x20000134

08003de4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e00a      	b.n	8003e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003df6:	f3af 8000 	nop.w
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	60ba      	str	r2, [r7, #8]
 8003e02:	b2ca      	uxtb	r2, r1
 8003e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	dbf0      	blt.n	8003df6 <_read+0x12>
  }

  return len;
 8003e14:	687b      	ldr	r3, [r7, #4]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e009      	b.n	8003e44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	60ba      	str	r2, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3301      	adds	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	dbf1      	blt.n	8003e30 <_write+0x12>
  }
  return len;
 8003e4c:	687b      	ldr	r3, [r7, #4]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_close>:

int _close(int file)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e7e:	605a      	str	r2, [r3, #4]
  return 0;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <_isatty>:

int _isatty(int file)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e96:	2301      	movs	r3, #1
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec8:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <_sbrk+0x5c>)
 8003eca:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <_sbrk+0x60>)
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ed4:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <_sbrk+0x64>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d102      	bne.n	8003ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <_sbrk+0x64>)
 8003ede:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <_sbrk+0x68>)
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ee2:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <_sbrk+0x64>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d207      	bcs.n	8003f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ef0:	f000 f82e 	bl	8003f50 <__errno>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	220c      	movs	r2, #12
 8003ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003efe:	e009      	b.n	8003f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <_sbrk+0x64>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <_sbrk+0x64>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <_sbrk+0x64>)
 8003f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20030000 	.word	0x20030000
 8003f20:	00000400 	.word	0x00000400
 8003f24:	200001ac 	.word	0x200001ac
 8003f28:	200001c0 	.word	0x200001c0

08003f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <SystemInit+0x20>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <SystemInit+0x20>)
 8003f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <__errno>:
 8003f50:	4b01      	ldr	r3, [pc, #4]	; (8003f58 <__errno+0x8>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000014 	.word	0x20000014

08003f5c <__libc_init_array>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4d0d      	ldr	r5, [pc, #52]	; (8003f94 <__libc_init_array+0x38>)
 8003f60:	4c0d      	ldr	r4, [pc, #52]	; (8003f98 <__libc_init_array+0x3c>)
 8003f62:	1b64      	subs	r4, r4, r5
 8003f64:	10a4      	asrs	r4, r4, #2
 8003f66:	2600      	movs	r6, #0
 8003f68:	42a6      	cmp	r6, r4
 8003f6a:	d109      	bne.n	8003f80 <__libc_init_array+0x24>
 8003f6c:	4d0b      	ldr	r5, [pc, #44]	; (8003f9c <__libc_init_array+0x40>)
 8003f6e:	4c0c      	ldr	r4, [pc, #48]	; (8003fa0 <__libc_init_array+0x44>)
 8003f70:	f001 f88e 	bl	8005090 <_init>
 8003f74:	1b64      	subs	r4, r4, r5
 8003f76:	10a4      	asrs	r4, r4, #2
 8003f78:	2600      	movs	r6, #0
 8003f7a:	42a6      	cmp	r6, r4
 8003f7c:	d105      	bne.n	8003f8a <__libc_init_array+0x2e>
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f84:	4798      	blx	r3
 8003f86:	3601      	adds	r6, #1
 8003f88:	e7ee      	b.n	8003f68 <__libc_init_array+0xc>
 8003f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8e:	4798      	blx	r3
 8003f90:	3601      	adds	r6, #1
 8003f92:	e7f2      	b.n	8003f7a <__libc_init_array+0x1e>
 8003f94:	08005478 	.word	0x08005478
 8003f98:	08005478 	.word	0x08005478
 8003f9c:	08005478 	.word	0x08005478
 8003fa0:	0800547c 	.word	0x0800547c

08003fa4 <memset>:
 8003fa4:	4402      	add	r2, r0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d100      	bne.n	8003fae <memset+0xa>
 8003fac:	4770      	bx	lr
 8003fae:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb2:	e7f9      	b.n	8003fa8 <memset+0x4>

08003fb4 <_puts_r>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	460e      	mov	r6, r1
 8003fb8:	4605      	mov	r5, r0
 8003fba:	b118      	cbz	r0, 8003fc4 <_puts_r+0x10>
 8003fbc:	6983      	ldr	r3, [r0, #24]
 8003fbe:	b90b      	cbnz	r3, 8003fc4 <_puts_r+0x10>
 8003fc0:	f000 fa68 	bl	8004494 <__sinit>
 8003fc4:	69ab      	ldr	r3, [r5, #24]
 8003fc6:	68ac      	ldr	r4, [r5, #8]
 8003fc8:	b913      	cbnz	r3, 8003fd0 <_puts_r+0x1c>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 fa62 	bl	8004494 <__sinit>
 8003fd0:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <_puts_r+0xd0>)
 8003fd2:	429c      	cmp	r4, r3
 8003fd4:	d120      	bne.n	8004018 <_puts_r+0x64>
 8003fd6:	686c      	ldr	r4, [r5, #4]
 8003fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fda:	07db      	lsls	r3, r3, #31
 8003fdc:	d405      	bmi.n	8003fea <_puts_r+0x36>
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	0598      	lsls	r0, r3, #22
 8003fe2:	d402      	bmi.n	8003fea <_puts_r+0x36>
 8003fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe6:	f000 faf3 	bl	80045d0 <__retarget_lock_acquire_recursive>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	0719      	lsls	r1, r3, #28
 8003fee:	d51d      	bpl.n	800402c <_puts_r+0x78>
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	b1db      	cbz	r3, 800402c <_puts_r+0x78>
 8003ff4:	3e01      	subs	r6, #1
 8003ff6:	68a3      	ldr	r3, [r4, #8]
 8003ff8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	bb39      	cbnz	r1, 8004052 <_puts_r+0x9e>
 8004002:	2b00      	cmp	r3, #0
 8004004:	da38      	bge.n	8004078 <_puts_r+0xc4>
 8004006:	4622      	mov	r2, r4
 8004008:	210a      	movs	r1, #10
 800400a:	4628      	mov	r0, r5
 800400c:	f000 f868 	bl	80040e0 <__swbuf_r>
 8004010:	3001      	adds	r0, #1
 8004012:	d011      	beq.n	8004038 <_puts_r+0x84>
 8004014:	250a      	movs	r5, #10
 8004016:	e011      	b.n	800403c <_puts_r+0x88>
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <_puts_r+0xd4>)
 800401a:	429c      	cmp	r4, r3
 800401c:	d101      	bne.n	8004022 <_puts_r+0x6e>
 800401e:	68ac      	ldr	r4, [r5, #8]
 8004020:	e7da      	b.n	8003fd8 <_puts_r+0x24>
 8004022:	4b1a      	ldr	r3, [pc, #104]	; (800408c <_puts_r+0xd8>)
 8004024:	429c      	cmp	r4, r3
 8004026:	bf08      	it	eq
 8004028:	68ec      	ldreq	r4, [r5, #12]
 800402a:	e7d5      	b.n	8003fd8 <_puts_r+0x24>
 800402c:	4621      	mov	r1, r4
 800402e:	4628      	mov	r0, r5
 8004030:	f000 f8a8 	bl	8004184 <__swsetup_r>
 8004034:	2800      	cmp	r0, #0
 8004036:	d0dd      	beq.n	8003ff4 <_puts_r+0x40>
 8004038:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800403c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800403e:	07da      	lsls	r2, r3, #31
 8004040:	d405      	bmi.n	800404e <_puts_r+0x9a>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	059b      	lsls	r3, r3, #22
 8004046:	d402      	bmi.n	800404e <_puts_r+0x9a>
 8004048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800404a:	f000 fac2 	bl	80045d2 <__retarget_lock_release_recursive>
 800404e:	4628      	mov	r0, r5
 8004050:	bd70      	pop	{r4, r5, r6, pc}
 8004052:	2b00      	cmp	r3, #0
 8004054:	da04      	bge.n	8004060 <_puts_r+0xac>
 8004056:	69a2      	ldr	r2, [r4, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	dc06      	bgt.n	800406a <_puts_r+0xb6>
 800405c:	290a      	cmp	r1, #10
 800405e:	d004      	beq.n	800406a <_puts_r+0xb6>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	6022      	str	r2, [r4, #0]
 8004066:	7019      	strb	r1, [r3, #0]
 8004068:	e7c5      	b.n	8003ff6 <_puts_r+0x42>
 800406a:	4622      	mov	r2, r4
 800406c:	4628      	mov	r0, r5
 800406e:	f000 f837 	bl	80040e0 <__swbuf_r>
 8004072:	3001      	adds	r0, #1
 8004074:	d1bf      	bne.n	8003ff6 <_puts_r+0x42>
 8004076:	e7df      	b.n	8004038 <_puts_r+0x84>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	250a      	movs	r5, #10
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	6022      	str	r2, [r4, #0]
 8004080:	701d      	strb	r5, [r3, #0]
 8004082:	e7db      	b.n	800403c <_puts_r+0x88>
 8004084:	080053fc 	.word	0x080053fc
 8004088:	0800541c 	.word	0x0800541c
 800408c:	080053dc 	.word	0x080053dc

08004090 <puts>:
 8004090:	4b02      	ldr	r3, [pc, #8]	; (800409c <puts+0xc>)
 8004092:	4601      	mov	r1, r0
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	f7ff bf8d 	b.w	8003fb4 <_puts_r>
 800409a:	bf00      	nop
 800409c:	20000014 	.word	0x20000014

080040a0 <_vsiprintf_r>:
 80040a0:	b500      	push	{lr}
 80040a2:	b09b      	sub	sp, #108	; 0x6c
 80040a4:	9100      	str	r1, [sp, #0]
 80040a6:	9104      	str	r1, [sp, #16]
 80040a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040ac:	9105      	str	r1, [sp, #20]
 80040ae:	9102      	str	r1, [sp, #8]
 80040b0:	4905      	ldr	r1, [pc, #20]	; (80040c8 <_vsiprintf_r+0x28>)
 80040b2:	9103      	str	r1, [sp, #12]
 80040b4:	4669      	mov	r1, sp
 80040b6:	f000 fc2f 	bl	8004918 <_svfiprintf_r>
 80040ba:	9b00      	ldr	r3, [sp, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	b01b      	add	sp, #108	; 0x6c
 80040c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80040c6:	bf00      	nop
 80040c8:	ffff0208 	.word	0xffff0208

080040cc <vsiprintf>:
 80040cc:	4613      	mov	r3, r2
 80040ce:	460a      	mov	r2, r1
 80040d0:	4601      	mov	r1, r0
 80040d2:	4802      	ldr	r0, [pc, #8]	; (80040dc <vsiprintf+0x10>)
 80040d4:	6800      	ldr	r0, [r0, #0]
 80040d6:	f7ff bfe3 	b.w	80040a0 <_vsiprintf_r>
 80040da:	bf00      	nop
 80040dc:	20000014 	.word	0x20000014

080040e0 <__swbuf_r>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	460e      	mov	r6, r1
 80040e4:	4614      	mov	r4, r2
 80040e6:	4605      	mov	r5, r0
 80040e8:	b118      	cbz	r0, 80040f2 <__swbuf_r+0x12>
 80040ea:	6983      	ldr	r3, [r0, #24]
 80040ec:	b90b      	cbnz	r3, 80040f2 <__swbuf_r+0x12>
 80040ee:	f000 f9d1 	bl	8004494 <__sinit>
 80040f2:	4b21      	ldr	r3, [pc, #132]	; (8004178 <__swbuf_r+0x98>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	d12b      	bne.n	8004150 <__swbuf_r+0x70>
 80040f8:	686c      	ldr	r4, [r5, #4]
 80040fa:	69a3      	ldr	r3, [r4, #24]
 80040fc:	60a3      	str	r3, [r4, #8]
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	071a      	lsls	r2, r3, #28
 8004102:	d52f      	bpl.n	8004164 <__swbuf_r+0x84>
 8004104:	6923      	ldr	r3, [r4, #16]
 8004106:	b36b      	cbz	r3, 8004164 <__swbuf_r+0x84>
 8004108:	6923      	ldr	r3, [r4, #16]
 800410a:	6820      	ldr	r0, [r4, #0]
 800410c:	1ac0      	subs	r0, r0, r3
 800410e:	6963      	ldr	r3, [r4, #20]
 8004110:	b2f6      	uxtb	r6, r6
 8004112:	4283      	cmp	r3, r0
 8004114:	4637      	mov	r7, r6
 8004116:	dc04      	bgt.n	8004122 <__swbuf_r+0x42>
 8004118:	4621      	mov	r1, r4
 800411a:	4628      	mov	r0, r5
 800411c:	f000 f926 	bl	800436c <_fflush_r>
 8004120:	bb30      	cbnz	r0, 8004170 <__swbuf_r+0x90>
 8004122:	68a3      	ldr	r3, [r4, #8]
 8004124:	3b01      	subs	r3, #1
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	6022      	str	r2, [r4, #0]
 800412e:	701e      	strb	r6, [r3, #0]
 8004130:	6963      	ldr	r3, [r4, #20]
 8004132:	3001      	adds	r0, #1
 8004134:	4283      	cmp	r3, r0
 8004136:	d004      	beq.n	8004142 <__swbuf_r+0x62>
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	07db      	lsls	r3, r3, #31
 800413c:	d506      	bpl.n	800414c <__swbuf_r+0x6c>
 800413e:	2e0a      	cmp	r6, #10
 8004140:	d104      	bne.n	800414c <__swbuf_r+0x6c>
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f000 f911 	bl	800436c <_fflush_r>
 800414a:	b988      	cbnz	r0, 8004170 <__swbuf_r+0x90>
 800414c:	4638      	mov	r0, r7
 800414e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <__swbuf_r+0x9c>)
 8004152:	429c      	cmp	r4, r3
 8004154:	d101      	bne.n	800415a <__swbuf_r+0x7a>
 8004156:	68ac      	ldr	r4, [r5, #8]
 8004158:	e7cf      	b.n	80040fa <__swbuf_r+0x1a>
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <__swbuf_r+0xa0>)
 800415c:	429c      	cmp	r4, r3
 800415e:	bf08      	it	eq
 8004160:	68ec      	ldreq	r4, [r5, #12]
 8004162:	e7ca      	b.n	80040fa <__swbuf_r+0x1a>
 8004164:	4621      	mov	r1, r4
 8004166:	4628      	mov	r0, r5
 8004168:	f000 f80c 	bl	8004184 <__swsetup_r>
 800416c:	2800      	cmp	r0, #0
 800416e:	d0cb      	beq.n	8004108 <__swbuf_r+0x28>
 8004170:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004174:	e7ea      	b.n	800414c <__swbuf_r+0x6c>
 8004176:	bf00      	nop
 8004178:	080053fc 	.word	0x080053fc
 800417c:	0800541c 	.word	0x0800541c
 8004180:	080053dc 	.word	0x080053dc

08004184 <__swsetup_r>:
 8004184:	4b32      	ldr	r3, [pc, #200]	; (8004250 <__swsetup_r+0xcc>)
 8004186:	b570      	push	{r4, r5, r6, lr}
 8004188:	681d      	ldr	r5, [r3, #0]
 800418a:	4606      	mov	r6, r0
 800418c:	460c      	mov	r4, r1
 800418e:	b125      	cbz	r5, 800419a <__swsetup_r+0x16>
 8004190:	69ab      	ldr	r3, [r5, #24]
 8004192:	b913      	cbnz	r3, 800419a <__swsetup_r+0x16>
 8004194:	4628      	mov	r0, r5
 8004196:	f000 f97d 	bl	8004494 <__sinit>
 800419a:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <__swsetup_r+0xd0>)
 800419c:	429c      	cmp	r4, r3
 800419e:	d10f      	bne.n	80041c0 <__swsetup_r+0x3c>
 80041a0:	686c      	ldr	r4, [r5, #4]
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041a8:	0719      	lsls	r1, r3, #28
 80041aa:	d42c      	bmi.n	8004206 <__swsetup_r+0x82>
 80041ac:	06dd      	lsls	r5, r3, #27
 80041ae:	d411      	bmi.n	80041d4 <__swsetup_r+0x50>
 80041b0:	2309      	movs	r3, #9
 80041b2:	6033      	str	r3, [r6, #0]
 80041b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041be:	e03e      	b.n	800423e <__swsetup_r+0xba>
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <__swsetup_r+0xd4>)
 80041c2:	429c      	cmp	r4, r3
 80041c4:	d101      	bne.n	80041ca <__swsetup_r+0x46>
 80041c6:	68ac      	ldr	r4, [r5, #8]
 80041c8:	e7eb      	b.n	80041a2 <__swsetup_r+0x1e>
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <__swsetup_r+0xd8>)
 80041cc:	429c      	cmp	r4, r3
 80041ce:	bf08      	it	eq
 80041d0:	68ec      	ldreq	r4, [r5, #12]
 80041d2:	e7e6      	b.n	80041a2 <__swsetup_r+0x1e>
 80041d4:	0758      	lsls	r0, r3, #29
 80041d6:	d512      	bpl.n	80041fe <__swsetup_r+0x7a>
 80041d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041da:	b141      	cbz	r1, 80041ee <__swsetup_r+0x6a>
 80041dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041e0:	4299      	cmp	r1, r3
 80041e2:	d002      	beq.n	80041ea <__swsetup_r+0x66>
 80041e4:	4630      	mov	r0, r6
 80041e6:	f000 fa5b 	bl	80046a0 <_free_r>
 80041ea:	2300      	movs	r3, #0
 80041ec:	6363      	str	r3, [r4, #52]	; 0x34
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041f4:	81a3      	strh	r3, [r4, #12]
 80041f6:	2300      	movs	r3, #0
 80041f8:	6063      	str	r3, [r4, #4]
 80041fa:	6923      	ldr	r3, [r4, #16]
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	f043 0308 	orr.w	r3, r3, #8
 8004204:	81a3      	strh	r3, [r4, #12]
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	b94b      	cbnz	r3, 800421e <__swsetup_r+0x9a>
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004214:	d003      	beq.n	800421e <__swsetup_r+0x9a>
 8004216:	4621      	mov	r1, r4
 8004218:	4630      	mov	r0, r6
 800421a:	f000 fa01 	bl	8004620 <__smakebuf_r>
 800421e:	89a0      	ldrh	r0, [r4, #12]
 8004220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004224:	f010 0301 	ands.w	r3, r0, #1
 8004228:	d00a      	beq.n	8004240 <__swsetup_r+0xbc>
 800422a:	2300      	movs	r3, #0
 800422c:	60a3      	str	r3, [r4, #8]
 800422e:	6963      	ldr	r3, [r4, #20]
 8004230:	425b      	negs	r3, r3
 8004232:	61a3      	str	r3, [r4, #24]
 8004234:	6923      	ldr	r3, [r4, #16]
 8004236:	b943      	cbnz	r3, 800424a <__swsetup_r+0xc6>
 8004238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800423c:	d1ba      	bne.n	80041b4 <__swsetup_r+0x30>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	0781      	lsls	r1, r0, #30
 8004242:	bf58      	it	pl
 8004244:	6963      	ldrpl	r3, [r4, #20]
 8004246:	60a3      	str	r3, [r4, #8]
 8004248:	e7f4      	b.n	8004234 <__swsetup_r+0xb0>
 800424a:	2000      	movs	r0, #0
 800424c:	e7f7      	b.n	800423e <__swsetup_r+0xba>
 800424e:	bf00      	nop
 8004250:	20000014 	.word	0x20000014
 8004254:	080053fc 	.word	0x080053fc
 8004258:	0800541c 	.word	0x0800541c
 800425c:	080053dc 	.word	0x080053dc

08004260 <__sflush_r>:
 8004260:	898a      	ldrh	r2, [r1, #12]
 8004262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004266:	4605      	mov	r5, r0
 8004268:	0710      	lsls	r0, r2, #28
 800426a:	460c      	mov	r4, r1
 800426c:	d458      	bmi.n	8004320 <__sflush_r+0xc0>
 800426e:	684b      	ldr	r3, [r1, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	dc05      	bgt.n	8004280 <__sflush_r+0x20>
 8004274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	dc02      	bgt.n	8004280 <__sflush_r+0x20>
 800427a:	2000      	movs	r0, #0
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004282:	2e00      	cmp	r6, #0
 8004284:	d0f9      	beq.n	800427a <__sflush_r+0x1a>
 8004286:	2300      	movs	r3, #0
 8004288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800428c:	682f      	ldr	r7, [r5, #0]
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	d032      	beq.n	80042f8 <__sflush_r+0x98>
 8004292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	075a      	lsls	r2, r3, #29
 8004298:	d505      	bpl.n	80042a6 <__sflush_r+0x46>
 800429a:	6863      	ldr	r3, [r4, #4]
 800429c:	1ac0      	subs	r0, r0, r3
 800429e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042a0:	b10b      	cbz	r3, 80042a6 <__sflush_r+0x46>
 80042a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a4:	1ac0      	subs	r0, r0, r3
 80042a6:	2300      	movs	r3, #0
 80042a8:	4602      	mov	r2, r0
 80042aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ac:	6a21      	ldr	r1, [r4, #32]
 80042ae:	4628      	mov	r0, r5
 80042b0:	47b0      	blx	r6
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	d106      	bne.n	80042c6 <__sflush_r+0x66>
 80042b8:	6829      	ldr	r1, [r5, #0]
 80042ba:	291d      	cmp	r1, #29
 80042bc:	d82c      	bhi.n	8004318 <__sflush_r+0xb8>
 80042be:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <__sflush_r+0x108>)
 80042c0:	40ca      	lsrs	r2, r1
 80042c2:	07d6      	lsls	r6, r2, #31
 80042c4:	d528      	bpl.n	8004318 <__sflush_r+0xb8>
 80042c6:	2200      	movs	r2, #0
 80042c8:	6062      	str	r2, [r4, #4]
 80042ca:	04d9      	lsls	r1, r3, #19
 80042cc:	6922      	ldr	r2, [r4, #16]
 80042ce:	6022      	str	r2, [r4, #0]
 80042d0:	d504      	bpl.n	80042dc <__sflush_r+0x7c>
 80042d2:	1c42      	adds	r2, r0, #1
 80042d4:	d101      	bne.n	80042da <__sflush_r+0x7a>
 80042d6:	682b      	ldr	r3, [r5, #0]
 80042d8:	b903      	cbnz	r3, 80042dc <__sflush_r+0x7c>
 80042da:	6560      	str	r0, [r4, #84]	; 0x54
 80042dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042de:	602f      	str	r7, [r5, #0]
 80042e0:	2900      	cmp	r1, #0
 80042e2:	d0ca      	beq.n	800427a <__sflush_r+0x1a>
 80042e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042e8:	4299      	cmp	r1, r3
 80042ea:	d002      	beq.n	80042f2 <__sflush_r+0x92>
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 f9d7 	bl	80046a0 <_free_r>
 80042f2:	2000      	movs	r0, #0
 80042f4:	6360      	str	r0, [r4, #52]	; 0x34
 80042f6:	e7c1      	b.n	800427c <__sflush_r+0x1c>
 80042f8:	6a21      	ldr	r1, [r4, #32]
 80042fa:	2301      	movs	r3, #1
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b0      	blx	r6
 8004300:	1c41      	adds	r1, r0, #1
 8004302:	d1c7      	bne.n	8004294 <__sflush_r+0x34>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0c4      	beq.n	8004294 <__sflush_r+0x34>
 800430a:	2b1d      	cmp	r3, #29
 800430c:	d001      	beq.n	8004312 <__sflush_r+0xb2>
 800430e:	2b16      	cmp	r3, #22
 8004310:	d101      	bne.n	8004316 <__sflush_r+0xb6>
 8004312:	602f      	str	r7, [r5, #0]
 8004314:	e7b1      	b.n	800427a <__sflush_r+0x1a>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	e7ad      	b.n	800427c <__sflush_r+0x1c>
 8004320:	690f      	ldr	r7, [r1, #16]
 8004322:	2f00      	cmp	r7, #0
 8004324:	d0a9      	beq.n	800427a <__sflush_r+0x1a>
 8004326:	0793      	lsls	r3, r2, #30
 8004328:	680e      	ldr	r6, [r1, #0]
 800432a:	bf08      	it	eq
 800432c:	694b      	ldreq	r3, [r1, #20]
 800432e:	600f      	str	r7, [r1, #0]
 8004330:	bf18      	it	ne
 8004332:	2300      	movne	r3, #0
 8004334:	eba6 0807 	sub.w	r8, r6, r7
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	f1b8 0f00 	cmp.w	r8, #0
 800433e:	dd9c      	ble.n	800427a <__sflush_r+0x1a>
 8004340:	6a21      	ldr	r1, [r4, #32]
 8004342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004344:	4643      	mov	r3, r8
 8004346:	463a      	mov	r2, r7
 8004348:	4628      	mov	r0, r5
 800434a:	47b0      	blx	r6
 800434c:	2800      	cmp	r0, #0
 800434e:	dc06      	bgt.n	800435e <__sflush_r+0xfe>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	e78e      	b.n	800427c <__sflush_r+0x1c>
 800435e:	4407      	add	r7, r0
 8004360:	eba8 0800 	sub.w	r8, r8, r0
 8004364:	e7e9      	b.n	800433a <__sflush_r+0xda>
 8004366:	bf00      	nop
 8004368:	20400001 	.word	0x20400001

0800436c <_fflush_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	4605      	mov	r5, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b913      	cbnz	r3, 800437c <_fflush_r+0x10>
 8004376:	2500      	movs	r5, #0
 8004378:	4628      	mov	r0, r5
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	b118      	cbz	r0, 8004386 <_fflush_r+0x1a>
 800437e:	6983      	ldr	r3, [r0, #24]
 8004380:	b90b      	cbnz	r3, 8004386 <_fflush_r+0x1a>
 8004382:	f000 f887 	bl	8004494 <__sinit>
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <_fflush_r+0x6c>)
 8004388:	429c      	cmp	r4, r3
 800438a:	d11b      	bne.n	80043c4 <_fflush_r+0x58>
 800438c:	686c      	ldr	r4, [r5, #4]
 800438e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ef      	beq.n	8004376 <_fflush_r+0xa>
 8004396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004398:	07d0      	lsls	r0, r2, #31
 800439a:	d404      	bmi.n	80043a6 <_fflush_r+0x3a>
 800439c:	0599      	lsls	r1, r3, #22
 800439e:	d402      	bmi.n	80043a6 <_fflush_r+0x3a>
 80043a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043a2:	f000 f915 	bl	80045d0 <__retarget_lock_acquire_recursive>
 80043a6:	4628      	mov	r0, r5
 80043a8:	4621      	mov	r1, r4
 80043aa:	f7ff ff59 	bl	8004260 <__sflush_r>
 80043ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043b0:	07da      	lsls	r2, r3, #31
 80043b2:	4605      	mov	r5, r0
 80043b4:	d4e0      	bmi.n	8004378 <_fflush_r+0xc>
 80043b6:	89a3      	ldrh	r3, [r4, #12]
 80043b8:	059b      	lsls	r3, r3, #22
 80043ba:	d4dd      	bmi.n	8004378 <_fflush_r+0xc>
 80043bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043be:	f000 f908 	bl	80045d2 <__retarget_lock_release_recursive>
 80043c2:	e7d9      	b.n	8004378 <_fflush_r+0xc>
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <_fflush_r+0x70>)
 80043c6:	429c      	cmp	r4, r3
 80043c8:	d101      	bne.n	80043ce <_fflush_r+0x62>
 80043ca:	68ac      	ldr	r4, [r5, #8]
 80043cc:	e7df      	b.n	800438e <_fflush_r+0x22>
 80043ce:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <_fflush_r+0x74>)
 80043d0:	429c      	cmp	r4, r3
 80043d2:	bf08      	it	eq
 80043d4:	68ec      	ldreq	r4, [r5, #12]
 80043d6:	e7da      	b.n	800438e <_fflush_r+0x22>
 80043d8:	080053fc 	.word	0x080053fc
 80043dc:	0800541c 	.word	0x0800541c
 80043e0:	080053dc 	.word	0x080053dc

080043e4 <std>:
 80043e4:	2300      	movs	r3, #0
 80043e6:	b510      	push	{r4, lr}
 80043e8:	4604      	mov	r4, r0
 80043ea:	e9c0 3300 	strd	r3, r3, [r0]
 80043ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043f2:	6083      	str	r3, [r0, #8]
 80043f4:	8181      	strh	r1, [r0, #12]
 80043f6:	6643      	str	r3, [r0, #100]	; 0x64
 80043f8:	81c2      	strh	r2, [r0, #14]
 80043fa:	6183      	str	r3, [r0, #24]
 80043fc:	4619      	mov	r1, r3
 80043fe:	2208      	movs	r2, #8
 8004400:	305c      	adds	r0, #92	; 0x5c
 8004402:	f7ff fdcf 	bl	8003fa4 <memset>
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <std+0x38>)
 8004408:	6263      	str	r3, [r4, #36]	; 0x24
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <std+0x3c>)
 800440c:	62a3      	str	r3, [r4, #40]	; 0x28
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <std+0x40>)
 8004410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <std+0x44>)
 8004414:	6224      	str	r4, [r4, #32]
 8004416:	6323      	str	r3, [r4, #48]	; 0x30
 8004418:	bd10      	pop	{r4, pc}
 800441a:	bf00      	nop
 800441c:	08004e61 	.word	0x08004e61
 8004420:	08004e83 	.word	0x08004e83
 8004424:	08004ebb 	.word	0x08004ebb
 8004428:	08004edf 	.word	0x08004edf

0800442c <_cleanup_r>:
 800442c:	4901      	ldr	r1, [pc, #4]	; (8004434 <_cleanup_r+0x8>)
 800442e:	f000 b8af 	b.w	8004590 <_fwalk_reent>
 8004432:	bf00      	nop
 8004434:	0800436d 	.word	0x0800436d

08004438 <__sfmoreglue>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	2268      	movs	r2, #104	; 0x68
 800443c:	1e4d      	subs	r5, r1, #1
 800443e:	4355      	muls	r5, r2
 8004440:	460e      	mov	r6, r1
 8004442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004446:	f000 f997 	bl	8004778 <_malloc_r>
 800444a:	4604      	mov	r4, r0
 800444c:	b140      	cbz	r0, 8004460 <__sfmoreglue+0x28>
 800444e:	2100      	movs	r1, #0
 8004450:	e9c0 1600 	strd	r1, r6, [r0]
 8004454:	300c      	adds	r0, #12
 8004456:	60a0      	str	r0, [r4, #8]
 8004458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800445c:	f7ff fda2 	bl	8003fa4 <memset>
 8004460:	4620      	mov	r0, r4
 8004462:	bd70      	pop	{r4, r5, r6, pc}

08004464 <__sfp_lock_acquire>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__sfp_lock_acquire+0x8>)
 8004466:	f000 b8b3 	b.w	80045d0 <__retarget_lock_acquire_recursive>
 800446a:	bf00      	nop
 800446c:	200001b1 	.word	0x200001b1

08004470 <__sfp_lock_release>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__sfp_lock_release+0x8>)
 8004472:	f000 b8ae 	b.w	80045d2 <__retarget_lock_release_recursive>
 8004476:	bf00      	nop
 8004478:	200001b1 	.word	0x200001b1

0800447c <__sinit_lock_acquire>:
 800447c:	4801      	ldr	r0, [pc, #4]	; (8004484 <__sinit_lock_acquire+0x8>)
 800447e:	f000 b8a7 	b.w	80045d0 <__retarget_lock_acquire_recursive>
 8004482:	bf00      	nop
 8004484:	200001b2 	.word	0x200001b2

08004488 <__sinit_lock_release>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__sinit_lock_release+0x8>)
 800448a:	f000 b8a2 	b.w	80045d2 <__retarget_lock_release_recursive>
 800448e:	bf00      	nop
 8004490:	200001b2 	.word	0x200001b2

08004494 <__sinit>:
 8004494:	b510      	push	{r4, lr}
 8004496:	4604      	mov	r4, r0
 8004498:	f7ff fff0 	bl	800447c <__sinit_lock_acquire>
 800449c:	69a3      	ldr	r3, [r4, #24]
 800449e:	b11b      	cbz	r3, 80044a8 <__sinit+0x14>
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a4:	f7ff bff0 	b.w	8004488 <__sinit_lock_release>
 80044a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044ac:	6523      	str	r3, [r4, #80]	; 0x50
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <__sinit+0x68>)
 80044b0:	4a13      	ldr	r2, [pc, #76]	; (8004500 <__sinit+0x6c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80044b6:	42a3      	cmp	r3, r4
 80044b8:	bf04      	itt	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	61a3      	streq	r3, [r4, #24]
 80044be:	4620      	mov	r0, r4
 80044c0:	f000 f820 	bl	8004504 <__sfp>
 80044c4:	6060      	str	r0, [r4, #4]
 80044c6:	4620      	mov	r0, r4
 80044c8:	f000 f81c 	bl	8004504 <__sfp>
 80044cc:	60a0      	str	r0, [r4, #8]
 80044ce:	4620      	mov	r0, r4
 80044d0:	f000 f818 	bl	8004504 <__sfp>
 80044d4:	2200      	movs	r2, #0
 80044d6:	60e0      	str	r0, [r4, #12]
 80044d8:	2104      	movs	r1, #4
 80044da:	6860      	ldr	r0, [r4, #4]
 80044dc:	f7ff ff82 	bl	80043e4 <std>
 80044e0:	68a0      	ldr	r0, [r4, #8]
 80044e2:	2201      	movs	r2, #1
 80044e4:	2109      	movs	r1, #9
 80044e6:	f7ff ff7d 	bl	80043e4 <std>
 80044ea:	68e0      	ldr	r0, [r4, #12]
 80044ec:	2202      	movs	r2, #2
 80044ee:	2112      	movs	r1, #18
 80044f0:	f7ff ff78 	bl	80043e4 <std>
 80044f4:	2301      	movs	r3, #1
 80044f6:	61a3      	str	r3, [r4, #24]
 80044f8:	e7d2      	b.n	80044a0 <__sinit+0xc>
 80044fa:	bf00      	nop
 80044fc:	080053d8 	.word	0x080053d8
 8004500:	0800442d 	.word	0x0800442d

08004504 <__sfp>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	4607      	mov	r7, r0
 8004508:	f7ff ffac 	bl	8004464 <__sfp_lock_acquire>
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <__sfp+0x84>)
 800450e:	681e      	ldr	r6, [r3, #0]
 8004510:	69b3      	ldr	r3, [r6, #24]
 8004512:	b913      	cbnz	r3, 800451a <__sfp+0x16>
 8004514:	4630      	mov	r0, r6
 8004516:	f7ff ffbd 	bl	8004494 <__sinit>
 800451a:	3648      	adds	r6, #72	; 0x48
 800451c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004520:	3b01      	subs	r3, #1
 8004522:	d503      	bpl.n	800452c <__sfp+0x28>
 8004524:	6833      	ldr	r3, [r6, #0]
 8004526:	b30b      	cbz	r3, 800456c <__sfp+0x68>
 8004528:	6836      	ldr	r6, [r6, #0]
 800452a:	e7f7      	b.n	800451c <__sfp+0x18>
 800452c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004530:	b9d5      	cbnz	r5, 8004568 <__sfp+0x64>
 8004532:	4b16      	ldr	r3, [pc, #88]	; (800458c <__sfp+0x88>)
 8004534:	60e3      	str	r3, [r4, #12]
 8004536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800453a:	6665      	str	r5, [r4, #100]	; 0x64
 800453c:	f000 f847 	bl	80045ce <__retarget_lock_init_recursive>
 8004540:	f7ff ff96 	bl	8004470 <__sfp_lock_release>
 8004544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800454c:	6025      	str	r5, [r4, #0]
 800454e:	61a5      	str	r5, [r4, #24]
 8004550:	2208      	movs	r2, #8
 8004552:	4629      	mov	r1, r5
 8004554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004558:	f7ff fd24 	bl	8003fa4 <memset>
 800455c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004564:	4620      	mov	r0, r4
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004568:	3468      	adds	r4, #104	; 0x68
 800456a:	e7d9      	b.n	8004520 <__sfp+0x1c>
 800456c:	2104      	movs	r1, #4
 800456e:	4638      	mov	r0, r7
 8004570:	f7ff ff62 	bl	8004438 <__sfmoreglue>
 8004574:	4604      	mov	r4, r0
 8004576:	6030      	str	r0, [r6, #0]
 8004578:	2800      	cmp	r0, #0
 800457a:	d1d5      	bne.n	8004528 <__sfp+0x24>
 800457c:	f7ff ff78 	bl	8004470 <__sfp_lock_release>
 8004580:	230c      	movs	r3, #12
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	e7ee      	b.n	8004564 <__sfp+0x60>
 8004586:	bf00      	nop
 8004588:	080053d8 	.word	0x080053d8
 800458c:	ffff0001 	.word	0xffff0001

08004590 <_fwalk_reent>:
 8004590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004594:	4606      	mov	r6, r0
 8004596:	4688      	mov	r8, r1
 8004598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800459c:	2700      	movs	r7, #0
 800459e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045a2:	f1b9 0901 	subs.w	r9, r9, #1
 80045a6:	d505      	bpl.n	80045b4 <_fwalk_reent+0x24>
 80045a8:	6824      	ldr	r4, [r4, #0]
 80045aa:	2c00      	cmp	r4, #0
 80045ac:	d1f7      	bne.n	800459e <_fwalk_reent+0xe>
 80045ae:	4638      	mov	r0, r7
 80045b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b4:	89ab      	ldrh	r3, [r5, #12]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d907      	bls.n	80045ca <_fwalk_reent+0x3a>
 80045ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045be:	3301      	adds	r3, #1
 80045c0:	d003      	beq.n	80045ca <_fwalk_reent+0x3a>
 80045c2:	4629      	mov	r1, r5
 80045c4:	4630      	mov	r0, r6
 80045c6:	47c0      	blx	r8
 80045c8:	4307      	orrs	r7, r0
 80045ca:	3568      	adds	r5, #104	; 0x68
 80045cc:	e7e9      	b.n	80045a2 <_fwalk_reent+0x12>

080045ce <__retarget_lock_init_recursive>:
 80045ce:	4770      	bx	lr

080045d0 <__retarget_lock_acquire_recursive>:
 80045d0:	4770      	bx	lr

080045d2 <__retarget_lock_release_recursive>:
 80045d2:	4770      	bx	lr

080045d4 <__swhatbuf_r>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	460e      	mov	r6, r1
 80045d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045dc:	2900      	cmp	r1, #0
 80045de:	b096      	sub	sp, #88	; 0x58
 80045e0:	4614      	mov	r4, r2
 80045e2:	461d      	mov	r5, r3
 80045e4:	da08      	bge.n	80045f8 <__swhatbuf_r+0x24>
 80045e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	602a      	str	r2, [r5, #0]
 80045ee:	061a      	lsls	r2, r3, #24
 80045f0:	d410      	bmi.n	8004614 <__swhatbuf_r+0x40>
 80045f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f6:	e00e      	b.n	8004616 <__swhatbuf_r+0x42>
 80045f8:	466a      	mov	r2, sp
 80045fa:	f000 fc97 	bl	8004f2c <_fstat_r>
 80045fe:	2800      	cmp	r0, #0
 8004600:	dbf1      	blt.n	80045e6 <__swhatbuf_r+0x12>
 8004602:	9a01      	ldr	r2, [sp, #4]
 8004604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800460c:	425a      	negs	r2, r3
 800460e:	415a      	adcs	r2, r3
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	e7ee      	b.n	80045f2 <__swhatbuf_r+0x1e>
 8004614:	2340      	movs	r3, #64	; 0x40
 8004616:	2000      	movs	r0, #0
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	b016      	add	sp, #88	; 0x58
 800461c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004620 <__smakebuf_r>:
 8004620:	898b      	ldrh	r3, [r1, #12]
 8004622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004624:	079d      	lsls	r5, r3, #30
 8004626:	4606      	mov	r6, r0
 8004628:	460c      	mov	r4, r1
 800462a:	d507      	bpl.n	800463c <__smakebuf_r+0x1c>
 800462c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	6123      	str	r3, [r4, #16]
 8004634:	2301      	movs	r3, #1
 8004636:	6163      	str	r3, [r4, #20]
 8004638:	b002      	add	sp, #8
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	ab01      	add	r3, sp, #4
 800463e:	466a      	mov	r2, sp
 8004640:	f7ff ffc8 	bl	80045d4 <__swhatbuf_r>
 8004644:	9900      	ldr	r1, [sp, #0]
 8004646:	4605      	mov	r5, r0
 8004648:	4630      	mov	r0, r6
 800464a:	f000 f895 	bl	8004778 <_malloc_r>
 800464e:	b948      	cbnz	r0, 8004664 <__smakebuf_r+0x44>
 8004650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004654:	059a      	lsls	r2, r3, #22
 8004656:	d4ef      	bmi.n	8004638 <__smakebuf_r+0x18>
 8004658:	f023 0303 	bic.w	r3, r3, #3
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	81a3      	strh	r3, [r4, #12]
 8004662:	e7e3      	b.n	800462c <__smakebuf_r+0xc>
 8004664:	4b0d      	ldr	r3, [pc, #52]	; (800469c <__smakebuf_r+0x7c>)
 8004666:	62b3      	str	r3, [r6, #40]	; 0x28
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	6020      	str	r0, [r4, #0]
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	9b00      	ldr	r3, [sp, #0]
 8004674:	6163      	str	r3, [r4, #20]
 8004676:	9b01      	ldr	r3, [sp, #4]
 8004678:	6120      	str	r0, [r4, #16]
 800467a:	b15b      	cbz	r3, 8004694 <__smakebuf_r+0x74>
 800467c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004680:	4630      	mov	r0, r6
 8004682:	f000 fc65 	bl	8004f50 <_isatty_r>
 8004686:	b128      	cbz	r0, 8004694 <__smakebuf_r+0x74>
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	89a0      	ldrh	r0, [r4, #12]
 8004696:	4305      	orrs	r5, r0
 8004698:	81a5      	strh	r5, [r4, #12]
 800469a:	e7cd      	b.n	8004638 <__smakebuf_r+0x18>
 800469c:	0800442d 	.word	0x0800442d

080046a0 <_free_r>:
 80046a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046a2:	2900      	cmp	r1, #0
 80046a4:	d044      	beq.n	8004730 <_free_r+0x90>
 80046a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046aa:	9001      	str	r0, [sp, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f1a1 0404 	sub.w	r4, r1, #4
 80046b2:	bfb8      	it	lt
 80046b4:	18e4      	addlt	r4, r4, r3
 80046b6:	f000 fc95 	bl	8004fe4 <__malloc_lock>
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <_free_r+0x94>)
 80046bc:	9801      	ldr	r0, [sp, #4]
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	b933      	cbnz	r3, 80046d0 <_free_r+0x30>
 80046c2:	6063      	str	r3, [r4, #4]
 80046c4:	6014      	str	r4, [r2, #0]
 80046c6:	b003      	add	sp, #12
 80046c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046cc:	f000 bc90 	b.w	8004ff0 <__malloc_unlock>
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	d908      	bls.n	80046e6 <_free_r+0x46>
 80046d4:	6825      	ldr	r5, [r4, #0]
 80046d6:	1961      	adds	r1, r4, r5
 80046d8:	428b      	cmp	r3, r1
 80046da:	bf01      	itttt	eq
 80046dc:	6819      	ldreq	r1, [r3, #0]
 80046de:	685b      	ldreq	r3, [r3, #4]
 80046e0:	1949      	addeq	r1, r1, r5
 80046e2:	6021      	streq	r1, [r4, #0]
 80046e4:	e7ed      	b.n	80046c2 <_free_r+0x22>
 80046e6:	461a      	mov	r2, r3
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	b10b      	cbz	r3, 80046f0 <_free_r+0x50>
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d9fa      	bls.n	80046e6 <_free_r+0x46>
 80046f0:	6811      	ldr	r1, [r2, #0]
 80046f2:	1855      	adds	r5, r2, r1
 80046f4:	42a5      	cmp	r5, r4
 80046f6:	d10b      	bne.n	8004710 <_free_r+0x70>
 80046f8:	6824      	ldr	r4, [r4, #0]
 80046fa:	4421      	add	r1, r4
 80046fc:	1854      	adds	r4, r2, r1
 80046fe:	42a3      	cmp	r3, r4
 8004700:	6011      	str	r1, [r2, #0]
 8004702:	d1e0      	bne.n	80046c6 <_free_r+0x26>
 8004704:	681c      	ldr	r4, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	6053      	str	r3, [r2, #4]
 800470a:	4421      	add	r1, r4
 800470c:	6011      	str	r1, [r2, #0]
 800470e:	e7da      	b.n	80046c6 <_free_r+0x26>
 8004710:	d902      	bls.n	8004718 <_free_r+0x78>
 8004712:	230c      	movs	r3, #12
 8004714:	6003      	str	r3, [r0, #0]
 8004716:	e7d6      	b.n	80046c6 <_free_r+0x26>
 8004718:	6825      	ldr	r5, [r4, #0]
 800471a:	1961      	adds	r1, r4, r5
 800471c:	428b      	cmp	r3, r1
 800471e:	bf04      	itt	eq
 8004720:	6819      	ldreq	r1, [r3, #0]
 8004722:	685b      	ldreq	r3, [r3, #4]
 8004724:	6063      	str	r3, [r4, #4]
 8004726:	bf04      	itt	eq
 8004728:	1949      	addeq	r1, r1, r5
 800472a:	6021      	streq	r1, [r4, #0]
 800472c:	6054      	str	r4, [r2, #4]
 800472e:	e7ca      	b.n	80046c6 <_free_r+0x26>
 8004730:	b003      	add	sp, #12
 8004732:	bd30      	pop	{r4, r5, pc}
 8004734:	200001b4 	.word	0x200001b4

08004738 <sbrk_aligned>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	4e0e      	ldr	r6, [pc, #56]	; (8004774 <sbrk_aligned+0x3c>)
 800473c:	460c      	mov	r4, r1
 800473e:	6831      	ldr	r1, [r6, #0]
 8004740:	4605      	mov	r5, r0
 8004742:	b911      	cbnz	r1, 800474a <sbrk_aligned+0x12>
 8004744:	f000 fb7c 	bl	8004e40 <_sbrk_r>
 8004748:	6030      	str	r0, [r6, #0]
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f000 fb77 	bl	8004e40 <_sbrk_r>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d00a      	beq.n	800476c <sbrk_aligned+0x34>
 8004756:	1cc4      	adds	r4, r0, #3
 8004758:	f024 0403 	bic.w	r4, r4, #3
 800475c:	42a0      	cmp	r0, r4
 800475e:	d007      	beq.n	8004770 <sbrk_aligned+0x38>
 8004760:	1a21      	subs	r1, r4, r0
 8004762:	4628      	mov	r0, r5
 8004764:	f000 fb6c 	bl	8004e40 <_sbrk_r>
 8004768:	3001      	adds	r0, #1
 800476a:	d101      	bne.n	8004770 <sbrk_aligned+0x38>
 800476c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004770:	4620      	mov	r0, r4
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	200001b8 	.word	0x200001b8

08004778 <_malloc_r>:
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	1ccd      	adds	r5, r1, #3
 800477e:	f025 0503 	bic.w	r5, r5, #3
 8004782:	3508      	adds	r5, #8
 8004784:	2d0c      	cmp	r5, #12
 8004786:	bf38      	it	cc
 8004788:	250c      	movcc	r5, #12
 800478a:	2d00      	cmp	r5, #0
 800478c:	4607      	mov	r7, r0
 800478e:	db01      	blt.n	8004794 <_malloc_r+0x1c>
 8004790:	42a9      	cmp	r1, r5
 8004792:	d905      	bls.n	80047a0 <_malloc_r+0x28>
 8004794:	230c      	movs	r3, #12
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	2600      	movs	r6, #0
 800479a:	4630      	mov	r0, r6
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	4e2e      	ldr	r6, [pc, #184]	; (800485c <_malloc_r+0xe4>)
 80047a2:	f000 fc1f 	bl	8004fe4 <__malloc_lock>
 80047a6:	6833      	ldr	r3, [r6, #0]
 80047a8:	461c      	mov	r4, r3
 80047aa:	bb34      	cbnz	r4, 80047fa <_malloc_r+0x82>
 80047ac:	4629      	mov	r1, r5
 80047ae:	4638      	mov	r0, r7
 80047b0:	f7ff ffc2 	bl	8004738 <sbrk_aligned>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	4604      	mov	r4, r0
 80047b8:	d14d      	bne.n	8004856 <_malloc_r+0xde>
 80047ba:	6834      	ldr	r4, [r6, #0]
 80047bc:	4626      	mov	r6, r4
 80047be:	2e00      	cmp	r6, #0
 80047c0:	d140      	bne.n	8004844 <_malloc_r+0xcc>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	4631      	mov	r1, r6
 80047c6:	4638      	mov	r0, r7
 80047c8:	eb04 0803 	add.w	r8, r4, r3
 80047cc:	f000 fb38 	bl	8004e40 <_sbrk_r>
 80047d0:	4580      	cmp	r8, r0
 80047d2:	d13a      	bne.n	800484a <_malloc_r+0xd2>
 80047d4:	6821      	ldr	r1, [r4, #0]
 80047d6:	3503      	adds	r5, #3
 80047d8:	1a6d      	subs	r5, r5, r1
 80047da:	f025 0503 	bic.w	r5, r5, #3
 80047de:	3508      	adds	r5, #8
 80047e0:	2d0c      	cmp	r5, #12
 80047e2:	bf38      	it	cc
 80047e4:	250c      	movcc	r5, #12
 80047e6:	4629      	mov	r1, r5
 80047e8:	4638      	mov	r0, r7
 80047ea:	f7ff ffa5 	bl	8004738 <sbrk_aligned>
 80047ee:	3001      	adds	r0, #1
 80047f0:	d02b      	beq.n	800484a <_malloc_r+0xd2>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	442b      	add	r3, r5
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	e00e      	b.n	8004818 <_malloc_r+0xa0>
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	1b52      	subs	r2, r2, r5
 80047fe:	d41e      	bmi.n	800483e <_malloc_r+0xc6>
 8004800:	2a0b      	cmp	r2, #11
 8004802:	d916      	bls.n	8004832 <_malloc_r+0xba>
 8004804:	1961      	adds	r1, r4, r5
 8004806:	42a3      	cmp	r3, r4
 8004808:	6025      	str	r5, [r4, #0]
 800480a:	bf18      	it	ne
 800480c:	6059      	strne	r1, [r3, #4]
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	bf08      	it	eq
 8004812:	6031      	streq	r1, [r6, #0]
 8004814:	5162      	str	r2, [r4, r5]
 8004816:	604b      	str	r3, [r1, #4]
 8004818:	4638      	mov	r0, r7
 800481a:	f104 060b 	add.w	r6, r4, #11
 800481e:	f000 fbe7 	bl	8004ff0 <__malloc_unlock>
 8004822:	f026 0607 	bic.w	r6, r6, #7
 8004826:	1d23      	adds	r3, r4, #4
 8004828:	1af2      	subs	r2, r6, r3
 800482a:	d0b6      	beq.n	800479a <_malloc_r+0x22>
 800482c:	1b9b      	subs	r3, r3, r6
 800482e:	50a3      	str	r3, [r4, r2]
 8004830:	e7b3      	b.n	800479a <_malloc_r+0x22>
 8004832:	6862      	ldr	r2, [r4, #4]
 8004834:	42a3      	cmp	r3, r4
 8004836:	bf0c      	ite	eq
 8004838:	6032      	streq	r2, [r6, #0]
 800483a:	605a      	strne	r2, [r3, #4]
 800483c:	e7ec      	b.n	8004818 <_malloc_r+0xa0>
 800483e:	4623      	mov	r3, r4
 8004840:	6864      	ldr	r4, [r4, #4]
 8004842:	e7b2      	b.n	80047aa <_malloc_r+0x32>
 8004844:	4634      	mov	r4, r6
 8004846:	6876      	ldr	r6, [r6, #4]
 8004848:	e7b9      	b.n	80047be <_malloc_r+0x46>
 800484a:	230c      	movs	r3, #12
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4638      	mov	r0, r7
 8004850:	f000 fbce 	bl	8004ff0 <__malloc_unlock>
 8004854:	e7a1      	b.n	800479a <_malloc_r+0x22>
 8004856:	6025      	str	r5, [r4, #0]
 8004858:	e7de      	b.n	8004818 <_malloc_r+0xa0>
 800485a:	bf00      	nop
 800485c:	200001b4 	.word	0x200001b4

08004860 <__ssputs_r>:
 8004860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004864:	688e      	ldr	r6, [r1, #8]
 8004866:	429e      	cmp	r6, r3
 8004868:	4682      	mov	sl, r0
 800486a:	460c      	mov	r4, r1
 800486c:	4690      	mov	r8, r2
 800486e:	461f      	mov	r7, r3
 8004870:	d838      	bhi.n	80048e4 <__ssputs_r+0x84>
 8004872:	898a      	ldrh	r2, [r1, #12]
 8004874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004878:	d032      	beq.n	80048e0 <__ssputs_r+0x80>
 800487a:	6825      	ldr	r5, [r4, #0]
 800487c:	6909      	ldr	r1, [r1, #16]
 800487e:	eba5 0901 	sub.w	r9, r5, r1
 8004882:	6965      	ldr	r5, [r4, #20]
 8004884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800488c:	3301      	adds	r3, #1
 800488e:	444b      	add	r3, r9
 8004890:	106d      	asrs	r5, r5, #1
 8004892:	429d      	cmp	r5, r3
 8004894:	bf38      	it	cc
 8004896:	461d      	movcc	r5, r3
 8004898:	0553      	lsls	r3, r2, #21
 800489a:	d531      	bpl.n	8004900 <__ssputs_r+0xa0>
 800489c:	4629      	mov	r1, r5
 800489e:	f7ff ff6b 	bl	8004778 <_malloc_r>
 80048a2:	4606      	mov	r6, r0
 80048a4:	b950      	cbnz	r0, 80048bc <__ssputs_r+0x5c>
 80048a6:	230c      	movs	r3, #12
 80048a8:	f8ca 3000 	str.w	r3, [sl]
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048bc:	6921      	ldr	r1, [r4, #16]
 80048be:	464a      	mov	r2, r9
 80048c0:	f000 fb68 	bl	8004f94 <memcpy>
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	6126      	str	r6, [r4, #16]
 80048d2:	6165      	str	r5, [r4, #20]
 80048d4:	444e      	add	r6, r9
 80048d6:	eba5 0509 	sub.w	r5, r5, r9
 80048da:	6026      	str	r6, [r4, #0]
 80048dc:	60a5      	str	r5, [r4, #8]
 80048de:	463e      	mov	r6, r7
 80048e0:	42be      	cmp	r6, r7
 80048e2:	d900      	bls.n	80048e6 <__ssputs_r+0x86>
 80048e4:	463e      	mov	r6, r7
 80048e6:	6820      	ldr	r0, [r4, #0]
 80048e8:	4632      	mov	r2, r6
 80048ea:	4641      	mov	r1, r8
 80048ec:	f000 fb60 	bl	8004fb0 <memmove>
 80048f0:	68a3      	ldr	r3, [r4, #8]
 80048f2:	1b9b      	subs	r3, r3, r6
 80048f4:	60a3      	str	r3, [r4, #8]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	4433      	add	r3, r6
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	2000      	movs	r0, #0
 80048fe:	e7db      	b.n	80048b8 <__ssputs_r+0x58>
 8004900:	462a      	mov	r2, r5
 8004902:	f000 fb7b 	bl	8004ffc <_realloc_r>
 8004906:	4606      	mov	r6, r0
 8004908:	2800      	cmp	r0, #0
 800490a:	d1e1      	bne.n	80048d0 <__ssputs_r+0x70>
 800490c:	6921      	ldr	r1, [r4, #16]
 800490e:	4650      	mov	r0, sl
 8004910:	f7ff fec6 	bl	80046a0 <_free_r>
 8004914:	e7c7      	b.n	80048a6 <__ssputs_r+0x46>
	...

08004918 <_svfiprintf_r>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	4698      	mov	r8, r3
 800491e:	898b      	ldrh	r3, [r1, #12]
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	b09d      	sub	sp, #116	; 0x74
 8004924:	4607      	mov	r7, r0
 8004926:	460d      	mov	r5, r1
 8004928:	4614      	mov	r4, r2
 800492a:	d50e      	bpl.n	800494a <_svfiprintf_r+0x32>
 800492c:	690b      	ldr	r3, [r1, #16]
 800492e:	b963      	cbnz	r3, 800494a <_svfiprintf_r+0x32>
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	f7ff ff21 	bl	8004778 <_malloc_r>
 8004936:	6028      	str	r0, [r5, #0]
 8004938:	6128      	str	r0, [r5, #16]
 800493a:	b920      	cbnz	r0, 8004946 <_svfiprintf_r+0x2e>
 800493c:	230c      	movs	r3, #12
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004944:	e0d1      	b.n	8004aea <_svfiprintf_r+0x1d2>
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	616b      	str	r3, [r5, #20]
 800494a:	2300      	movs	r3, #0
 800494c:	9309      	str	r3, [sp, #36]	; 0x24
 800494e:	2320      	movs	r3, #32
 8004950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004954:	f8cd 800c 	str.w	r8, [sp, #12]
 8004958:	2330      	movs	r3, #48	; 0x30
 800495a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b04 <_svfiprintf_r+0x1ec>
 800495e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004962:	f04f 0901 	mov.w	r9, #1
 8004966:	4623      	mov	r3, r4
 8004968:	469a      	mov	sl, r3
 800496a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800496e:	b10a      	cbz	r2, 8004974 <_svfiprintf_r+0x5c>
 8004970:	2a25      	cmp	r2, #37	; 0x25
 8004972:	d1f9      	bne.n	8004968 <_svfiprintf_r+0x50>
 8004974:	ebba 0b04 	subs.w	fp, sl, r4
 8004978:	d00b      	beq.n	8004992 <_svfiprintf_r+0x7a>
 800497a:	465b      	mov	r3, fp
 800497c:	4622      	mov	r2, r4
 800497e:	4629      	mov	r1, r5
 8004980:	4638      	mov	r0, r7
 8004982:	f7ff ff6d 	bl	8004860 <__ssputs_r>
 8004986:	3001      	adds	r0, #1
 8004988:	f000 80aa 	beq.w	8004ae0 <_svfiprintf_r+0x1c8>
 800498c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800498e:	445a      	add	r2, fp
 8004990:	9209      	str	r2, [sp, #36]	; 0x24
 8004992:	f89a 3000 	ldrb.w	r3, [sl]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80a2 	beq.w	8004ae0 <_svfiprintf_r+0x1c8>
 800499c:	2300      	movs	r3, #0
 800499e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a6:	f10a 0a01 	add.w	sl, sl, #1
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	9307      	str	r3, [sp, #28]
 80049ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049b2:	931a      	str	r3, [sp, #104]	; 0x68
 80049b4:	4654      	mov	r4, sl
 80049b6:	2205      	movs	r2, #5
 80049b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049bc:	4851      	ldr	r0, [pc, #324]	; (8004b04 <_svfiprintf_r+0x1ec>)
 80049be:	f7fb fc2f 	bl	8000220 <memchr>
 80049c2:	9a04      	ldr	r2, [sp, #16]
 80049c4:	b9d8      	cbnz	r0, 80049fe <_svfiprintf_r+0xe6>
 80049c6:	06d0      	lsls	r0, r2, #27
 80049c8:	bf44      	itt	mi
 80049ca:	2320      	movmi	r3, #32
 80049cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049d0:	0711      	lsls	r1, r2, #28
 80049d2:	bf44      	itt	mi
 80049d4:	232b      	movmi	r3, #43	; 0x2b
 80049d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049da:	f89a 3000 	ldrb.w	r3, [sl]
 80049de:	2b2a      	cmp	r3, #42	; 0x2a
 80049e0:	d015      	beq.n	8004a0e <_svfiprintf_r+0xf6>
 80049e2:	9a07      	ldr	r2, [sp, #28]
 80049e4:	4654      	mov	r4, sl
 80049e6:	2000      	movs	r0, #0
 80049e8:	f04f 0c0a 	mov.w	ip, #10
 80049ec:	4621      	mov	r1, r4
 80049ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049f2:	3b30      	subs	r3, #48	; 0x30
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	d94e      	bls.n	8004a96 <_svfiprintf_r+0x17e>
 80049f8:	b1b0      	cbz	r0, 8004a28 <_svfiprintf_r+0x110>
 80049fa:	9207      	str	r2, [sp, #28]
 80049fc:	e014      	b.n	8004a28 <_svfiprintf_r+0x110>
 80049fe:	eba0 0308 	sub.w	r3, r0, r8
 8004a02:	fa09 f303 	lsl.w	r3, r9, r3
 8004a06:	4313      	orrs	r3, r2
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	46a2      	mov	sl, r4
 8004a0c:	e7d2      	b.n	80049b4 <_svfiprintf_r+0x9c>
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	1d19      	adds	r1, r3, #4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	9103      	str	r1, [sp, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfbb      	ittet	lt
 8004a1a:	425b      	neglt	r3, r3
 8004a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a20:	9307      	strge	r3, [sp, #28]
 8004a22:	9307      	strlt	r3, [sp, #28]
 8004a24:	bfb8      	it	lt
 8004a26:	9204      	strlt	r2, [sp, #16]
 8004a28:	7823      	ldrb	r3, [r4, #0]
 8004a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a2c:	d10c      	bne.n	8004a48 <_svfiprintf_r+0x130>
 8004a2e:	7863      	ldrb	r3, [r4, #1]
 8004a30:	2b2a      	cmp	r3, #42	; 0x2a
 8004a32:	d135      	bne.n	8004aa0 <_svfiprintf_r+0x188>
 8004a34:	9b03      	ldr	r3, [sp, #12]
 8004a36:	1d1a      	adds	r2, r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	9203      	str	r2, [sp, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bfb8      	it	lt
 8004a40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a44:	3402      	adds	r4, #2
 8004a46:	9305      	str	r3, [sp, #20]
 8004a48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b14 <_svfiprintf_r+0x1fc>
 8004a4c:	7821      	ldrb	r1, [r4, #0]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4650      	mov	r0, sl
 8004a52:	f7fb fbe5 	bl	8000220 <memchr>
 8004a56:	b140      	cbz	r0, 8004a6a <_svfiprintf_r+0x152>
 8004a58:	2340      	movs	r3, #64	; 0x40
 8004a5a:	eba0 000a 	sub.w	r0, r0, sl
 8004a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a62:	9b04      	ldr	r3, [sp, #16]
 8004a64:	4303      	orrs	r3, r0
 8004a66:	3401      	adds	r4, #1
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a6e:	4826      	ldr	r0, [pc, #152]	; (8004b08 <_svfiprintf_r+0x1f0>)
 8004a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a74:	2206      	movs	r2, #6
 8004a76:	f7fb fbd3 	bl	8000220 <memchr>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d038      	beq.n	8004af0 <_svfiprintf_r+0x1d8>
 8004a7e:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <_svfiprintf_r+0x1f4>)
 8004a80:	bb1b      	cbnz	r3, 8004aca <_svfiprintf_r+0x1b2>
 8004a82:	9b03      	ldr	r3, [sp, #12]
 8004a84:	3307      	adds	r3, #7
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	9303      	str	r3, [sp, #12]
 8004a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a90:	4433      	add	r3, r6
 8004a92:	9309      	str	r3, [sp, #36]	; 0x24
 8004a94:	e767      	b.n	8004966 <_svfiprintf_r+0x4e>
 8004a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	e7a5      	b.n	80049ec <_svfiprintf_r+0xd4>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	3401      	adds	r4, #1
 8004aa4:	9305      	str	r3, [sp, #20]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f04f 0c0a 	mov.w	ip, #10
 8004aac:	4620      	mov	r0, r4
 8004aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ab2:	3a30      	subs	r2, #48	; 0x30
 8004ab4:	2a09      	cmp	r2, #9
 8004ab6:	d903      	bls.n	8004ac0 <_svfiprintf_r+0x1a8>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0c5      	beq.n	8004a48 <_svfiprintf_r+0x130>
 8004abc:	9105      	str	r1, [sp, #20]
 8004abe:	e7c3      	b.n	8004a48 <_svfiprintf_r+0x130>
 8004ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e7f0      	b.n	8004aac <_svfiprintf_r+0x194>
 8004aca:	ab03      	add	r3, sp, #12
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	462a      	mov	r2, r5
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <_svfiprintf_r+0x1f8>)
 8004ad2:	a904      	add	r1, sp, #16
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	f3af 8000 	nop.w
 8004ada:	1c42      	adds	r2, r0, #1
 8004adc:	4606      	mov	r6, r0
 8004ade:	d1d6      	bne.n	8004a8e <_svfiprintf_r+0x176>
 8004ae0:	89ab      	ldrh	r3, [r5, #12]
 8004ae2:	065b      	lsls	r3, r3, #25
 8004ae4:	f53f af2c 	bmi.w	8004940 <_svfiprintf_r+0x28>
 8004ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aea:	b01d      	add	sp, #116	; 0x74
 8004aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af0:	ab03      	add	r3, sp, #12
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	462a      	mov	r2, r5
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <_svfiprintf_r+0x1f8>)
 8004af8:	a904      	add	r1, sp, #16
 8004afa:	4638      	mov	r0, r7
 8004afc:	f000 f87a 	bl	8004bf4 <_printf_i>
 8004b00:	e7eb      	b.n	8004ada <_svfiprintf_r+0x1c2>
 8004b02:	bf00      	nop
 8004b04:	0800543c 	.word	0x0800543c
 8004b08:	08005446 	.word	0x08005446
 8004b0c:	00000000 	.word	0x00000000
 8004b10:	08004861 	.word	0x08004861
 8004b14:	08005442 	.word	0x08005442

08004b18 <_printf_common>:
 8004b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	4699      	mov	r9, r3
 8004b20:	688a      	ldr	r2, [r1, #8]
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	bfb8      	it	lt
 8004b2c:	4613      	movlt	r3, r2
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b34:	4607      	mov	r7, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	b10a      	cbz	r2, 8004b3e <_printf_common+0x26>
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	0699      	lsls	r1, r3, #26
 8004b42:	bf42      	ittt	mi
 8004b44:	6833      	ldrmi	r3, [r6, #0]
 8004b46:	3302      	addmi	r3, #2
 8004b48:	6033      	strmi	r3, [r6, #0]
 8004b4a:	6825      	ldr	r5, [r4, #0]
 8004b4c:	f015 0506 	ands.w	r5, r5, #6
 8004b50:	d106      	bne.n	8004b60 <_printf_common+0x48>
 8004b52:	f104 0a19 	add.w	sl, r4, #25
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	6832      	ldr	r2, [r6, #0]
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	dc26      	bgt.n	8004bae <_printf_common+0x96>
 8004b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b64:	1e13      	subs	r3, r2, #0
 8004b66:	6822      	ldr	r2, [r4, #0]
 8004b68:	bf18      	it	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	0692      	lsls	r2, r2, #26
 8004b6e:	d42b      	bmi.n	8004bc8 <_printf_common+0xb0>
 8004b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b74:	4649      	mov	r1, r9
 8004b76:	4638      	mov	r0, r7
 8004b78:	47c0      	blx	r8
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d01e      	beq.n	8004bbc <_printf_common+0xa4>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	68e5      	ldr	r5, [r4, #12]
 8004b82:	6832      	ldr	r2, [r6, #0]
 8004b84:	f003 0306 	and.w	r3, r3, #6
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	bf08      	it	eq
 8004b8c:	1aad      	subeq	r5, r5, r2
 8004b8e:	68a3      	ldr	r3, [r4, #8]
 8004b90:	6922      	ldr	r2, [r4, #16]
 8004b92:	bf0c      	ite	eq
 8004b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b98:	2500      	movne	r5, #0
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bfc4      	itt	gt
 8004b9e:	1a9b      	subgt	r3, r3, r2
 8004ba0:	18ed      	addgt	r5, r5, r3
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	341a      	adds	r4, #26
 8004ba6:	42b5      	cmp	r5, r6
 8004ba8:	d11a      	bne.n	8004be0 <_printf_common+0xc8>
 8004baa:	2000      	movs	r0, #0
 8004bac:	e008      	b.n	8004bc0 <_printf_common+0xa8>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4652      	mov	r2, sl
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	47c0      	blx	r8
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d103      	bne.n	8004bc4 <_printf_common+0xac>
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	e7c6      	b.n	8004b56 <_printf_common+0x3e>
 8004bc8:	18e1      	adds	r1, r4, r3
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	2030      	movs	r0, #48	; 0x30
 8004bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bd2:	4422      	add	r2, r4
 8004bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bdc:	3302      	adds	r3, #2
 8004bde:	e7c7      	b.n	8004b70 <_printf_common+0x58>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4622      	mov	r2, r4
 8004be4:	4649      	mov	r1, r9
 8004be6:	4638      	mov	r0, r7
 8004be8:	47c0      	blx	r8
 8004bea:	3001      	adds	r0, #1
 8004bec:	d0e6      	beq.n	8004bbc <_printf_common+0xa4>
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7d9      	b.n	8004ba6 <_printf_common+0x8e>
	...

08004bf4 <_printf_i>:
 8004bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	7e0f      	ldrb	r7, [r1, #24]
 8004bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bfc:	2f78      	cmp	r7, #120	; 0x78
 8004bfe:	4691      	mov	r9, r2
 8004c00:	4680      	mov	r8, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	469a      	mov	sl, r3
 8004c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c0a:	d807      	bhi.n	8004c1c <_printf_i+0x28>
 8004c0c:	2f62      	cmp	r7, #98	; 0x62
 8004c0e:	d80a      	bhi.n	8004c26 <_printf_i+0x32>
 8004c10:	2f00      	cmp	r7, #0
 8004c12:	f000 80d8 	beq.w	8004dc6 <_printf_i+0x1d2>
 8004c16:	2f58      	cmp	r7, #88	; 0x58
 8004c18:	f000 80a3 	beq.w	8004d62 <_printf_i+0x16e>
 8004c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c24:	e03a      	b.n	8004c9c <_printf_i+0xa8>
 8004c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c2a:	2b15      	cmp	r3, #21
 8004c2c:	d8f6      	bhi.n	8004c1c <_printf_i+0x28>
 8004c2e:	a101      	add	r1, pc, #4	; (adr r1, 8004c34 <_printf_i+0x40>)
 8004c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c34:	08004c8d 	.word	0x08004c8d
 8004c38:	08004ca1 	.word	0x08004ca1
 8004c3c:	08004c1d 	.word	0x08004c1d
 8004c40:	08004c1d 	.word	0x08004c1d
 8004c44:	08004c1d 	.word	0x08004c1d
 8004c48:	08004c1d 	.word	0x08004c1d
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004c1d 	.word	0x08004c1d
 8004c54:	08004c1d 	.word	0x08004c1d
 8004c58:	08004c1d 	.word	0x08004c1d
 8004c5c:	08004c1d 	.word	0x08004c1d
 8004c60:	08004dad 	.word	0x08004dad
 8004c64:	08004cd1 	.word	0x08004cd1
 8004c68:	08004d8f 	.word	0x08004d8f
 8004c6c:	08004c1d 	.word	0x08004c1d
 8004c70:	08004c1d 	.word	0x08004c1d
 8004c74:	08004dcf 	.word	0x08004dcf
 8004c78:	08004c1d 	.word	0x08004c1d
 8004c7c:	08004cd1 	.word	0x08004cd1
 8004c80:	08004c1d 	.word	0x08004c1d
 8004c84:	08004c1d 	.word	0x08004c1d
 8004c88:	08004d97 	.word	0x08004d97
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	1d1a      	adds	r2, r3, #4
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	602a      	str	r2, [r5, #0]
 8004c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0a3      	b.n	8004de8 <_printf_i+0x1f4>
 8004ca0:	6820      	ldr	r0, [r4, #0]
 8004ca2:	6829      	ldr	r1, [r5, #0]
 8004ca4:	0606      	lsls	r6, r0, #24
 8004ca6:	f101 0304 	add.w	r3, r1, #4
 8004caa:	d50a      	bpl.n	8004cc2 <_printf_i+0xce>
 8004cac:	680e      	ldr	r6, [r1, #0]
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	2e00      	cmp	r6, #0
 8004cb2:	da03      	bge.n	8004cbc <_printf_i+0xc8>
 8004cb4:	232d      	movs	r3, #45	; 0x2d
 8004cb6:	4276      	negs	r6, r6
 8004cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cbc:	485e      	ldr	r0, [pc, #376]	; (8004e38 <_printf_i+0x244>)
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	e019      	b.n	8004cf6 <_printf_i+0x102>
 8004cc2:	680e      	ldr	r6, [r1, #0]
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cca:	bf18      	it	ne
 8004ccc:	b236      	sxthne	r6, r6
 8004cce:	e7ef      	b.n	8004cb0 <_printf_i+0xbc>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	1d19      	adds	r1, r3, #4
 8004cd6:	6029      	str	r1, [r5, #0]
 8004cd8:	0601      	lsls	r1, r0, #24
 8004cda:	d501      	bpl.n	8004ce0 <_printf_i+0xec>
 8004cdc:	681e      	ldr	r6, [r3, #0]
 8004cde:	e002      	b.n	8004ce6 <_printf_i+0xf2>
 8004ce0:	0646      	lsls	r6, r0, #25
 8004ce2:	d5fb      	bpl.n	8004cdc <_printf_i+0xe8>
 8004ce4:	881e      	ldrh	r6, [r3, #0]
 8004ce6:	4854      	ldr	r0, [pc, #336]	; (8004e38 <_printf_i+0x244>)
 8004ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8004cea:	bf0c      	ite	eq
 8004cec:	2308      	moveq	r3, #8
 8004cee:	230a      	movne	r3, #10
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf6:	6865      	ldr	r5, [r4, #4]
 8004cf8:	60a5      	str	r5, [r4, #8]
 8004cfa:	2d00      	cmp	r5, #0
 8004cfc:	bfa2      	ittt	ge
 8004cfe:	6821      	ldrge	r1, [r4, #0]
 8004d00:	f021 0104 	bicge.w	r1, r1, #4
 8004d04:	6021      	strge	r1, [r4, #0]
 8004d06:	b90e      	cbnz	r6, 8004d0c <_printf_i+0x118>
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	d04d      	beq.n	8004da8 <_printf_i+0x1b4>
 8004d0c:	4615      	mov	r5, r2
 8004d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d12:	fb03 6711 	mls	r7, r3, r1, r6
 8004d16:	5dc7      	ldrb	r7, [r0, r7]
 8004d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d1c:	4637      	mov	r7, r6
 8004d1e:	42bb      	cmp	r3, r7
 8004d20:	460e      	mov	r6, r1
 8004d22:	d9f4      	bls.n	8004d0e <_printf_i+0x11a>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d10b      	bne.n	8004d40 <_printf_i+0x14c>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	07de      	lsls	r6, r3, #31
 8004d2c:	d508      	bpl.n	8004d40 <_printf_i+0x14c>
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	6861      	ldr	r1, [r4, #4]
 8004d32:	4299      	cmp	r1, r3
 8004d34:	bfde      	ittt	le
 8004d36:	2330      	movle	r3, #48	; 0x30
 8004d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d40:	1b52      	subs	r2, r2, r5
 8004d42:	6122      	str	r2, [r4, #16]
 8004d44:	f8cd a000 	str.w	sl, [sp]
 8004d48:	464b      	mov	r3, r9
 8004d4a:	aa03      	add	r2, sp, #12
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4640      	mov	r0, r8
 8004d50:	f7ff fee2 	bl	8004b18 <_printf_common>
 8004d54:	3001      	adds	r0, #1
 8004d56:	d14c      	bne.n	8004df2 <_printf_i+0x1fe>
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5c:	b004      	add	sp, #16
 8004d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d62:	4835      	ldr	r0, [pc, #212]	; (8004e38 <_printf_i+0x244>)
 8004d64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d68:	6829      	ldr	r1, [r5, #0]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d70:	6029      	str	r1, [r5, #0]
 8004d72:	061d      	lsls	r5, r3, #24
 8004d74:	d514      	bpl.n	8004da0 <_printf_i+0x1ac>
 8004d76:	07df      	lsls	r7, r3, #31
 8004d78:	bf44      	itt	mi
 8004d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d7e:	6023      	strmi	r3, [r4, #0]
 8004d80:	b91e      	cbnz	r6, 8004d8a <_printf_i+0x196>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f023 0320 	bic.w	r3, r3, #32
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	e7b0      	b.n	8004cf0 <_printf_i+0xfc>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	f043 0320 	orr.w	r3, r3, #32
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	2378      	movs	r3, #120	; 0x78
 8004d98:	4828      	ldr	r0, [pc, #160]	; (8004e3c <_printf_i+0x248>)
 8004d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9e:	e7e3      	b.n	8004d68 <_printf_i+0x174>
 8004da0:	0659      	lsls	r1, r3, #25
 8004da2:	bf48      	it	mi
 8004da4:	b2b6      	uxthmi	r6, r6
 8004da6:	e7e6      	b.n	8004d76 <_printf_i+0x182>
 8004da8:	4615      	mov	r5, r2
 8004daa:	e7bb      	b.n	8004d24 <_printf_i+0x130>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	6826      	ldr	r6, [r4, #0]
 8004db0:	6961      	ldr	r1, [r4, #20]
 8004db2:	1d18      	adds	r0, r3, #4
 8004db4:	6028      	str	r0, [r5, #0]
 8004db6:	0635      	lsls	r5, r6, #24
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	d501      	bpl.n	8004dc0 <_printf_i+0x1cc>
 8004dbc:	6019      	str	r1, [r3, #0]
 8004dbe:	e002      	b.n	8004dc6 <_printf_i+0x1d2>
 8004dc0:	0670      	lsls	r0, r6, #25
 8004dc2:	d5fb      	bpl.n	8004dbc <_printf_i+0x1c8>
 8004dc4:	8019      	strh	r1, [r3, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	4615      	mov	r5, r2
 8004dcc:	e7ba      	b.n	8004d44 <_printf_i+0x150>
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	1d1a      	adds	r2, r3, #4
 8004dd2:	602a      	str	r2, [r5, #0]
 8004dd4:	681d      	ldr	r5, [r3, #0]
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f7fb fa20 	bl	8000220 <memchr>
 8004de0:	b108      	cbz	r0, 8004de6 <_printf_i+0x1f2>
 8004de2:	1b40      	subs	r0, r0, r5
 8004de4:	6060      	str	r0, [r4, #4]
 8004de6:	6863      	ldr	r3, [r4, #4]
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	2300      	movs	r3, #0
 8004dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df0:	e7a8      	b.n	8004d44 <_printf_i+0x150>
 8004df2:	6923      	ldr	r3, [r4, #16]
 8004df4:	462a      	mov	r2, r5
 8004df6:	4649      	mov	r1, r9
 8004df8:	4640      	mov	r0, r8
 8004dfa:	47d0      	blx	sl
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d0ab      	beq.n	8004d58 <_printf_i+0x164>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	079b      	lsls	r3, r3, #30
 8004e04:	d413      	bmi.n	8004e2e <_printf_i+0x23a>
 8004e06:	68e0      	ldr	r0, [r4, #12]
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	4298      	cmp	r0, r3
 8004e0c:	bfb8      	it	lt
 8004e0e:	4618      	movlt	r0, r3
 8004e10:	e7a4      	b.n	8004d5c <_printf_i+0x168>
 8004e12:	2301      	movs	r3, #1
 8004e14:	4632      	mov	r2, r6
 8004e16:	4649      	mov	r1, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	47d0      	blx	sl
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d09b      	beq.n	8004d58 <_printf_i+0x164>
 8004e20:	3501      	adds	r5, #1
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	9903      	ldr	r1, [sp, #12]
 8004e26:	1a5b      	subs	r3, r3, r1
 8004e28:	42ab      	cmp	r3, r5
 8004e2a:	dcf2      	bgt.n	8004e12 <_printf_i+0x21e>
 8004e2c:	e7eb      	b.n	8004e06 <_printf_i+0x212>
 8004e2e:	2500      	movs	r5, #0
 8004e30:	f104 0619 	add.w	r6, r4, #25
 8004e34:	e7f5      	b.n	8004e22 <_printf_i+0x22e>
 8004e36:	bf00      	nop
 8004e38:	0800544d 	.word	0x0800544d
 8004e3c:	0800545e 	.word	0x0800545e

08004e40 <_sbrk_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	; (8004e5c <_sbrk_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7ff f838 	bl	8003ec0 <_sbrk>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_sbrk_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_sbrk_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	200001bc 	.word	0x200001bc

08004e60 <__sread>:
 8004e60:	b510      	push	{r4, lr}
 8004e62:	460c      	mov	r4, r1
 8004e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e68:	f000 f8f8 	bl	800505c <_read_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	bfab      	itete	ge
 8004e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e72:	89a3      	ldrhlt	r3, [r4, #12]
 8004e74:	181b      	addge	r3, r3, r0
 8004e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e7a:	bfac      	ite	ge
 8004e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e7e:	81a3      	strhlt	r3, [r4, #12]
 8004e80:	bd10      	pop	{r4, pc}

08004e82 <__swrite>:
 8004e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e86:	461f      	mov	r7, r3
 8004e88:	898b      	ldrh	r3, [r1, #12]
 8004e8a:	05db      	lsls	r3, r3, #23
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	460c      	mov	r4, r1
 8004e90:	4616      	mov	r6, r2
 8004e92:	d505      	bpl.n	8004ea0 <__swrite+0x1e>
 8004e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e98:	2302      	movs	r3, #2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f000 f868 	bl	8004f70 <_lseek_r>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	4632      	mov	r2, r6
 8004eae:	463b      	mov	r3, r7
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb6:	f000 b817 	b.w	8004ee8 <_write_r>

08004eba <__sseek>:
 8004eba:	b510      	push	{r4, lr}
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec2:	f000 f855 	bl	8004f70 <_lseek_r>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	bf15      	itete	ne
 8004ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ed6:	81a3      	strheq	r3, [r4, #12]
 8004ed8:	bf18      	it	ne
 8004eda:	81a3      	strhne	r3, [r4, #12]
 8004edc:	bd10      	pop	{r4, pc}

08004ede <__sclose>:
 8004ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee2:	f000 b813 	b.w	8004f0c <_close_r>
	...

08004ee8 <_write_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d07      	ldr	r5, [pc, #28]	; (8004f08 <_write_r+0x20>)
 8004eec:	4604      	mov	r4, r0
 8004eee:	4608      	mov	r0, r1
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7fe ff91 	bl	8003e1e <_write>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_write_r+0x1e>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_write_r+0x1e>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	200001bc 	.word	0x200001bc

08004f0c <_close_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d06      	ldr	r5, [pc, #24]	; (8004f28 <_close_r+0x1c>)
 8004f10:	2300      	movs	r3, #0
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	f7fe ff9d 	bl	8003e56 <_close>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_close_r+0x1a>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_close_r+0x1a>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	200001bc 	.word	0x200001bc

08004f2c <_fstat_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d07      	ldr	r5, [pc, #28]	; (8004f4c <_fstat_r+0x20>)
 8004f30:	2300      	movs	r3, #0
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	4611      	mov	r1, r2
 8004f38:	602b      	str	r3, [r5, #0]
 8004f3a:	f7fe ff98 	bl	8003e6e <_fstat>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	d102      	bne.n	8004f48 <_fstat_r+0x1c>
 8004f42:	682b      	ldr	r3, [r5, #0]
 8004f44:	b103      	cbz	r3, 8004f48 <_fstat_r+0x1c>
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200001bc 	.word	0x200001bc

08004f50 <_isatty_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d06      	ldr	r5, [pc, #24]	; (8004f6c <_isatty_r+0x1c>)
 8004f54:	2300      	movs	r3, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	602b      	str	r3, [r5, #0]
 8004f5c:	f7fe ff97 	bl	8003e8e <_isatty>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_isatty_r+0x1a>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_isatty_r+0x1a>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	200001bc 	.word	0x200001bc

08004f70 <_lseek_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d07      	ldr	r5, [pc, #28]	; (8004f90 <_lseek_r+0x20>)
 8004f74:	4604      	mov	r4, r0
 8004f76:	4608      	mov	r0, r1
 8004f78:	4611      	mov	r1, r2
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	602a      	str	r2, [r5, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f7fe ff90 	bl	8003ea4 <_lseek>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_lseek_r+0x1e>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_lseek_r+0x1e>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	200001bc 	.word	0x200001bc

08004f94 <memcpy>:
 8004f94:	440a      	add	r2, r1
 8004f96:	4291      	cmp	r1, r2
 8004f98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f9c:	d100      	bne.n	8004fa0 <memcpy+0xc>
 8004f9e:	4770      	bx	lr
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004faa:	4291      	cmp	r1, r2
 8004fac:	d1f9      	bne.n	8004fa2 <memcpy+0xe>
 8004fae:	bd10      	pop	{r4, pc}

08004fb0 <memmove>:
 8004fb0:	4288      	cmp	r0, r1
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	eb01 0402 	add.w	r4, r1, r2
 8004fb8:	d902      	bls.n	8004fc0 <memmove+0x10>
 8004fba:	4284      	cmp	r4, r0
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	d807      	bhi.n	8004fd0 <memmove+0x20>
 8004fc0:	1e43      	subs	r3, r0, #1
 8004fc2:	42a1      	cmp	r1, r4
 8004fc4:	d008      	beq.n	8004fd8 <memmove+0x28>
 8004fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fce:	e7f8      	b.n	8004fc2 <memmove+0x12>
 8004fd0:	4402      	add	r2, r0
 8004fd2:	4601      	mov	r1, r0
 8004fd4:	428a      	cmp	r2, r1
 8004fd6:	d100      	bne.n	8004fda <memmove+0x2a>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fe2:	e7f7      	b.n	8004fd4 <memmove+0x24>

08004fe4 <__malloc_lock>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__malloc_lock+0x8>)
 8004fe6:	f7ff baf3 	b.w	80045d0 <__retarget_lock_acquire_recursive>
 8004fea:	bf00      	nop
 8004fec:	200001b0 	.word	0x200001b0

08004ff0 <__malloc_unlock>:
 8004ff0:	4801      	ldr	r0, [pc, #4]	; (8004ff8 <__malloc_unlock+0x8>)
 8004ff2:	f7ff baee 	b.w	80045d2 <__retarget_lock_release_recursive>
 8004ff6:	bf00      	nop
 8004ff8:	200001b0 	.word	0x200001b0

08004ffc <_realloc_r>:
 8004ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005000:	4680      	mov	r8, r0
 8005002:	4614      	mov	r4, r2
 8005004:	460e      	mov	r6, r1
 8005006:	b921      	cbnz	r1, 8005012 <_realloc_r+0x16>
 8005008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500c:	4611      	mov	r1, r2
 800500e:	f7ff bbb3 	b.w	8004778 <_malloc_r>
 8005012:	b92a      	cbnz	r2, 8005020 <_realloc_r+0x24>
 8005014:	f7ff fb44 	bl	80046a0 <_free_r>
 8005018:	4625      	mov	r5, r4
 800501a:	4628      	mov	r0, r5
 800501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005020:	f000 f82e 	bl	8005080 <_malloc_usable_size_r>
 8005024:	4284      	cmp	r4, r0
 8005026:	4607      	mov	r7, r0
 8005028:	d802      	bhi.n	8005030 <_realloc_r+0x34>
 800502a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800502e:	d812      	bhi.n	8005056 <_realloc_r+0x5a>
 8005030:	4621      	mov	r1, r4
 8005032:	4640      	mov	r0, r8
 8005034:	f7ff fba0 	bl	8004778 <_malloc_r>
 8005038:	4605      	mov	r5, r0
 800503a:	2800      	cmp	r0, #0
 800503c:	d0ed      	beq.n	800501a <_realloc_r+0x1e>
 800503e:	42bc      	cmp	r4, r7
 8005040:	4622      	mov	r2, r4
 8005042:	4631      	mov	r1, r6
 8005044:	bf28      	it	cs
 8005046:	463a      	movcs	r2, r7
 8005048:	f7ff ffa4 	bl	8004f94 <memcpy>
 800504c:	4631      	mov	r1, r6
 800504e:	4640      	mov	r0, r8
 8005050:	f7ff fb26 	bl	80046a0 <_free_r>
 8005054:	e7e1      	b.n	800501a <_realloc_r+0x1e>
 8005056:	4635      	mov	r5, r6
 8005058:	e7df      	b.n	800501a <_realloc_r+0x1e>
	...

0800505c <_read_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4d07      	ldr	r5, [pc, #28]	; (800507c <_read_r+0x20>)
 8005060:	4604      	mov	r4, r0
 8005062:	4608      	mov	r0, r1
 8005064:	4611      	mov	r1, r2
 8005066:	2200      	movs	r2, #0
 8005068:	602a      	str	r2, [r5, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	f7fe feba 	bl	8003de4 <_read>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_read_r+0x1e>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	b103      	cbz	r3, 800507a <_read_r+0x1e>
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	200001bc 	.word	0x200001bc

08005080 <_malloc_usable_size_r>:
 8005080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005084:	1f18      	subs	r0, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfbc      	itt	lt
 800508a:	580b      	ldrlt	r3, [r1, r0]
 800508c:	18c0      	addlt	r0, r0, r3
 800508e:	4770      	bx	lr

08005090 <_init>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr

0800509c <_fini>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	bf00      	nop
 80050a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a2:	bc08      	pop	{r3}
 80050a4:	469e      	mov	lr, r3
 80050a6:	4770      	bx	lr
