
STM32F429_Empty_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d8c  08003d8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d94  08003d94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4f8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000213e  00000000  00000000  0002e598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  000306d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004675  00000000  00000000  00032030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013977  00000000  00000000  000366a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff347  00000000  00000000  0004a01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149363  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e60  00000000  00000000  001493b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003c94 	.word	0x08003c94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003c94 	.word	0x08003c94

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GPIO_Init>:
 */

#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef *port, uint16_t pin_number)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef gpio_init_struct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

	gpio_init_struct.Pin = pin_number;
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
	gpio_init_struct.Speed = GPIO_SPEED_FAST;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(port, &gpio_init_struct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 fb00 	bl	8000bdc <HAL_GPIO_Init>
}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <Clock_Enable>:

void Clock_Enable(GPIO_TypeDef *port)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if(port == GPIOA)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a4f      	ldr	r2, [pc, #316]	; (800072c <Clock_Enable+0x148>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d10e      	bne.n	8000612 <Clock_Enable+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
 80005f8:	4b4d      	ldr	r3, [pc, #308]	; (8000730 <Clock_Enable+0x14c>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a4c      	ldr	r2, [pc, #304]	; (8000730 <Clock_Enable+0x14c>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
 8000604:	4b4a      	ldr	r3, [pc, #296]	; (8000730 <Clock_Enable+0x14c>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		__HAL_RCC_GPIOG_CLK_ENABLE();
	else if(port == GPIOH)
		__HAL_RCC_GPIOH_CLK_ENABLE();
	else
		printf("Enter Valid Port\r\n");
}
 8000610:	e087      	b.n	8000722 <Clock_Enable+0x13e>
	else if(port == GPIOB)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a47      	ldr	r2, [pc, #284]	; (8000734 <Clock_Enable+0x150>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d10e      	bne.n	8000638 <Clock_Enable+0x54>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
 800061e:	4b44      	ldr	r3, [pc, #272]	; (8000730 <Clock_Enable+0x14c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a43      	ldr	r2, [pc, #268]	; (8000730 <Clock_Enable+0x14c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b41      	ldr	r3, [pc, #260]	; (8000730 <Clock_Enable+0x14c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	623b      	str	r3, [r7, #32]
 8000634:	6a3b      	ldr	r3, [r7, #32]
}
 8000636:	e074      	b.n	8000722 <Clock_Enable+0x13e>
	else if(port == GPIOC)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a3f      	ldr	r2, [pc, #252]	; (8000738 <Clock_Enable+0x154>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d10e      	bne.n	800065e <Clock_Enable+0x7a>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
 8000644:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <Clock_Enable+0x14c>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a39      	ldr	r2, [pc, #228]	; (8000730 <Clock_Enable+0x14c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
 8000650:	4b37      	ldr	r3, [pc, #220]	; (8000730 <Clock_Enable+0x14c>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	61fb      	str	r3, [r7, #28]
 800065a:	69fb      	ldr	r3, [r7, #28]
}
 800065c:	e061      	b.n	8000722 <Clock_Enable+0x13e>
	else if(port == GPIOD)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a36      	ldr	r2, [pc, #216]	; (800073c <Clock_Enable+0x158>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d10e      	bne.n	8000684 <Clock_Enable+0xa0>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <Clock_Enable+0x14c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a30      	ldr	r2, [pc, #192]	; (8000730 <Clock_Enable+0x14c>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <Clock_Enable+0x14c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	69bb      	ldr	r3, [r7, #24]
}
 8000682:	e04e      	b.n	8000722 <Clock_Enable+0x13e>
	else if(port == GPIOE)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <Clock_Enable+0x15c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d10e      	bne.n	80006aa <Clock_Enable+0xc6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <Clock_Enable+0x14c>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	4a26      	ldr	r2, [pc, #152]	; (8000730 <Clock_Enable+0x14c>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6313      	str	r3, [r2, #48]	; 0x30
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <Clock_Enable+0x14c>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	f003 0310 	and.w	r3, r3, #16
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	697b      	ldr	r3, [r7, #20]
}
 80006a8:	e03b      	b.n	8000722 <Clock_Enable+0x13e>
	else if(port == GPIOF)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a25      	ldr	r2, [pc, #148]	; (8000744 <Clock_Enable+0x160>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d10e      	bne.n	80006d0 <Clock_Enable+0xec>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <Clock_Enable+0x14c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <Clock_Enable+0x14c>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <Clock_Enable+0x14c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
}
 80006ce:	e028      	b.n	8000722 <Clock_Enable+0x13e>
	else if(port == GPIOG)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <Clock_Enable+0x164>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d10e      	bne.n	80006f6 <Clock_Enable+0x112>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <Clock_Enable+0x14c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <Clock_Enable+0x14c>)
 80006e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e6:	6313      	str	r3, [r2, #48]	; 0x30
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <Clock_Enable+0x14c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	e015      	b.n	8000722 <Clock_Enable+0x13e>
	else if(port == GPIOH)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <Clock_Enable+0x168>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d10e      	bne.n	800071c <Clock_Enable+0x138>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <Clock_Enable+0x14c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <Clock_Enable+0x14c>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <Clock_Enable+0x14c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
}
 800071a:	e002      	b.n	8000722 <Clock_Enable+0x13e>
		printf("Enter Valid Port\r\n");
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <Clock_Enable+0x16c>)
 800071e:	f002 fab9 	bl	8002c94 <puts>
}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	; 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40020000 	.word	0x40020000
 8000730:	40023800 	.word	0x40023800
 8000734:	40020400 	.word	0x40020400
 8000738:	40020800 	.word	0x40020800
 800073c:	40020c00 	.word	0x40020c00
 8000740:	40021000 	.word	0x40021000
 8000744:	40021400 	.word	0x40021400
 8000748:	40021800 	.word	0x40021800
 800074c:	40021c00 	.word	0x40021c00
 8000750:	08003cac 	.word	0x08003cac

08000754 <GPIO_Pin_Toggle>:

inline void GPIO_Pin_Toggle(GPIO_TypeDef *port, uint16_t pin_number)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(port, pin_number);
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	4619      	mov	r1, r3
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 fbe5 	bl	8000f34 <HAL_GPIO_TogglePin>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <Timer_Init>:
TIM_HandleTypeDef htim;

volatile uint32_t sysTick = 0;;

void Timer_Init(TIM_TypeDef *Timer)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	htim.Instance = Timer;
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <Timer_Init+0x34>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
	htim.Init.Prescaler = 1;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <Timer_Init+0x34>)
 8000784:	2201      	movs	r2, #1
 8000786:	605a      	str	r2, [r3, #4]
	htim.Init.Period = 20000-1;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <Timer_Init+0x34>)
 800078a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800078e:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim) != HAL_OK)
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <Timer_Init+0x34>)
 8000792:	f001 f8d1 	bl	8001938 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <Timer_Init+0x2c>
	{
		Error_Handler();
 800079c:	f002 f846 	bl	800282c <Error_Handler>
	}
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000008c 	.word	0x2000008c

080007ac <Timer_Start_IT>:
{
	HAL_TIM_Base_Start(&htim);
}

inline void Timer_Start_IT(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <Timer_Start_IT+0x10>)
 80007b2:	f001 f911 	bl	80019d8 <HAL_TIM_Base_Start_IT>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000008c 	.word	0x2000008c

080007c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	sysTick++;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200000d4 	.word	0x200000d4

080007e4 <SysTick_Get>:
inline uint32_t SysTick_Get(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	return sysTick;
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <SysTick_Get+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	200000d4 	.word	0x200000d4

080007fc <SysTick_Set>:
inline void SysTick_Set(uint8_t tmpSysTick)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	sysTick = (uint32_t)tmpSysTick;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4a03      	ldr	r2, [pc, #12]	; (8000818 <SysTick_Set+0x1c>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	200000d4 	.word	0x200000d4

0800081c <UART_Init>:
#include "UART.h"

UART_HandleTypeDef huart1;

void UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <UART_Init+0x4c>)
 8000854:	f001 fb14 	bl	8001e80 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f001 ffe5 	bl	800282c <Error_Handler>
  }

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000d8 	.word	0x200000d8
 800086c:	40011000 	.word	0x40011000

08000870 <Print_Msg>:

void Print_Msg(char *format,...)
{
 8000870:	b40f      	push	{r0, r1, r2, r3}
 8000872:	b580      	push	{r7, lr}
 8000874:	b096      	sub	sp, #88	; 0x58
 8000876:	af00      	add	r7, sp, #0
	char str[80];
	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000878:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800087c:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fa22 	bl	8002cd0 <vsiprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fcad 	bl	80001f0 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	f107 0108 	add.w	r1, r7, #8
 800089e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <Print_Msg+0x48>)
 80008a4:	f001 fb39 	bl	8001f1a <HAL_UART_Transmit>
	va_end(args);
}
 80008a8:	bf00      	nop
 80008aa:	3758      	adds	r7, #88	; 0x58
 80008ac:	46bd      	mov	sp, r7
 80008ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008b2:	b004      	add	sp, #16
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	200000d8 	.word	0x200000d8

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <HAL_Init+0x40>)
 80008c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_Init+0x40>)
 80008d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_Init+0x40>)
 80008de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f92b 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f001 ffa2 	bl	8002838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023c00 	.word	0x40023c00

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f943 	bl	8000baa <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800093c:	f000 f90b 	bl	8000b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004
 800095c:	20000000 	.word	0x20000000

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x20>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_IncTick+0x24>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_IncTick+0x24>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000004 	.word	0x20000004
 8000984:	2000011c 	.word	0x2000011c

08000988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_GetTick+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2000011c 	.word	0x2000011c

080009a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4907      	ldr	r1, [pc, #28]	; (8000a3c <__NVIC_EnableIRQ+0x38>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	; 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b20:	f7ff ff8e 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff29 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff3e 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff8e 	bl	8000a94 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff31 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffa2 	bl	8000afc <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000bc6:	f000 f802 	bl	8000bce <HAL_SYSTICK_Callback>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	e177      	b.n	8000ee8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f040 8166 	bne.w	8000ee2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d005      	beq.n	8000c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d130      	bne.n	8000c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	f003 0201 	and.w	r2, r3, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d017      	beq.n	8000ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d123      	bne.n	8000d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	69b9      	ldr	r1, [r7, #24]
 8000d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0203 	and.w	r2, r3, #3
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f000 80c0 	beq.w	8000ee2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <HAL_GPIO_Init+0x324>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a65      	ldr	r2, [pc, #404]	; (8000f00 <HAL_GPIO_Init+0x324>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <HAL_GPIO_Init+0x324>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d7e:	4a61      	ldr	r2, [pc, #388]	; (8000f04 <HAL_GPIO_Init+0x328>)
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3302      	adds	r3, #2
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	220f      	movs	r2, #15
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a58      	ldr	r2, [pc, #352]	; (8000f08 <HAL_GPIO_Init+0x32c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d037      	beq.n	8000e1a <HAL_GPIO_Init+0x23e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a57      	ldr	r2, [pc, #348]	; (8000f0c <HAL_GPIO_Init+0x330>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d031      	beq.n	8000e16 <HAL_GPIO_Init+0x23a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a56      	ldr	r2, [pc, #344]	; (8000f10 <HAL_GPIO_Init+0x334>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d02b      	beq.n	8000e12 <HAL_GPIO_Init+0x236>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a55      	ldr	r2, [pc, #340]	; (8000f14 <HAL_GPIO_Init+0x338>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d025      	beq.n	8000e0e <HAL_GPIO_Init+0x232>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a54      	ldr	r2, [pc, #336]	; (8000f18 <HAL_GPIO_Init+0x33c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d01f      	beq.n	8000e0a <HAL_GPIO_Init+0x22e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a53      	ldr	r2, [pc, #332]	; (8000f1c <HAL_GPIO_Init+0x340>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d019      	beq.n	8000e06 <HAL_GPIO_Init+0x22a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a52      	ldr	r2, [pc, #328]	; (8000f20 <HAL_GPIO_Init+0x344>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0x226>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a51      	ldr	r2, [pc, #324]	; (8000f24 <HAL_GPIO_Init+0x348>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00d      	beq.n	8000dfe <HAL_GPIO_Init+0x222>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a50      	ldr	r2, [pc, #320]	; (8000f28 <HAL_GPIO_Init+0x34c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d007      	beq.n	8000dfa <HAL_GPIO_Init+0x21e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4f      	ldr	r2, [pc, #316]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_Init+0x21a>
 8000df2:	2309      	movs	r3, #9
 8000df4:	e012      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000df6:	230a      	movs	r3, #10
 8000df8:	e010      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	e00e      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000dfe:	2307      	movs	r3, #7
 8000e00:	e00c      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000e02:	2306      	movs	r3, #6
 8000e04:	e00a      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000e06:	2305      	movs	r3, #5
 8000e08:	e008      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e004      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e002      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <HAL_GPIO_Init+0x240>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	f002 0203 	and.w	r2, r2, #3
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	4093      	lsls	r3, r2
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2c:	4935      	ldr	r1, [pc, #212]	; (8000f04 <HAL_GPIO_Init+0x328>)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <HAL_GPIO_Init+0x354>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e5e:	4a34      	ldr	r2, [pc, #208]	; (8000f30 <HAL_GPIO_Init+0x354>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_GPIO_Init+0x354>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e88:	4a29      	ldr	r2, [pc, #164]	; (8000f30 <HAL_GPIO_Init+0x354>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_GPIO_Init+0x354>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <HAL_GPIO_Init+0x354>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_GPIO_Init+0x354>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_GPIO_Init+0x354>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	f67f ae84 	bls.w	8000bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40013800 	.word	0x40013800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40021400 	.word	0x40021400
 8000f20:	40021800 	.word	0x40021800
 8000f24:	40021c00 	.word	0x40021c00
 8000f28:	40022000 	.word	0x40022000
 8000f2c:	40022400 	.word	0x40022400
 8000f30:	40013c00 	.word	0x40013c00

08000f34 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	041a      	lsls	r2, r3, #16
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43d9      	mvns	r1, r3
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	400b      	ands	r3, r1
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_PWREx_EnableOverDrive+0x94>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f94:	f7ff fcf8 	bl	8000988 <HAL_GetTick>
 8000f98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f9a:	e009      	b.n	8000fb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f9c:	f7ff fcf4 	bl	8000988 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000faa:	d901      	bls.n	8000fb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e01f      	b.n	8000ff0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d1ee      	bne.n	8000f9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff fce0 	bl	8000988 <HAL_GetTick>
 8000fc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fca:	e009      	b.n	8000fe0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fcc:	f7ff fcdc 	bl	8000988 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fda:	d901      	bls.n	8000fe0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e007      	b.n	8000ff0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fec:	d1ee      	bne.n	8000fcc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	420e0040 	.word	0x420e0040
 8001000:	40007000 	.word	0x40007000
 8001004:	420e0044 	.word	0x420e0044

08001008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e267      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d075      	beq.n	8001112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001026:	4b88      	ldr	r3, [pc, #544]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b04      	cmp	r3, #4
 8001030:	d00c      	beq.n	800104c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001032:	4b85      	ldr	r3, [pc, #532]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103a:	2b08      	cmp	r3, #8
 800103c:	d112      	bne.n	8001064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103e:	4b82      	ldr	r3, [pc, #520]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800104a:	d10b      	bne.n	8001064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	4b7e      	ldr	r3, [pc, #504]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d05b      	beq.n	8001110 <HAL_RCC_OscConfig+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d157      	bne.n	8001110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e242      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d106      	bne.n	800107c <HAL_RCC_OscConfig+0x74>
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a75      	ldr	r2, [pc, #468]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e01d      	b.n	80010b8 <HAL_RCC_OscConfig+0xb0>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x98>
 8001086:	4b70      	ldr	r3, [pc, #448]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a6f      	ldr	r2, [pc, #444]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6c      	ldr	r2, [pc, #432]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0xb0>
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a68      	ldr	r2, [pc, #416]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a65      	ldr	r2, [pc, #404]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc62 	bl	8000988 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fc5e 	bl	8000988 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e207      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0xc0>
 80010e6:	e014      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc4e 	bl	8000988 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fc4a 	bl	8000988 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1f3      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	4b51      	ldr	r3, [pc, #324]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0xe8>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d063      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111e:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001132:	2b08      	cmp	r3, #8
 8001134:	d11c      	bne.n	8001170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d116      	bne.n	8001170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x152>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e1c7      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	e03a      	b.n	80011e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_RCC_OscConfig+0x244>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117e:	f7ff fc03 	bl	8000988 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fbff 	bl	8000988 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1a8      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4925      	ldr	r1, [pc, #148]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e015      	b.n	80011e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_RCC_OscConfig+0x244>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fbe2 	bl	8000988 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fbde 	bl	8000988 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e187      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d036      	beq.n	8001260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d016      	beq.n	8001228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_RCC_OscConfig+0x248>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001200:	f7ff fbc2 	bl	8000988 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fbbe 	bl	8000988 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e167      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800121c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x200>
 8001226:	e01b      	b.n	8001260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_RCC_OscConfig+0x248>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fbab 	bl	8000988 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001234:	e00e      	b.n	8001254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001236:	f7ff fba7 	bl	8000988 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d907      	bls.n	8001254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e150      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
 8001248:	40023800 	.word	0x40023800
 800124c:	42470000 	.word	0x42470000
 8001250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ea      	bne.n	8001236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8097 	beq.w	800139c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001272:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10f      	bne.n	800129e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b7d      	ldr	r3, [pc, #500]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a7c      	ldr	r2, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b77      	ldr	r3, [pc, #476]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a73      	ldr	r2, [pc, #460]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb67 	bl	8000988 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fb63 	bl	8000988 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e10c      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2ea>
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e8:	4a63      	ldr	r2, [pc, #396]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6713      	str	r3, [r2, #112]	; 0x70
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x324>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x30c>
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fe:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6713      	str	r3, [r2, #112]	; 0x70
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130a:	4a5b      	ldr	r2, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6713      	str	r3, [r2, #112]	; 0x70
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0x324>
 8001314:	4b58      	ldr	r3, [pc, #352]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a57      	ldr	r2, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001324:	4a54      	ldr	r2, [pc, #336]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d015      	beq.n	8001360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001334:	f7ff fb28 	bl	8000988 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fb24 	bl	8000988 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0cb      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0ee      	beq.n	800133c <HAL_RCC_OscConfig+0x334>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fb12 	bl	8000988 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001368:	f7ff fb0e 	bl	8000988 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e0b5      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1ee      	bne.n	8001368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a38      	ldr	r2, [pc, #224]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a1 	beq.w	80014e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d05c      	beq.n	800146c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d141      	bne.n	800143e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fae2 	bl	8000988 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fade 	bl	8000988 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e087      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69da      	ldr	r2, [r3, #28]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	491b      	ldr	r1, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fab7 	bl	8000988 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fab3 	bl	8000988 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e05c      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x416>
 800143c:	e054      	b.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff faa0 	bl	8000988 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fa9c 	bl	8000988 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e045      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x444>
 800146a:	e03d      	b.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d107      	bne.n	8001484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e038      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000
 8001480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x4ec>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d028      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d121      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d11a      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014bc:	4293      	cmp	r3, r2
 80014be:	d111      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	3b01      	subs	r3, #1
 80014ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0cc      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 030f 	and.w	r3, r3, #15
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d90c      	bls.n	8001534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0b8      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154c:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800156e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	494d      	ldr	r1, [pc, #308]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d044      	beq.n	8001618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d119      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e07f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e067      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 0203 	bic.w	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4934      	ldr	r1, [pc, #208]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e8:	f7ff f9ce 	bl	8000988 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff f9ca 	bl	8000988 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e04f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 020c 	and.w	r2, r3, #12
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	429a      	cmp	r2, r3
 8001616:	d1eb      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d20c      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e032      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4916      	ldr	r1, [pc, #88]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167e:	f000 f821 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	490a      	ldr	r1, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f92e 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00
 80016b4:	40023800 	.word	0x40023800
 80016b8:	08003cdc 	.word	0x08003cdc
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000000 	.word	0x20000000

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c8:	b094      	sub	sp, #80	; 0x50
 80016ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
 80016d0:	2300      	movs	r3, #0
 80016d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016d4:	2300      	movs	r3, #0
 80016d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016dc:	4b79      	ldr	r3, [pc, #484]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d00d      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x40>
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f200 80e1 	bhi.w	80018b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x34>
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x3a>
 80016f6:	e0db      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80016fc:	e0db      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016fe:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001702:	e0d8      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800170c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	2200      	movs	r2, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
 8001724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
 8001732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001736:	4622      	mov	r2, r4
 8001738:	462b      	mov	r3, r5
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	0159      	lsls	r1, r3, #5
 8001744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001748:	0150      	lsls	r0, r2, #5
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4621      	mov	r1, r4
 8001750:	1a51      	subs	r1, r2, r1
 8001752:	6139      	str	r1, [r7, #16]
 8001754:	4629      	mov	r1, r5
 8001756:	eb63 0301 	sbc.w	r3, r3, r1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001768:	4659      	mov	r1, fp
 800176a:	018b      	lsls	r3, r1, #6
 800176c:	4651      	mov	r1, sl
 800176e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001772:	4651      	mov	r1, sl
 8001774:	018a      	lsls	r2, r1, #6
 8001776:	4651      	mov	r1, sl
 8001778:	ebb2 0801 	subs.w	r8, r2, r1
 800177c:	4659      	mov	r1, fp
 800177e:	eb63 0901 	sbc.w	r9, r3, r1
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800178e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001796:	4690      	mov	r8, r2
 8001798:	4699      	mov	r9, r3
 800179a:	4623      	mov	r3, r4
 800179c:	eb18 0303 	adds.w	r3, r8, r3
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	462b      	mov	r3, r5
 80017a4:	eb49 0303 	adc.w	r3, r9, r3
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017b6:	4629      	mov	r1, r5
 80017b8:	024b      	lsls	r3, r1, #9
 80017ba:	4621      	mov	r1, r4
 80017bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017c0:	4621      	mov	r1, r4
 80017c2:	024a      	lsls	r2, r1, #9
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ca:	2200      	movs	r2, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017d4:	f7fe fd64 	bl	80002a0 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e0:	e058      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	2200      	movs	r2, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	4611      	mov	r1, r2
 80017ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017fc:	4642      	mov	r2, r8
 80017fe:	464b      	mov	r3, r9
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	0159      	lsls	r1, r3, #5
 800180a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180e:	0150      	lsls	r0, r2, #5
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4641      	mov	r1, r8
 8001816:	ebb2 0a01 	subs.w	sl, r2, r1
 800181a:	4649      	mov	r1, r9
 800181c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800182c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001834:	ebb2 040a 	subs.w	r4, r2, sl
 8001838:	eb63 050b 	sbc.w	r5, r3, fp
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	00eb      	lsls	r3, r5, #3
 8001846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184a:	00e2      	lsls	r2, r4, #3
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	4643      	mov	r3, r8
 8001852:	18e3      	adds	r3, r4, r3
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	464b      	mov	r3, r9
 8001858:	eb45 0303 	adc.w	r3, r5, r3
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186a:	4629      	mov	r1, r5
 800186c:	028b      	lsls	r3, r1, #10
 800186e:	4621      	mov	r1, r4
 8001870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001874:	4621      	mov	r1, r4
 8001876:	028a      	lsls	r2, r1, #10
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187e:	2200      	movs	r2, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	61fa      	str	r2, [r7, #28]
 8001884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001888:	f7fe fd0a 	bl	80002a0 <__aeabi_uldivmod>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4613      	mov	r3, r2
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3750      	adds	r7, #80	; 0x50
 80018bc:	46bd      	mov	sp, r7
 80018be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	007a1200 	.word	0x007a1200

080018d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	08003cec 	.word	0x08003cec

08001910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001914:	f7ff ffdc 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0b5b      	lsrs	r3, r3, #13
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08003cec 	.word	0x08003cec

08001938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e041      	b.n	80019ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 ffa4 	bl	80028ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 f9ce 	bl	8001d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d001      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04e      	b.n	8001a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d022      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x80>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1a:	d01d      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x80>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1f      	ldr	r2, [pc, #124]	; (8001aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d018      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x80>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d013      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x80>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00e      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x80>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <HAL_TIM_Base_Start_IT+0xd4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d009      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x80>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x80>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d111      	bne.n	8001a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d010      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7a:	e007      	b.n	8001a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40000800 	.word	0x40000800
 8001aa8:	40000c00 	.word	0x40000c00
 8001aac:	40010400 	.word	0x40010400
 8001ab0:	40014000 	.word	0x40014000
 8001ab4:	40001800 	.word	0x40001800

08001ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d122      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d11b      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0202 	mvn.w	r2, #2
 8001ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8ee 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8e0 	bl	8001cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8f1 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d122      	bne.n	8001b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d11b      	bne.n	8001b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0204 	mvn.w	r2, #4
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8c4 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8b6 	bl	8001cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8c7 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d122      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d11b      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0208 	mvn.w	r2, #8
 8001b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2204      	movs	r2, #4
 8001b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f89a 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f88c 	bl	8001cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f89d 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d122      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d11b      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0210 	mvn.w	r2, #16
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2208      	movs	r2, #8
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f870 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f862 	bl	8001cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f873 	bl	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10e      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0201 	mvn.w	r2, #1
 8001c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fdc2 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	2b80      	cmp	r3, #128	; 0x80
 8001c48:	d10e      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	2b80      	cmp	r3, #128	; 0x80
 8001c56:	d107      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f902 	bl	8001e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	d10e      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c80:	2b40      	cmp	r3, #64	; 0x40
 8001c82:	d107      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f838 	bl	8001d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d107      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0220 	mvn.w	r2, #32
 8001cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8cc 	bl	8001e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a40      	ldr	r2, [pc, #256]	; (8001e2c <TIM_Base_SetConfig+0x114>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d36:	d00f      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <TIM_Base_SetConfig+0x118>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00b      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3c      	ldr	r2, [pc, #240]	; (8001e34 <TIM_Base_SetConfig+0x11c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3b      	ldr	r2, [pc, #236]	; (8001e38 <TIM_Base_SetConfig+0x120>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <TIM_Base_SetConfig+0x40>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3a      	ldr	r2, [pc, #232]	; (8001e3c <TIM_Base_SetConfig+0x124>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d108      	bne.n	8001d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <TIM_Base_SetConfig+0x114>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02b      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d027      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <TIM_Base_SetConfig+0x118>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d023      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a2b      	ldr	r2, [pc, #172]	; (8001e34 <TIM_Base_SetConfig+0x11c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <TIM_Base_SetConfig+0x120>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01b      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a29      	ldr	r2, [pc, #164]	; (8001e3c <TIM_Base_SetConfig+0x124>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d017      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <TIM_Base_SetConfig+0x128>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <TIM_Base_SetConfig+0x12c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00f      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <TIM_Base_SetConfig+0x130>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00b      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <TIM_Base_SetConfig+0x134>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <TIM_Base_SetConfig+0x138>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d003      	beq.n	8001dca <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <TIM_Base_SetConfig+0x13c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d108      	bne.n	8001ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <TIM_Base_SetConfig+0x114>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d003      	beq.n	8001e10 <TIM_Base_SetConfig+0xf8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <TIM_Base_SetConfig+0x124>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d103      	bne.n	8001e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	615a      	str	r2, [r3, #20]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800
 8001e38:	40000c00 	.word	0x40000c00
 8001e3c:	40010400 	.word	0x40010400
 8001e40:	40014000 	.word	0x40014000
 8001e44:	40014400 	.word	0x40014400
 8001e48:	40014800 	.word	0x40014800
 8001e4c:	40001800 	.word	0x40001800
 8001e50:	40001c00 	.word	0x40001c00
 8001e54:	40002000 	.word	0x40002000

08001e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e03f      	b.n	8001f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fd20 	bl	80028ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f929 	bl	800211c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b08a      	sub	sp, #40	; 0x28
 8001f1e:	af02      	add	r7, sp, #8
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d17c      	bne.n	8002034 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_UART_Transmit+0x2c>
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e075      	b.n	8002036 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_UART_Transmit+0x3e>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e06e      	b.n	8002036 <HAL_UART_Transmit+0x11c>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2221      	movs	r2, #33	; 0x21
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f6e:	f7fe fd0b 	bl	8000988 <HAL_GetTick>
 8001f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	88fa      	ldrh	r2, [r7, #6]
 8001f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	88fa      	ldrh	r2, [r7, #6]
 8001f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f88:	d108      	bne.n	8001f9c <HAL_UART_Transmit+0x82>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d104      	bne.n	8001f9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e003      	b.n	8001fa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fac:	e02a      	b.n	8002004 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f840 	bl	800203e <UART_WaitOnFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e036      	b.n	8002036 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	e007      	b.n	8001ff6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1cf      	bne.n	8001fae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2200      	movs	r2, #0
 8002016:	2140      	movs	r1, #64	; 0x40
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f810 	bl	800203e <UART_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e006      	b.n	8002036 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	e000      	b.n	8002036 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
  }
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b090      	sub	sp, #64	; 0x40
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204e:	e050      	b.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002056:	d04c      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <UART_WaitOnFlagUntilTimeout+0x30>
 800205e:	f7fe fc93 	bl	8000988 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800206a:	429a      	cmp	r2, r3
 800206c:	d241      	bcs.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	330c      	adds	r3, #12
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	e853 3f00 	ldrex	r3, [r3]
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	330c      	adds	r3, #12
 800208c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800208e:	637a      	str	r2, [r7, #52]	; 0x34
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002096:	e841 2300 	strex	r3, r2, [r1]
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1e5      	bne.n	800206e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3314      	adds	r3, #20
 80020a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	e853 3f00 	ldrex	r3, [r3]
 80020b0:	613b      	str	r3, [r7, #16]
   return(result);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3314      	adds	r3, #20
 80020c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c2:	623a      	str	r2, [r7, #32]
 80020c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c6:	69f9      	ldr	r1, [r7, #28]
 80020c8:	6a3a      	ldr	r2, [r7, #32]
 80020ca:	e841 2300 	strex	r3, r2, [r1]
 80020ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e5      	bne.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e00f      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	429a      	cmp	r2, r3
 800210e:	d09f      	beq.n	8002050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3740      	adds	r7, #64	; 0x40
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800211c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002120:	b0c0      	sub	sp, #256	; 0x100
 8002122:	af00      	add	r7, sp, #0
 8002124:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	68d9      	ldr	r1, [r3, #12]
 800213a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	ea40 0301 	orr.w	r3, r0, r1
 8002144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	431a      	orrs	r2, r3
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	431a      	orrs	r2, r3
 800215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002174:	f021 010c 	bic.w	r1, r1, #12
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002182:	430b      	orrs	r3, r1
 8002184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002196:	6999      	ldr	r1, [r3, #24]
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	ea40 0301 	orr.w	r3, r0, r1
 80021a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <UART_SetConfig+0x2cc>)
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d005      	beq.n	80021bc <UART_SetConfig+0xa0>
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b8d      	ldr	r3, [pc, #564]	; (80023ec <UART_SetConfig+0x2d0>)
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d104      	bne.n	80021c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021bc:	f7ff fba8 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 80021c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021c4:	e003      	b.n	80021ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021c6:	f7ff fb8f 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80021ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d8:	f040 810c 	bne.w	80023f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021e0:	2200      	movs	r2, #0
 80021e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	1891      	adds	r1, r2, r2
 80021f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80021f6:	415b      	adcs	r3, r3
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021fe:	4621      	mov	r1, r4
 8002200:	eb12 0801 	adds.w	r8, r2, r1
 8002204:	4629      	mov	r1, r5
 8002206:	eb43 0901 	adc.w	r9, r3, r1
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800221a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800221e:	4690      	mov	r8, r2
 8002220:	4699      	mov	r9, r3
 8002222:	4623      	mov	r3, r4
 8002224:	eb18 0303 	adds.w	r3, r8, r3
 8002228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800222c:	462b      	mov	r3, r5
 800222e:	eb49 0303 	adc.w	r3, r9, r3
 8002232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002242:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800224a:	460b      	mov	r3, r1
 800224c:	18db      	adds	r3, r3, r3
 800224e:	653b      	str	r3, [r7, #80]	; 0x50
 8002250:	4613      	mov	r3, r2
 8002252:	eb42 0303 	adc.w	r3, r2, r3
 8002256:	657b      	str	r3, [r7, #84]	; 0x54
 8002258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800225c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002260:	f7fe f81e 	bl	80002a0 <__aeabi_uldivmod>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <UART_SetConfig+0x2d4>)
 800226a:	fba3 2302 	umull	r2, r3, r3, r2
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	011c      	lsls	r4, r3, #4
 8002272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002276:	2200      	movs	r2, #0
 8002278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800227c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002284:	4642      	mov	r2, r8
 8002286:	464b      	mov	r3, r9
 8002288:	1891      	adds	r1, r2, r2
 800228a:	64b9      	str	r1, [r7, #72]	; 0x48
 800228c:	415b      	adcs	r3, r3
 800228e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002294:	4641      	mov	r1, r8
 8002296:	eb12 0a01 	adds.w	sl, r2, r1
 800229a:	4649      	mov	r1, r9
 800229c:	eb43 0b01 	adc.w	fp, r3, r1
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022b4:	4692      	mov	sl, r2
 80022b6:	469b      	mov	fp, r3
 80022b8:	4643      	mov	r3, r8
 80022ba:	eb1a 0303 	adds.w	r3, sl, r3
 80022be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022c2:	464b      	mov	r3, r9
 80022c4:	eb4b 0303 	adc.w	r3, fp, r3
 80022c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022e0:	460b      	mov	r3, r1
 80022e2:	18db      	adds	r3, r3, r3
 80022e4:	643b      	str	r3, [r7, #64]	; 0x40
 80022e6:	4613      	mov	r3, r2
 80022e8:	eb42 0303 	adc.w	r3, r2, r3
 80022ec:	647b      	str	r3, [r7, #68]	; 0x44
 80022ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022f6:	f7fd ffd3 	bl	80002a0 <__aeabi_uldivmod>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4611      	mov	r1, r2
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <UART_SetConfig+0x2d4>)
 8002302:	fba3 2301 	umull	r2, r3, r3, r1
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2264      	movs	r2, #100	; 0x64
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	1acb      	subs	r3, r1, r3
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <UART_SetConfig+0x2d4>)
 8002318:	fba3 2302 	umull	r2, r3, r3, r2
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002324:	441c      	add	r4, r3
 8002326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800232a:	2200      	movs	r2, #0
 800232c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002330:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002338:	4642      	mov	r2, r8
 800233a:	464b      	mov	r3, r9
 800233c:	1891      	adds	r1, r2, r2
 800233e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002340:	415b      	adcs	r3, r3
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002348:	4641      	mov	r1, r8
 800234a:	1851      	adds	r1, r2, r1
 800234c:	6339      	str	r1, [r7, #48]	; 0x30
 800234e:	4649      	mov	r1, r9
 8002350:	414b      	adcs	r3, r1
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002360:	4659      	mov	r1, fp
 8002362:	00cb      	lsls	r3, r1, #3
 8002364:	4651      	mov	r1, sl
 8002366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800236a:	4651      	mov	r1, sl
 800236c:	00ca      	lsls	r2, r1, #3
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	4603      	mov	r3, r0
 8002374:	4642      	mov	r2, r8
 8002376:	189b      	adds	r3, r3, r2
 8002378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800237c:	464b      	mov	r3, r9
 800237e:	460a      	mov	r2, r1
 8002380:	eb42 0303 	adc.w	r3, r2, r3
 8002384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002394:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800239c:	460b      	mov	r3, r1
 800239e:	18db      	adds	r3, r3, r3
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a2:	4613      	mov	r3, r2
 80023a4:	eb42 0303 	adc.w	r3, r2, r3
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023b2:	f7fd ff75 	bl	80002a0 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <UART_SetConfig+0x2d4>)
 80023bc:	fba3 1302 	umull	r1, r3, r3, r2
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	2164      	movs	r1, #100	; 0x64
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	3332      	adds	r3, #50	; 0x32
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <UART_SetConfig+0x2d4>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	f003 0207 	and.w	r2, r3, #7
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4422      	add	r2, r4
 80023e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023e4:	e105      	b.n	80025f2 <UART_SetConfig+0x4d6>
 80023e6:	bf00      	nop
 80023e8:	40011000 	.word	0x40011000
 80023ec:	40011400 	.word	0x40011400
 80023f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f8:	2200      	movs	r2, #0
 80023fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002406:	4642      	mov	r2, r8
 8002408:	464b      	mov	r3, r9
 800240a:	1891      	adds	r1, r2, r2
 800240c:	6239      	str	r1, [r7, #32]
 800240e:	415b      	adcs	r3, r3
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002416:	4641      	mov	r1, r8
 8002418:	1854      	adds	r4, r2, r1
 800241a:	4649      	mov	r1, r9
 800241c:	eb43 0501 	adc.w	r5, r3, r1
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	00eb      	lsls	r3, r5, #3
 800242a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800242e:	00e2      	lsls	r2, r4, #3
 8002430:	4614      	mov	r4, r2
 8002432:	461d      	mov	r5, r3
 8002434:	4643      	mov	r3, r8
 8002436:	18e3      	adds	r3, r4, r3
 8002438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800243c:	464b      	mov	r3, r9
 800243e:	eb45 0303 	adc.w	r3, r5, r3
 8002442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002462:	4629      	mov	r1, r5
 8002464:	008b      	lsls	r3, r1, #2
 8002466:	4621      	mov	r1, r4
 8002468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800246c:	4621      	mov	r1, r4
 800246e:	008a      	lsls	r2, r1, #2
 8002470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002474:	f7fd ff14 	bl	80002a0 <__aeabi_uldivmod>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4b60      	ldr	r3, [pc, #384]	; (8002600 <UART_SetConfig+0x4e4>)
 800247e:	fba3 2302 	umull	r2, r3, r3, r2
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	011c      	lsls	r4, r3, #4
 8002486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800248a:	2200      	movs	r2, #0
 800248c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002490:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002498:	4642      	mov	r2, r8
 800249a:	464b      	mov	r3, r9
 800249c:	1891      	adds	r1, r2, r2
 800249e:	61b9      	str	r1, [r7, #24]
 80024a0:	415b      	adcs	r3, r3
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a8:	4641      	mov	r1, r8
 80024aa:	1851      	adds	r1, r2, r1
 80024ac:	6139      	str	r1, [r7, #16]
 80024ae:	4649      	mov	r1, r9
 80024b0:	414b      	adcs	r3, r1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024c0:	4659      	mov	r1, fp
 80024c2:	00cb      	lsls	r3, r1, #3
 80024c4:	4651      	mov	r1, sl
 80024c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ca:	4651      	mov	r1, sl
 80024cc:	00ca      	lsls	r2, r1, #3
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	4642      	mov	r2, r8
 80024d6:	189b      	adds	r3, r3, r2
 80024d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024dc:	464b      	mov	r3, r9
 80024de:	460a      	mov	r2, r1
 80024e0:	eb42 0303 	adc.w	r3, r2, r3
 80024e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80024f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002500:	4649      	mov	r1, r9
 8002502:	008b      	lsls	r3, r1, #2
 8002504:	4641      	mov	r1, r8
 8002506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800250a:	4641      	mov	r1, r8
 800250c:	008a      	lsls	r2, r1, #2
 800250e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002512:	f7fd fec5 	bl	80002a0 <__aeabi_uldivmod>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4b39      	ldr	r3, [pc, #228]	; (8002600 <UART_SetConfig+0x4e4>)
 800251c:	fba3 1302 	umull	r1, r3, r3, r2
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	2164      	movs	r1, #100	; 0x64
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	3332      	adds	r3, #50	; 0x32
 800252e:	4a34      	ldr	r2, [pc, #208]	; (8002600 <UART_SetConfig+0x4e4>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800253a:	441c      	add	r4, r3
 800253c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002540:	2200      	movs	r2, #0
 8002542:	673b      	str	r3, [r7, #112]	; 0x70
 8002544:	677a      	str	r2, [r7, #116]	; 0x74
 8002546:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800254a:	4642      	mov	r2, r8
 800254c:	464b      	mov	r3, r9
 800254e:	1891      	adds	r1, r2, r2
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	415b      	adcs	r3, r3
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800255a:	4641      	mov	r1, r8
 800255c:	1851      	adds	r1, r2, r1
 800255e:	6039      	str	r1, [r7, #0]
 8002560:	4649      	mov	r1, r9
 8002562:	414b      	adcs	r3, r1
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002572:	4659      	mov	r1, fp
 8002574:	00cb      	lsls	r3, r1, #3
 8002576:	4651      	mov	r1, sl
 8002578:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800257c:	4651      	mov	r1, sl
 800257e:	00ca      	lsls	r2, r1, #3
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	4603      	mov	r3, r0
 8002586:	4642      	mov	r2, r8
 8002588:	189b      	adds	r3, r3, r2
 800258a:	66bb      	str	r3, [r7, #104]	; 0x68
 800258c:	464b      	mov	r3, r9
 800258e:	460a      	mov	r2, r1
 8002590:	eb42 0303 	adc.w	r3, r2, r3
 8002594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	663b      	str	r3, [r7, #96]	; 0x60
 80025a0:	667a      	str	r2, [r7, #100]	; 0x64
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025ae:	4649      	mov	r1, r9
 80025b0:	008b      	lsls	r3, r1, #2
 80025b2:	4641      	mov	r1, r8
 80025b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025b8:	4641      	mov	r1, r8
 80025ba:	008a      	lsls	r2, r1, #2
 80025bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025c0:	f7fd fe6e 	bl	80002a0 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <UART_SetConfig+0x4e4>)
 80025ca:	fba3 1302 	umull	r1, r3, r3, r2
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2164      	movs	r1, #100	; 0x64
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	3332      	adds	r3, #50	; 0x32
 80025dc:	4a08      	ldr	r2, [pc, #32]	; (8002600 <UART_SetConfig+0x4e4>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	f003 020f 	and.w	r2, r3, #15
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4422      	add	r2, r4
 80025f0:	609a      	str	r2, [r3, #8]
}
 80025f2:	bf00      	nop
 80025f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025f8:	46bd      	mov	sp, r7
 80025fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fe:	bf00      	nop
 8002600:	51eb851f 	.word	0x51eb851f

08002604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002606:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002608:	f000 fa92 	bl	8002b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <LoopForever+0x6>)
  ldr r1, =_edata
 800260e:	490d      	ldr	r1, [pc, #52]	; (8002644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <LoopForever+0xe>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002624:	4c0a      	ldr	r4, [pc, #40]	; (8002650 <LoopForever+0x16>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002632:	f000 fa95 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002636:	f000 f80f 	bl	8002658 <main>

0800263a <LoopForever>:

LoopForever:
  b LoopForever
 800263a:	e7fe      	b.n	800263a <LoopForever>
  ldr   r0, =_estack
 800263c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002644:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002648:	08003d9c 	.word	0x08003d9c
  ldr r2, =_sbss
 800264c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002650:	20000144 	.word	0x20000144

08002654 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002654:	e7fe      	b.n	8002654 <ADC_IRQHandler>
	...

08002658 <main>:
uint32_t led1_Counter = 0;
uint32_t led2_Counter = 0;
uint32_t uart_Counter = 0;
uint32_t i = 0;
int main(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	HAL_Init();
 800265c:	f7fe f92e 	bl	80008bc <HAL_Init>
	SystemClock_Config();
 8002660:	f000 f874 	bl	800274c <SystemClock_Config>

	Clock_Enable(GPIOG);
 8002664:	4832      	ldr	r0, [pc, #200]	; (8002730 <main+0xd8>)
 8002666:	f7fd ffbd 	bl	80005e4 <Clock_Enable>
	Timer_Init(TIM6);
 800266a:	4832      	ldr	r0, [pc, #200]	; (8002734 <main+0xdc>)
 800266c:	f7fe f882 	bl	8000774 <Timer_Init>
	UART_Init();
 8002670:	f7fe f8d4 	bl	800081c <UART_Init>
	GPIO_Init(GPIOG, GPIO_PIN_14);
 8002674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002678:	482d      	ldr	r0, [pc, #180]	; (8002730 <main+0xd8>)
 800267a:	f7fd ff93 	bl	80005a4 <GPIO_Init>
	GPIO_Init(GPIOG, GPIO_PIN_13);
 800267e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002682:	482b      	ldr	r0, [pc, #172]	; (8002730 <main+0xd8>)
 8002684:	f7fd ff8e 	bl	80005a4 <GPIO_Init>
	Timer_Start_IT();
 8002688:	f7fe f890 	bl	80007ac <Timer_Start_IT>

	/* Loop forever */
	for(;;)
	{

		if(SysTick_Get() > 0)
 800268c:	f7fe f8aa 	bl	80007e4 <SysTick_Get>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0fa      	beq.n	800268c <main+0x34>
		{

			led1_Counter += SysTick_Get();
 8002696:	f7fe f8a5 	bl	80007e4 <SysTick_Get>
 800269a:	4602      	mov	r2, r0
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <main+0xe0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a25      	ldr	r2, [pc, #148]	; (8002738 <main+0xe0>)
 80026a4:	6013      	str	r3, [r2, #0]
			led2_Counter += SysTick_Get();
 80026a6:	f7fe f89d 	bl	80007e4 <SysTick_Get>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <main+0xe4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <main+0xe4>)
 80026b4:	6013      	str	r3, [r2, #0]
			uart_Counter += SysTick_Get();
 80026b6:	f7fe f895 	bl	80007e4 <SysTick_Get>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <main+0xe8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <main+0xe8>)
 80026c4:	6013      	str	r3, [r2, #0]
			SysTick_Set(0);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7fe f898 	bl	80007fc <SysTick_Set>
			if(led1_Counter >= 100)
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <main+0xe0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b63      	cmp	r3, #99	; 0x63
 80026d2:	d907      	bls.n	80026e4 <main+0x8c>
			{
				led1_Counter = 0;
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <main+0xe0>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
				GPIO_Pin_Toggle(GPIOG, GPIO_PIN_13);
 80026da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026de:	4814      	ldr	r0, [pc, #80]	; (8002730 <main+0xd8>)
 80026e0:	f7fe f838 	bl	8000754 <GPIO_Pin_Toggle>
			}
			if(led2_Counter >= 100)
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <main+0xe4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b63      	cmp	r3, #99	; 0x63
 80026ea:	d907      	bls.n	80026fc <main+0xa4>
			{
				led2_Counter = 0;
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <main+0xe4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
				GPIO_Pin_Toggle(GPIOG, GPIO_PIN_14);
 80026f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026f6:	480e      	ldr	r0, [pc, #56]	; (8002730 <main+0xd8>)
 80026f8:	f7fe f82c 	bl	8000754 <GPIO_Pin_Toggle>
			}
			if(uart_Counter >= 10)
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <main+0xe8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b09      	cmp	r3, #9
 8002702:	d9c3      	bls.n	800268c <main+0x34>
			{
				uart_Counter = 0;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <main+0xe8>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
				Print_Msg("Hello From STM32F429 %d\r\n", i++);
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <main+0xec>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	490c      	ldr	r1, [pc, #48]	; (8002744 <main+0xec>)
 8002712:	600a      	str	r2, [r1, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	480c      	ldr	r0, [pc, #48]	; (8002748 <main+0xf0>)
 8002718:	f7fe f8aa 	bl	8000870 <Print_Msg>
				if(i == (65535))
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <main+0xec>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002724:	4293      	cmp	r3, r2
 8002726:	d1b1      	bne.n	800268c <main+0x34>
				{
					i = 0;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <main+0xec>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
		if(SysTick_Get() > 0)
 800272e:	e7ad      	b.n	800268c <main+0x34>
 8002730:	40021800 	.word	0x40021800
 8002734:	40001000 	.word	0x40001000
 8002738:	20000120 	.word	0x20000120
 800273c:	20000124 	.word	0x20000124
 8002740:	20000128 	.word	0x20000128
 8002744:	2000012c 	.word	0x2000012c
 8002748:	08003cc0 	.word	0x08003cc0

0800274c <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b094      	sub	sp, #80	; 0x50
 8002750:	af00      	add	r7, sp, #0
	/*    Configure processor to run at full speed i.e 180Mhz */
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002752:	f107 0320 	add.w	r3, r7, #32
 8002756:	2230      	movs	r2, #48	; 0x30
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fa24 	bl	8002ba8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <SystemClock_Config+0xd8>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <SystemClock_Config+0xd8>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277e:	6413      	str	r3, [r2, #64]	; 0x40
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <SystemClock_Config+0xd8>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	4b25      	ldr	r3, [pc, #148]	; (8002828 <SystemClock_Config+0xdc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a24      	ldr	r2, [pc, #144]	; (8002828 <SystemClock_Config+0xdc>)
 8002796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b22      	ldr	r3, [pc, #136]	; (8002828 <SystemClock_Config+0xdc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a8:	2301      	movs	r3, #1
 80027aa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b2:	2302      	movs	r3, #2
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80027bc:	2304      	movs	r3, #4
 80027be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 80027c0:	2350      	movs	r3, #80	; 0x50
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80027c8:	2307      	movs	r3, #7
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fc19 	bl	8001008 <HAL_RCC_OscConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80027dc:	f000 f826 	bl	800282c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027e0:	f7fe fbc2 	bl	8000f68 <HAL_PWREx_EnableOverDrive>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80027ea:	f000 f81f 	bl	800282c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ee:	230f      	movs	r3, #15
 80027f0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f2:	2302      	movs	r3, #2
 80027f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027fe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002804:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	2105      	movs	r1, #5
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fe73 	bl	80014f8 <HAL_RCC_ClockConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8002818:	f000 f808 	bl	800282c <Error_Handler>
	}
}
 800281c:	bf00      	nop
 800281e:	3750      	adds	r7, #80	; 0x50
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000

0800282c <Error_Handler>:

void Error_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002830:	b672      	cpsid	i
}
 8002832:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002834:	e7fe      	b.n	8002834 <Error_Handler+0x8>
	...

08002838 <HAL_MspInit>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"


void HAL_MspInit(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_MspInit+0x70>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_MspInit+0x70>)
 8002848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284c:	6453      	str	r3, [r2, #68]	; 0x44
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_MspInit+0x70>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_MspInit+0x70>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_MspInit+0x70>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_MspInit+0x70>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002876:	2007      	movs	r0, #7
 8002878:	f7fe f962 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/

	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	f06f 000b 	mvn.w	r0, #11
 8002884:	f7fe f967 	bl	8000b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	f06f 000a 	mvn.w	r0, #10
 8002890:	f7fe f961 	bl	8000b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	f06f 0009 	mvn.w	r0, #9
 800289c:	f7fe f95b 	bl	8000b56 <HAL_NVIC_SetPriority>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_TIM_Base_MspInit+0x3c>)
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_TIM_Base_MspInit+0x3c>)
 80028be:	f043 0310 	orr.w	r3, r3, #16
 80028c2:	6413      	str	r3, [r2, #64]	; 0x40
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_TIM_Base_MspInit+0x3c>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028d0:	2036      	movs	r0, #54	; 0x36
 80028d2:	f7fe f95c 	bl	8000b8e <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	210f      	movs	r1, #15
 80028da:	2036      	movs	r0, #54	; 0x36
 80028dc:	f7fe f93b 	bl	8000b56 <HAL_NVIC_SetPriority>

}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_UART_MspInit+0x84>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d12c      	bne.n	8002968 <HAL_UART_MspInit+0x7c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002918:	f043 0310 	orr.w	r3, r3, #16
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_UART_MspInit+0x88>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002946:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002958:	2307      	movs	r3, #7
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	4805      	ldr	r0, [pc, #20]	; (8002978 <HAL_UART_MspInit+0x8c>)
 8002964:	f7fe f93a 	bl	8000bdc <HAL_GPIO_Init>

  }

}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40011000 	.word	0x40011000
 8002974:	40023800 	.word	0x40023800
 8002978:	40020000 	.word	0x40020000

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <NMI_Handler+0x4>

08002982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <MemManage_Handler+0x4>

0800298e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler+0x4>

0800299a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80029c8:	f7fd ffca 	bl	8000960 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80029cc:	f7fe f8f9 	bl	8000bc2 <HAL_SYSTICK_IRQHandler>
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <TIM6_DAC_IRQHandler>:

extern TIM_HandleTypeDef htim;


void TIM6_DAC_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <TIM6_DAC_IRQHandler+0x10>)
 80029da:	f7ff f86d 	bl	8001ab8 <HAL_TIM_IRQHandler>

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000008c 	.word	0x2000008c

080029e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	e00a      	b.n	8002a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029fa:	f3af 8000 	nop.w
 80029fe:	4601      	mov	r1, r0
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	60ba      	str	r2, [r7, #8]
 8002a06:	b2ca      	uxtb	r2, r1
 8002a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	dbf0      	blt.n	80029fa <_read+0x12>
  }

  return len;
 8002a18:	687b      	ldr	r3, [r7, #4]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e009      	b.n	8002a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	60ba      	str	r2, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dbf1      	blt.n	8002a34 <_write+0x12>
  }
  return len;
 8002a50:	687b      	ldr	r3, [r7, #4]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_close>:

int _close(int file)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a82:	605a      	str	r2, [r3, #4]
  return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <_isatty>:

int _isatty(int file)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a9a:	2301      	movs	r3, #1
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <_sbrk+0x5c>)
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <_sbrk+0x60>)
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <_sbrk+0x64>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <_sbrk+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af4:	f000 f82e 	bl	8002b54 <__errno>
 8002af8:	4603      	mov	r3, r0
 8002afa:	220c      	movs	r2, #12
 8002afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b02:	e009      	b.n	8002b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <_sbrk+0x64>)
 8002b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20030000 	.word	0x20030000
 8002b24:	00000400 	.word	0x00000400
 8002b28:	20000130 	.word	0x20000130
 8002b2c:	20000148 	.word	0x20000148

08002b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <SystemInit+0x20>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <SystemInit+0x20>)
 8002b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__errno>:
 8002b54:	4b01      	ldr	r3, [pc, #4]	; (8002b5c <__errno+0x8>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4d0d      	ldr	r5, [pc, #52]	; (8002b98 <__libc_init_array+0x38>)
 8002b64:	4c0d      	ldr	r4, [pc, #52]	; (8002b9c <__libc_init_array+0x3c>)
 8002b66:	1b64      	subs	r4, r4, r5
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	42a6      	cmp	r6, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	4d0b      	ldr	r5, [pc, #44]	; (8002ba0 <__libc_init_array+0x40>)
 8002b72:	4c0c      	ldr	r4, [pc, #48]	; (8002ba4 <__libc_init_array+0x44>)
 8002b74:	f001 f88e 	bl	8003c94 <_init>
 8002b78:	1b64      	subs	r4, r4, r5
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	42a6      	cmp	r6, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b88:	4798      	blx	r3
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b92:	4798      	blx	r3
 8002b94:	3601      	adds	r6, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	08003d94 	.word	0x08003d94
 8002b9c:	08003d94 	.word	0x08003d94
 8002ba0:	08003d94 	.word	0x08003d94
 8002ba4:	08003d98 	.word	0x08003d98

08002ba8 <memset>:
 8002ba8:	4402      	add	r2, r0
 8002baa:	4603      	mov	r3, r0
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <memset+0xa>
 8002bb0:	4770      	bx	lr
 8002bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb6:	e7f9      	b.n	8002bac <memset+0x4>

08002bb8 <_puts_r>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	460e      	mov	r6, r1
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	b118      	cbz	r0, 8002bc8 <_puts_r+0x10>
 8002bc0:	6983      	ldr	r3, [r0, #24]
 8002bc2:	b90b      	cbnz	r3, 8002bc8 <_puts_r+0x10>
 8002bc4:	f000 fa68 	bl	8003098 <__sinit>
 8002bc8:	69ab      	ldr	r3, [r5, #24]
 8002bca:	68ac      	ldr	r4, [r5, #8]
 8002bcc:	b913      	cbnz	r3, 8002bd4 <_puts_r+0x1c>
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f000 fa62 	bl	8003098 <__sinit>
 8002bd4:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <_puts_r+0xd0>)
 8002bd6:	429c      	cmp	r4, r3
 8002bd8:	d120      	bne.n	8002c1c <_puts_r+0x64>
 8002bda:	686c      	ldr	r4, [r5, #4]
 8002bdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bde:	07db      	lsls	r3, r3, #31
 8002be0:	d405      	bmi.n	8002bee <_puts_r+0x36>
 8002be2:	89a3      	ldrh	r3, [r4, #12]
 8002be4:	0598      	lsls	r0, r3, #22
 8002be6:	d402      	bmi.n	8002bee <_puts_r+0x36>
 8002be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bea:	f000 faf3 	bl	80031d4 <__retarget_lock_acquire_recursive>
 8002bee:	89a3      	ldrh	r3, [r4, #12]
 8002bf0:	0719      	lsls	r1, r3, #28
 8002bf2:	d51d      	bpl.n	8002c30 <_puts_r+0x78>
 8002bf4:	6923      	ldr	r3, [r4, #16]
 8002bf6:	b1db      	cbz	r3, 8002c30 <_puts_r+0x78>
 8002bf8:	3e01      	subs	r6, #1
 8002bfa:	68a3      	ldr	r3, [r4, #8]
 8002bfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60a3      	str	r3, [r4, #8]
 8002c04:	bb39      	cbnz	r1, 8002c56 <_puts_r+0x9e>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da38      	bge.n	8002c7c <_puts_r+0xc4>
 8002c0a:	4622      	mov	r2, r4
 8002c0c:	210a      	movs	r1, #10
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f000 f868 	bl	8002ce4 <__swbuf_r>
 8002c14:	3001      	adds	r0, #1
 8002c16:	d011      	beq.n	8002c3c <_puts_r+0x84>
 8002c18:	250a      	movs	r5, #10
 8002c1a:	e011      	b.n	8002c40 <_puts_r+0x88>
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <_puts_r+0xd4>)
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	d101      	bne.n	8002c26 <_puts_r+0x6e>
 8002c22:	68ac      	ldr	r4, [r5, #8]
 8002c24:	e7da      	b.n	8002bdc <_puts_r+0x24>
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <_puts_r+0xd8>)
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	bf08      	it	eq
 8002c2c:	68ec      	ldreq	r4, [r5, #12]
 8002c2e:	e7d5      	b.n	8002bdc <_puts_r+0x24>
 8002c30:	4621      	mov	r1, r4
 8002c32:	4628      	mov	r0, r5
 8002c34:	f000 f8a8 	bl	8002d88 <__swsetup_r>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d0dd      	beq.n	8002bf8 <_puts_r+0x40>
 8002c3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c42:	07da      	lsls	r2, r3, #31
 8002c44:	d405      	bmi.n	8002c52 <_puts_r+0x9a>
 8002c46:	89a3      	ldrh	r3, [r4, #12]
 8002c48:	059b      	lsls	r3, r3, #22
 8002c4a:	d402      	bmi.n	8002c52 <_puts_r+0x9a>
 8002c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c4e:	f000 fac2 	bl	80031d6 <__retarget_lock_release_recursive>
 8002c52:	4628      	mov	r0, r5
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da04      	bge.n	8002c64 <_puts_r+0xac>
 8002c5a:	69a2      	ldr	r2, [r4, #24]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	dc06      	bgt.n	8002c6e <_puts_r+0xb6>
 8002c60:	290a      	cmp	r1, #10
 8002c62:	d004      	beq.n	8002c6e <_puts_r+0xb6>
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	6022      	str	r2, [r4, #0]
 8002c6a:	7019      	strb	r1, [r3, #0]
 8002c6c:	e7c5      	b.n	8002bfa <_puts_r+0x42>
 8002c6e:	4622      	mov	r2, r4
 8002c70:	4628      	mov	r0, r5
 8002c72:	f000 f837 	bl	8002ce4 <__swbuf_r>
 8002c76:	3001      	adds	r0, #1
 8002c78:	d1bf      	bne.n	8002bfa <_puts_r+0x42>
 8002c7a:	e7df      	b.n	8002c3c <_puts_r+0x84>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	250a      	movs	r5, #10
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	6022      	str	r2, [r4, #0]
 8002c84:	701d      	strb	r5, [r3, #0]
 8002c86:	e7db      	b.n	8002c40 <_puts_r+0x88>
 8002c88:	08003d18 	.word	0x08003d18
 8002c8c:	08003d38 	.word	0x08003d38
 8002c90:	08003cf8 	.word	0x08003cf8

08002c94 <puts>:
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <puts+0xc>)
 8002c96:	4601      	mov	r1, r0
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	f7ff bf8d 	b.w	8002bb8 <_puts_r>
 8002c9e:	bf00      	nop
 8002ca0:	2000000c 	.word	0x2000000c

08002ca4 <_vsiprintf_r>:
 8002ca4:	b500      	push	{lr}
 8002ca6:	b09b      	sub	sp, #108	; 0x6c
 8002ca8:	9100      	str	r1, [sp, #0]
 8002caa:	9104      	str	r1, [sp, #16]
 8002cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cb0:	9105      	str	r1, [sp, #20]
 8002cb2:	9102      	str	r1, [sp, #8]
 8002cb4:	4905      	ldr	r1, [pc, #20]	; (8002ccc <_vsiprintf_r+0x28>)
 8002cb6:	9103      	str	r1, [sp, #12]
 8002cb8:	4669      	mov	r1, sp
 8002cba:	f000 fc2f 	bl	800351c <_svfiprintf_r>
 8002cbe:	9b00      	ldr	r3, [sp, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	b01b      	add	sp, #108	; 0x6c
 8002cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cca:	bf00      	nop
 8002ccc:	ffff0208 	.word	0xffff0208

08002cd0 <vsiprintf>:
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	460a      	mov	r2, r1
 8002cd4:	4601      	mov	r1, r0
 8002cd6:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <vsiprintf+0x10>)
 8002cd8:	6800      	ldr	r0, [r0, #0]
 8002cda:	f7ff bfe3 	b.w	8002ca4 <_vsiprintf_r>
 8002cde:	bf00      	nop
 8002ce0:	2000000c 	.word	0x2000000c

08002ce4 <__swbuf_r>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	460e      	mov	r6, r1
 8002ce8:	4614      	mov	r4, r2
 8002cea:	4605      	mov	r5, r0
 8002cec:	b118      	cbz	r0, 8002cf6 <__swbuf_r+0x12>
 8002cee:	6983      	ldr	r3, [r0, #24]
 8002cf0:	b90b      	cbnz	r3, 8002cf6 <__swbuf_r+0x12>
 8002cf2:	f000 f9d1 	bl	8003098 <__sinit>
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <__swbuf_r+0x98>)
 8002cf8:	429c      	cmp	r4, r3
 8002cfa:	d12b      	bne.n	8002d54 <__swbuf_r+0x70>
 8002cfc:	686c      	ldr	r4, [r5, #4]
 8002cfe:	69a3      	ldr	r3, [r4, #24]
 8002d00:	60a3      	str	r3, [r4, #8]
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	071a      	lsls	r2, r3, #28
 8002d06:	d52f      	bpl.n	8002d68 <__swbuf_r+0x84>
 8002d08:	6923      	ldr	r3, [r4, #16]
 8002d0a:	b36b      	cbz	r3, 8002d68 <__swbuf_r+0x84>
 8002d0c:	6923      	ldr	r3, [r4, #16]
 8002d0e:	6820      	ldr	r0, [r4, #0]
 8002d10:	1ac0      	subs	r0, r0, r3
 8002d12:	6963      	ldr	r3, [r4, #20]
 8002d14:	b2f6      	uxtb	r6, r6
 8002d16:	4283      	cmp	r3, r0
 8002d18:	4637      	mov	r7, r6
 8002d1a:	dc04      	bgt.n	8002d26 <__swbuf_r+0x42>
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f000 f926 	bl	8002f70 <_fflush_r>
 8002d24:	bb30      	cbnz	r0, 8002d74 <__swbuf_r+0x90>
 8002d26:	68a3      	ldr	r3, [r4, #8]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60a3      	str	r3, [r4, #8]
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	6022      	str	r2, [r4, #0]
 8002d32:	701e      	strb	r6, [r3, #0]
 8002d34:	6963      	ldr	r3, [r4, #20]
 8002d36:	3001      	adds	r0, #1
 8002d38:	4283      	cmp	r3, r0
 8002d3a:	d004      	beq.n	8002d46 <__swbuf_r+0x62>
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	07db      	lsls	r3, r3, #31
 8002d40:	d506      	bpl.n	8002d50 <__swbuf_r+0x6c>
 8002d42:	2e0a      	cmp	r6, #10
 8002d44:	d104      	bne.n	8002d50 <__swbuf_r+0x6c>
 8002d46:	4621      	mov	r1, r4
 8002d48:	4628      	mov	r0, r5
 8002d4a:	f000 f911 	bl	8002f70 <_fflush_r>
 8002d4e:	b988      	cbnz	r0, 8002d74 <__swbuf_r+0x90>
 8002d50:	4638      	mov	r0, r7
 8002d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <__swbuf_r+0x9c>)
 8002d56:	429c      	cmp	r4, r3
 8002d58:	d101      	bne.n	8002d5e <__swbuf_r+0x7a>
 8002d5a:	68ac      	ldr	r4, [r5, #8]
 8002d5c:	e7cf      	b.n	8002cfe <__swbuf_r+0x1a>
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <__swbuf_r+0xa0>)
 8002d60:	429c      	cmp	r4, r3
 8002d62:	bf08      	it	eq
 8002d64:	68ec      	ldreq	r4, [r5, #12]
 8002d66:	e7ca      	b.n	8002cfe <__swbuf_r+0x1a>
 8002d68:	4621      	mov	r1, r4
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f000 f80c 	bl	8002d88 <__swsetup_r>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d0cb      	beq.n	8002d0c <__swbuf_r+0x28>
 8002d74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002d78:	e7ea      	b.n	8002d50 <__swbuf_r+0x6c>
 8002d7a:	bf00      	nop
 8002d7c:	08003d18 	.word	0x08003d18
 8002d80:	08003d38 	.word	0x08003d38
 8002d84:	08003cf8 	.word	0x08003cf8

08002d88 <__swsetup_r>:
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <__swsetup_r+0xcc>)
 8002d8a:	b570      	push	{r4, r5, r6, lr}
 8002d8c:	681d      	ldr	r5, [r3, #0]
 8002d8e:	4606      	mov	r6, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	b125      	cbz	r5, 8002d9e <__swsetup_r+0x16>
 8002d94:	69ab      	ldr	r3, [r5, #24]
 8002d96:	b913      	cbnz	r3, 8002d9e <__swsetup_r+0x16>
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f000 f97d 	bl	8003098 <__sinit>
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <__swsetup_r+0xd0>)
 8002da0:	429c      	cmp	r4, r3
 8002da2:	d10f      	bne.n	8002dc4 <__swsetup_r+0x3c>
 8002da4:	686c      	ldr	r4, [r5, #4]
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dac:	0719      	lsls	r1, r3, #28
 8002dae:	d42c      	bmi.n	8002e0a <__swsetup_r+0x82>
 8002db0:	06dd      	lsls	r5, r3, #27
 8002db2:	d411      	bmi.n	8002dd8 <__swsetup_r+0x50>
 8002db4:	2309      	movs	r3, #9
 8002db6:	6033      	str	r3, [r6, #0]
 8002db8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dc2:	e03e      	b.n	8002e42 <__swsetup_r+0xba>
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <__swsetup_r+0xd4>)
 8002dc6:	429c      	cmp	r4, r3
 8002dc8:	d101      	bne.n	8002dce <__swsetup_r+0x46>
 8002dca:	68ac      	ldr	r4, [r5, #8]
 8002dcc:	e7eb      	b.n	8002da6 <__swsetup_r+0x1e>
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <__swsetup_r+0xd8>)
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	bf08      	it	eq
 8002dd4:	68ec      	ldreq	r4, [r5, #12]
 8002dd6:	e7e6      	b.n	8002da6 <__swsetup_r+0x1e>
 8002dd8:	0758      	lsls	r0, r3, #29
 8002dda:	d512      	bpl.n	8002e02 <__swsetup_r+0x7a>
 8002ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dde:	b141      	cbz	r1, 8002df2 <__swsetup_r+0x6a>
 8002de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002de4:	4299      	cmp	r1, r3
 8002de6:	d002      	beq.n	8002dee <__swsetup_r+0x66>
 8002de8:	4630      	mov	r0, r6
 8002dea:	f000 fa5b 	bl	80032a4 <_free_r>
 8002dee:	2300      	movs	r3, #0
 8002df0:	6363      	str	r3, [r4, #52]	; 0x34
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002df8:	81a3      	strh	r3, [r4, #12]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6063      	str	r3, [r4, #4]
 8002dfe:	6923      	ldr	r3, [r4, #16]
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	6923      	ldr	r3, [r4, #16]
 8002e0c:	b94b      	cbnz	r3, 8002e22 <__swsetup_r+0x9a>
 8002e0e:	89a3      	ldrh	r3, [r4, #12]
 8002e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e18:	d003      	beq.n	8002e22 <__swsetup_r+0x9a>
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f000 fa01 	bl	8003224 <__smakebuf_r>
 8002e22:	89a0      	ldrh	r0, [r4, #12]
 8002e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e28:	f010 0301 	ands.w	r3, r0, #1
 8002e2c:	d00a      	beq.n	8002e44 <__swsetup_r+0xbc>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60a3      	str	r3, [r4, #8]
 8002e32:	6963      	ldr	r3, [r4, #20]
 8002e34:	425b      	negs	r3, r3
 8002e36:	61a3      	str	r3, [r4, #24]
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	b943      	cbnz	r3, 8002e4e <__swsetup_r+0xc6>
 8002e3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e40:	d1ba      	bne.n	8002db8 <__swsetup_r+0x30>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	0781      	lsls	r1, r0, #30
 8002e46:	bf58      	it	pl
 8002e48:	6963      	ldrpl	r3, [r4, #20]
 8002e4a:	60a3      	str	r3, [r4, #8]
 8002e4c:	e7f4      	b.n	8002e38 <__swsetup_r+0xb0>
 8002e4e:	2000      	movs	r0, #0
 8002e50:	e7f7      	b.n	8002e42 <__swsetup_r+0xba>
 8002e52:	bf00      	nop
 8002e54:	2000000c 	.word	0x2000000c
 8002e58:	08003d18 	.word	0x08003d18
 8002e5c:	08003d38 	.word	0x08003d38
 8002e60:	08003cf8 	.word	0x08003cf8

08002e64 <__sflush_r>:
 8002e64:	898a      	ldrh	r2, [r1, #12]
 8002e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	0710      	lsls	r0, r2, #28
 8002e6e:	460c      	mov	r4, r1
 8002e70:	d458      	bmi.n	8002f24 <__sflush_r+0xc0>
 8002e72:	684b      	ldr	r3, [r1, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	dc05      	bgt.n	8002e84 <__sflush_r+0x20>
 8002e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	dc02      	bgt.n	8002e84 <__sflush_r+0x20>
 8002e7e:	2000      	movs	r0, #0
 8002e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e86:	2e00      	cmp	r6, #0
 8002e88:	d0f9      	beq.n	8002e7e <__sflush_r+0x1a>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e90:	682f      	ldr	r7, [r5, #0]
 8002e92:	602b      	str	r3, [r5, #0]
 8002e94:	d032      	beq.n	8002efc <__sflush_r+0x98>
 8002e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	075a      	lsls	r2, r3, #29
 8002e9c:	d505      	bpl.n	8002eaa <__sflush_r+0x46>
 8002e9e:	6863      	ldr	r3, [r4, #4]
 8002ea0:	1ac0      	subs	r0, r0, r3
 8002ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ea4:	b10b      	cbz	r3, 8002eaa <__sflush_r+0x46>
 8002ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ea8:	1ac0      	subs	r0, r0, r3
 8002eaa:	2300      	movs	r3, #0
 8002eac:	4602      	mov	r2, r0
 8002eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eb0:	6a21      	ldr	r1, [r4, #32]
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	47b0      	blx	r6
 8002eb6:	1c43      	adds	r3, r0, #1
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	d106      	bne.n	8002eca <__sflush_r+0x66>
 8002ebc:	6829      	ldr	r1, [r5, #0]
 8002ebe:	291d      	cmp	r1, #29
 8002ec0:	d82c      	bhi.n	8002f1c <__sflush_r+0xb8>
 8002ec2:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <__sflush_r+0x108>)
 8002ec4:	40ca      	lsrs	r2, r1
 8002ec6:	07d6      	lsls	r6, r2, #31
 8002ec8:	d528      	bpl.n	8002f1c <__sflush_r+0xb8>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	6062      	str	r2, [r4, #4]
 8002ece:	04d9      	lsls	r1, r3, #19
 8002ed0:	6922      	ldr	r2, [r4, #16]
 8002ed2:	6022      	str	r2, [r4, #0]
 8002ed4:	d504      	bpl.n	8002ee0 <__sflush_r+0x7c>
 8002ed6:	1c42      	adds	r2, r0, #1
 8002ed8:	d101      	bne.n	8002ede <__sflush_r+0x7a>
 8002eda:	682b      	ldr	r3, [r5, #0]
 8002edc:	b903      	cbnz	r3, 8002ee0 <__sflush_r+0x7c>
 8002ede:	6560      	str	r0, [r4, #84]	; 0x54
 8002ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee2:	602f      	str	r7, [r5, #0]
 8002ee4:	2900      	cmp	r1, #0
 8002ee6:	d0ca      	beq.n	8002e7e <__sflush_r+0x1a>
 8002ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eec:	4299      	cmp	r1, r3
 8002eee:	d002      	beq.n	8002ef6 <__sflush_r+0x92>
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f000 f9d7 	bl	80032a4 <_free_r>
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8002efa:	e7c1      	b.n	8002e80 <__sflush_r+0x1c>
 8002efc:	6a21      	ldr	r1, [r4, #32]
 8002efe:	2301      	movs	r3, #1
 8002f00:	4628      	mov	r0, r5
 8002f02:	47b0      	blx	r6
 8002f04:	1c41      	adds	r1, r0, #1
 8002f06:	d1c7      	bne.n	8002e98 <__sflush_r+0x34>
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0c4      	beq.n	8002e98 <__sflush_r+0x34>
 8002f0e:	2b1d      	cmp	r3, #29
 8002f10:	d001      	beq.n	8002f16 <__sflush_r+0xb2>
 8002f12:	2b16      	cmp	r3, #22
 8002f14:	d101      	bne.n	8002f1a <__sflush_r+0xb6>
 8002f16:	602f      	str	r7, [r5, #0]
 8002f18:	e7b1      	b.n	8002e7e <__sflush_r+0x1a>
 8002f1a:	89a3      	ldrh	r3, [r4, #12]
 8002f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f20:	81a3      	strh	r3, [r4, #12]
 8002f22:	e7ad      	b.n	8002e80 <__sflush_r+0x1c>
 8002f24:	690f      	ldr	r7, [r1, #16]
 8002f26:	2f00      	cmp	r7, #0
 8002f28:	d0a9      	beq.n	8002e7e <__sflush_r+0x1a>
 8002f2a:	0793      	lsls	r3, r2, #30
 8002f2c:	680e      	ldr	r6, [r1, #0]
 8002f2e:	bf08      	it	eq
 8002f30:	694b      	ldreq	r3, [r1, #20]
 8002f32:	600f      	str	r7, [r1, #0]
 8002f34:	bf18      	it	ne
 8002f36:	2300      	movne	r3, #0
 8002f38:	eba6 0807 	sub.w	r8, r6, r7
 8002f3c:	608b      	str	r3, [r1, #8]
 8002f3e:	f1b8 0f00 	cmp.w	r8, #0
 8002f42:	dd9c      	ble.n	8002e7e <__sflush_r+0x1a>
 8002f44:	6a21      	ldr	r1, [r4, #32]
 8002f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f48:	4643      	mov	r3, r8
 8002f4a:	463a      	mov	r2, r7
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	47b0      	blx	r6
 8002f50:	2800      	cmp	r0, #0
 8002f52:	dc06      	bgt.n	8002f62 <__sflush_r+0xfe>
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f5a:	81a3      	strh	r3, [r4, #12]
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f60:	e78e      	b.n	8002e80 <__sflush_r+0x1c>
 8002f62:	4407      	add	r7, r0
 8002f64:	eba8 0800 	sub.w	r8, r8, r0
 8002f68:	e7e9      	b.n	8002f3e <__sflush_r+0xda>
 8002f6a:	bf00      	nop
 8002f6c:	20400001 	.word	0x20400001

08002f70 <_fflush_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	690b      	ldr	r3, [r1, #16]
 8002f74:	4605      	mov	r5, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	b913      	cbnz	r3, 8002f80 <_fflush_r+0x10>
 8002f7a:	2500      	movs	r5, #0
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	bd38      	pop	{r3, r4, r5, pc}
 8002f80:	b118      	cbz	r0, 8002f8a <_fflush_r+0x1a>
 8002f82:	6983      	ldr	r3, [r0, #24]
 8002f84:	b90b      	cbnz	r3, 8002f8a <_fflush_r+0x1a>
 8002f86:	f000 f887 	bl	8003098 <__sinit>
 8002f8a:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <_fflush_r+0x6c>)
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	d11b      	bne.n	8002fc8 <_fflush_r+0x58>
 8002f90:	686c      	ldr	r4, [r5, #4]
 8002f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0ef      	beq.n	8002f7a <_fflush_r+0xa>
 8002f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f9c:	07d0      	lsls	r0, r2, #31
 8002f9e:	d404      	bmi.n	8002faa <_fflush_r+0x3a>
 8002fa0:	0599      	lsls	r1, r3, #22
 8002fa2:	d402      	bmi.n	8002faa <_fflush_r+0x3a>
 8002fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fa6:	f000 f915 	bl	80031d4 <__retarget_lock_acquire_recursive>
 8002faa:	4628      	mov	r0, r5
 8002fac:	4621      	mov	r1, r4
 8002fae:	f7ff ff59 	bl	8002e64 <__sflush_r>
 8002fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fb4:	07da      	lsls	r2, r3, #31
 8002fb6:	4605      	mov	r5, r0
 8002fb8:	d4e0      	bmi.n	8002f7c <_fflush_r+0xc>
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	059b      	lsls	r3, r3, #22
 8002fbe:	d4dd      	bmi.n	8002f7c <_fflush_r+0xc>
 8002fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fc2:	f000 f908 	bl	80031d6 <__retarget_lock_release_recursive>
 8002fc6:	e7d9      	b.n	8002f7c <_fflush_r+0xc>
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <_fflush_r+0x70>)
 8002fca:	429c      	cmp	r4, r3
 8002fcc:	d101      	bne.n	8002fd2 <_fflush_r+0x62>
 8002fce:	68ac      	ldr	r4, [r5, #8]
 8002fd0:	e7df      	b.n	8002f92 <_fflush_r+0x22>
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <_fflush_r+0x74>)
 8002fd4:	429c      	cmp	r4, r3
 8002fd6:	bf08      	it	eq
 8002fd8:	68ec      	ldreq	r4, [r5, #12]
 8002fda:	e7da      	b.n	8002f92 <_fflush_r+0x22>
 8002fdc:	08003d18 	.word	0x08003d18
 8002fe0:	08003d38 	.word	0x08003d38
 8002fe4:	08003cf8 	.word	0x08003cf8

08002fe8 <std>:
 8002fe8:	2300      	movs	r3, #0
 8002fea:	b510      	push	{r4, lr}
 8002fec:	4604      	mov	r4, r0
 8002fee:	e9c0 3300 	strd	r3, r3, [r0]
 8002ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ff6:	6083      	str	r3, [r0, #8]
 8002ff8:	8181      	strh	r1, [r0, #12]
 8002ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8002ffc:	81c2      	strh	r2, [r0, #14]
 8002ffe:	6183      	str	r3, [r0, #24]
 8003000:	4619      	mov	r1, r3
 8003002:	2208      	movs	r2, #8
 8003004:	305c      	adds	r0, #92	; 0x5c
 8003006:	f7ff fdcf 	bl	8002ba8 <memset>
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <std+0x38>)
 800300c:	6263      	str	r3, [r4, #36]	; 0x24
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <std+0x3c>)
 8003010:	62a3      	str	r3, [r4, #40]	; 0x28
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <std+0x40>)
 8003014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <std+0x44>)
 8003018:	6224      	str	r4, [r4, #32]
 800301a:	6323      	str	r3, [r4, #48]	; 0x30
 800301c:	bd10      	pop	{r4, pc}
 800301e:	bf00      	nop
 8003020:	08003a65 	.word	0x08003a65
 8003024:	08003a87 	.word	0x08003a87
 8003028:	08003abf 	.word	0x08003abf
 800302c:	08003ae3 	.word	0x08003ae3

08003030 <_cleanup_r>:
 8003030:	4901      	ldr	r1, [pc, #4]	; (8003038 <_cleanup_r+0x8>)
 8003032:	f000 b8af 	b.w	8003194 <_fwalk_reent>
 8003036:	bf00      	nop
 8003038:	08002f71 	.word	0x08002f71

0800303c <__sfmoreglue>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	2268      	movs	r2, #104	; 0x68
 8003040:	1e4d      	subs	r5, r1, #1
 8003042:	4355      	muls	r5, r2
 8003044:	460e      	mov	r6, r1
 8003046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800304a:	f000 f997 	bl	800337c <_malloc_r>
 800304e:	4604      	mov	r4, r0
 8003050:	b140      	cbz	r0, 8003064 <__sfmoreglue+0x28>
 8003052:	2100      	movs	r1, #0
 8003054:	e9c0 1600 	strd	r1, r6, [r0]
 8003058:	300c      	adds	r0, #12
 800305a:	60a0      	str	r0, [r4, #8]
 800305c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003060:	f7ff fda2 	bl	8002ba8 <memset>
 8003064:	4620      	mov	r0, r4
 8003066:	bd70      	pop	{r4, r5, r6, pc}

08003068 <__sfp_lock_acquire>:
 8003068:	4801      	ldr	r0, [pc, #4]	; (8003070 <__sfp_lock_acquire+0x8>)
 800306a:	f000 b8b3 	b.w	80031d4 <__retarget_lock_acquire_recursive>
 800306e:	bf00      	nop
 8003070:	20000135 	.word	0x20000135

08003074 <__sfp_lock_release>:
 8003074:	4801      	ldr	r0, [pc, #4]	; (800307c <__sfp_lock_release+0x8>)
 8003076:	f000 b8ae 	b.w	80031d6 <__retarget_lock_release_recursive>
 800307a:	bf00      	nop
 800307c:	20000135 	.word	0x20000135

08003080 <__sinit_lock_acquire>:
 8003080:	4801      	ldr	r0, [pc, #4]	; (8003088 <__sinit_lock_acquire+0x8>)
 8003082:	f000 b8a7 	b.w	80031d4 <__retarget_lock_acquire_recursive>
 8003086:	bf00      	nop
 8003088:	20000136 	.word	0x20000136

0800308c <__sinit_lock_release>:
 800308c:	4801      	ldr	r0, [pc, #4]	; (8003094 <__sinit_lock_release+0x8>)
 800308e:	f000 b8a2 	b.w	80031d6 <__retarget_lock_release_recursive>
 8003092:	bf00      	nop
 8003094:	20000136 	.word	0x20000136

08003098 <__sinit>:
 8003098:	b510      	push	{r4, lr}
 800309a:	4604      	mov	r4, r0
 800309c:	f7ff fff0 	bl	8003080 <__sinit_lock_acquire>
 80030a0:	69a3      	ldr	r3, [r4, #24]
 80030a2:	b11b      	cbz	r3, 80030ac <__sinit+0x14>
 80030a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030a8:	f7ff bff0 	b.w	800308c <__sinit_lock_release>
 80030ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80030b0:	6523      	str	r3, [r4, #80]	; 0x50
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <__sinit+0x68>)
 80030b4:	4a13      	ldr	r2, [pc, #76]	; (8003104 <__sinit+0x6c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80030ba:	42a3      	cmp	r3, r4
 80030bc:	bf04      	itt	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	61a3      	streq	r3, [r4, #24]
 80030c2:	4620      	mov	r0, r4
 80030c4:	f000 f820 	bl	8003108 <__sfp>
 80030c8:	6060      	str	r0, [r4, #4]
 80030ca:	4620      	mov	r0, r4
 80030cc:	f000 f81c 	bl	8003108 <__sfp>
 80030d0:	60a0      	str	r0, [r4, #8]
 80030d2:	4620      	mov	r0, r4
 80030d4:	f000 f818 	bl	8003108 <__sfp>
 80030d8:	2200      	movs	r2, #0
 80030da:	60e0      	str	r0, [r4, #12]
 80030dc:	2104      	movs	r1, #4
 80030de:	6860      	ldr	r0, [r4, #4]
 80030e0:	f7ff ff82 	bl	8002fe8 <std>
 80030e4:	68a0      	ldr	r0, [r4, #8]
 80030e6:	2201      	movs	r2, #1
 80030e8:	2109      	movs	r1, #9
 80030ea:	f7ff ff7d 	bl	8002fe8 <std>
 80030ee:	68e0      	ldr	r0, [r4, #12]
 80030f0:	2202      	movs	r2, #2
 80030f2:	2112      	movs	r1, #18
 80030f4:	f7ff ff78 	bl	8002fe8 <std>
 80030f8:	2301      	movs	r3, #1
 80030fa:	61a3      	str	r3, [r4, #24]
 80030fc:	e7d2      	b.n	80030a4 <__sinit+0xc>
 80030fe:	bf00      	nop
 8003100:	08003cf4 	.word	0x08003cf4
 8003104:	08003031 	.word	0x08003031

08003108 <__sfp>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	4607      	mov	r7, r0
 800310c:	f7ff ffac 	bl	8003068 <__sfp_lock_acquire>
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <__sfp+0x84>)
 8003112:	681e      	ldr	r6, [r3, #0]
 8003114:	69b3      	ldr	r3, [r6, #24]
 8003116:	b913      	cbnz	r3, 800311e <__sfp+0x16>
 8003118:	4630      	mov	r0, r6
 800311a:	f7ff ffbd 	bl	8003098 <__sinit>
 800311e:	3648      	adds	r6, #72	; 0x48
 8003120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003124:	3b01      	subs	r3, #1
 8003126:	d503      	bpl.n	8003130 <__sfp+0x28>
 8003128:	6833      	ldr	r3, [r6, #0]
 800312a:	b30b      	cbz	r3, 8003170 <__sfp+0x68>
 800312c:	6836      	ldr	r6, [r6, #0]
 800312e:	e7f7      	b.n	8003120 <__sfp+0x18>
 8003130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003134:	b9d5      	cbnz	r5, 800316c <__sfp+0x64>
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <__sfp+0x88>)
 8003138:	60e3      	str	r3, [r4, #12]
 800313a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800313e:	6665      	str	r5, [r4, #100]	; 0x64
 8003140:	f000 f847 	bl	80031d2 <__retarget_lock_init_recursive>
 8003144:	f7ff ff96 	bl	8003074 <__sfp_lock_release>
 8003148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800314c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003150:	6025      	str	r5, [r4, #0]
 8003152:	61a5      	str	r5, [r4, #24]
 8003154:	2208      	movs	r2, #8
 8003156:	4629      	mov	r1, r5
 8003158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800315c:	f7ff fd24 	bl	8002ba8 <memset>
 8003160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003168:	4620      	mov	r0, r4
 800316a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800316c:	3468      	adds	r4, #104	; 0x68
 800316e:	e7d9      	b.n	8003124 <__sfp+0x1c>
 8003170:	2104      	movs	r1, #4
 8003172:	4638      	mov	r0, r7
 8003174:	f7ff ff62 	bl	800303c <__sfmoreglue>
 8003178:	4604      	mov	r4, r0
 800317a:	6030      	str	r0, [r6, #0]
 800317c:	2800      	cmp	r0, #0
 800317e:	d1d5      	bne.n	800312c <__sfp+0x24>
 8003180:	f7ff ff78 	bl	8003074 <__sfp_lock_release>
 8003184:	230c      	movs	r3, #12
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	e7ee      	b.n	8003168 <__sfp+0x60>
 800318a:	bf00      	nop
 800318c:	08003cf4 	.word	0x08003cf4
 8003190:	ffff0001 	.word	0xffff0001

08003194 <_fwalk_reent>:
 8003194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003198:	4606      	mov	r6, r0
 800319a:	4688      	mov	r8, r1
 800319c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031a0:	2700      	movs	r7, #0
 80031a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031a6:	f1b9 0901 	subs.w	r9, r9, #1
 80031aa:	d505      	bpl.n	80031b8 <_fwalk_reent+0x24>
 80031ac:	6824      	ldr	r4, [r4, #0]
 80031ae:	2c00      	cmp	r4, #0
 80031b0:	d1f7      	bne.n	80031a2 <_fwalk_reent+0xe>
 80031b2:	4638      	mov	r0, r7
 80031b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031b8:	89ab      	ldrh	r3, [r5, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d907      	bls.n	80031ce <_fwalk_reent+0x3a>
 80031be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031c2:	3301      	adds	r3, #1
 80031c4:	d003      	beq.n	80031ce <_fwalk_reent+0x3a>
 80031c6:	4629      	mov	r1, r5
 80031c8:	4630      	mov	r0, r6
 80031ca:	47c0      	blx	r8
 80031cc:	4307      	orrs	r7, r0
 80031ce:	3568      	adds	r5, #104	; 0x68
 80031d0:	e7e9      	b.n	80031a6 <_fwalk_reent+0x12>

080031d2 <__retarget_lock_init_recursive>:
 80031d2:	4770      	bx	lr

080031d4 <__retarget_lock_acquire_recursive>:
 80031d4:	4770      	bx	lr

080031d6 <__retarget_lock_release_recursive>:
 80031d6:	4770      	bx	lr

080031d8 <__swhatbuf_r>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	460e      	mov	r6, r1
 80031dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e0:	2900      	cmp	r1, #0
 80031e2:	b096      	sub	sp, #88	; 0x58
 80031e4:	4614      	mov	r4, r2
 80031e6:	461d      	mov	r5, r3
 80031e8:	da08      	bge.n	80031fc <__swhatbuf_r+0x24>
 80031ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	602a      	str	r2, [r5, #0]
 80031f2:	061a      	lsls	r2, r3, #24
 80031f4:	d410      	bmi.n	8003218 <__swhatbuf_r+0x40>
 80031f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031fa:	e00e      	b.n	800321a <__swhatbuf_r+0x42>
 80031fc:	466a      	mov	r2, sp
 80031fe:	f000 fc97 	bl	8003b30 <_fstat_r>
 8003202:	2800      	cmp	r0, #0
 8003204:	dbf1      	blt.n	80031ea <__swhatbuf_r+0x12>
 8003206:	9a01      	ldr	r2, [sp, #4]
 8003208:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800320c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003210:	425a      	negs	r2, r3
 8003212:	415a      	adcs	r2, r3
 8003214:	602a      	str	r2, [r5, #0]
 8003216:	e7ee      	b.n	80031f6 <__swhatbuf_r+0x1e>
 8003218:	2340      	movs	r3, #64	; 0x40
 800321a:	2000      	movs	r0, #0
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	b016      	add	sp, #88	; 0x58
 8003220:	bd70      	pop	{r4, r5, r6, pc}
	...

08003224 <__smakebuf_r>:
 8003224:	898b      	ldrh	r3, [r1, #12]
 8003226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003228:	079d      	lsls	r5, r3, #30
 800322a:	4606      	mov	r6, r0
 800322c:	460c      	mov	r4, r1
 800322e:	d507      	bpl.n	8003240 <__smakebuf_r+0x1c>
 8003230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	6123      	str	r3, [r4, #16]
 8003238:	2301      	movs	r3, #1
 800323a:	6163      	str	r3, [r4, #20]
 800323c:	b002      	add	sp, #8
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	ab01      	add	r3, sp, #4
 8003242:	466a      	mov	r2, sp
 8003244:	f7ff ffc8 	bl	80031d8 <__swhatbuf_r>
 8003248:	9900      	ldr	r1, [sp, #0]
 800324a:	4605      	mov	r5, r0
 800324c:	4630      	mov	r0, r6
 800324e:	f000 f895 	bl	800337c <_malloc_r>
 8003252:	b948      	cbnz	r0, 8003268 <__smakebuf_r+0x44>
 8003254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003258:	059a      	lsls	r2, r3, #22
 800325a:	d4ef      	bmi.n	800323c <__smakebuf_r+0x18>
 800325c:	f023 0303 	bic.w	r3, r3, #3
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	81a3      	strh	r3, [r4, #12]
 8003266:	e7e3      	b.n	8003230 <__smakebuf_r+0xc>
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <__smakebuf_r+0x7c>)
 800326a:	62b3      	str	r3, [r6, #40]	; 0x28
 800326c:	89a3      	ldrh	r3, [r4, #12]
 800326e:	6020      	str	r0, [r4, #0]
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	9b00      	ldr	r3, [sp, #0]
 8003278:	6163      	str	r3, [r4, #20]
 800327a:	9b01      	ldr	r3, [sp, #4]
 800327c:	6120      	str	r0, [r4, #16]
 800327e:	b15b      	cbz	r3, 8003298 <__smakebuf_r+0x74>
 8003280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003284:	4630      	mov	r0, r6
 8003286:	f000 fc65 	bl	8003b54 <_isatty_r>
 800328a:	b128      	cbz	r0, 8003298 <__smakebuf_r+0x74>
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	81a3      	strh	r3, [r4, #12]
 8003298:	89a0      	ldrh	r0, [r4, #12]
 800329a:	4305      	orrs	r5, r0
 800329c:	81a5      	strh	r5, [r4, #12]
 800329e:	e7cd      	b.n	800323c <__smakebuf_r+0x18>
 80032a0:	08003031 	.word	0x08003031

080032a4 <_free_r>:
 80032a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032a6:	2900      	cmp	r1, #0
 80032a8:	d044      	beq.n	8003334 <_free_r+0x90>
 80032aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032ae:	9001      	str	r0, [sp, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f1a1 0404 	sub.w	r4, r1, #4
 80032b6:	bfb8      	it	lt
 80032b8:	18e4      	addlt	r4, r4, r3
 80032ba:	f000 fc95 	bl	8003be8 <__malloc_lock>
 80032be:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <_free_r+0x94>)
 80032c0:	9801      	ldr	r0, [sp, #4]
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	b933      	cbnz	r3, 80032d4 <_free_r+0x30>
 80032c6:	6063      	str	r3, [r4, #4]
 80032c8:	6014      	str	r4, [r2, #0]
 80032ca:	b003      	add	sp, #12
 80032cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032d0:	f000 bc90 	b.w	8003bf4 <__malloc_unlock>
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d908      	bls.n	80032ea <_free_r+0x46>
 80032d8:	6825      	ldr	r5, [r4, #0]
 80032da:	1961      	adds	r1, r4, r5
 80032dc:	428b      	cmp	r3, r1
 80032de:	bf01      	itttt	eq
 80032e0:	6819      	ldreq	r1, [r3, #0]
 80032e2:	685b      	ldreq	r3, [r3, #4]
 80032e4:	1949      	addeq	r1, r1, r5
 80032e6:	6021      	streq	r1, [r4, #0]
 80032e8:	e7ed      	b.n	80032c6 <_free_r+0x22>
 80032ea:	461a      	mov	r2, r3
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	b10b      	cbz	r3, 80032f4 <_free_r+0x50>
 80032f0:	42a3      	cmp	r3, r4
 80032f2:	d9fa      	bls.n	80032ea <_free_r+0x46>
 80032f4:	6811      	ldr	r1, [r2, #0]
 80032f6:	1855      	adds	r5, r2, r1
 80032f8:	42a5      	cmp	r5, r4
 80032fa:	d10b      	bne.n	8003314 <_free_r+0x70>
 80032fc:	6824      	ldr	r4, [r4, #0]
 80032fe:	4421      	add	r1, r4
 8003300:	1854      	adds	r4, r2, r1
 8003302:	42a3      	cmp	r3, r4
 8003304:	6011      	str	r1, [r2, #0]
 8003306:	d1e0      	bne.n	80032ca <_free_r+0x26>
 8003308:	681c      	ldr	r4, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	6053      	str	r3, [r2, #4]
 800330e:	4421      	add	r1, r4
 8003310:	6011      	str	r1, [r2, #0]
 8003312:	e7da      	b.n	80032ca <_free_r+0x26>
 8003314:	d902      	bls.n	800331c <_free_r+0x78>
 8003316:	230c      	movs	r3, #12
 8003318:	6003      	str	r3, [r0, #0]
 800331a:	e7d6      	b.n	80032ca <_free_r+0x26>
 800331c:	6825      	ldr	r5, [r4, #0]
 800331e:	1961      	adds	r1, r4, r5
 8003320:	428b      	cmp	r3, r1
 8003322:	bf04      	itt	eq
 8003324:	6819      	ldreq	r1, [r3, #0]
 8003326:	685b      	ldreq	r3, [r3, #4]
 8003328:	6063      	str	r3, [r4, #4]
 800332a:	bf04      	itt	eq
 800332c:	1949      	addeq	r1, r1, r5
 800332e:	6021      	streq	r1, [r4, #0]
 8003330:	6054      	str	r4, [r2, #4]
 8003332:	e7ca      	b.n	80032ca <_free_r+0x26>
 8003334:	b003      	add	sp, #12
 8003336:	bd30      	pop	{r4, r5, pc}
 8003338:	20000138 	.word	0x20000138

0800333c <sbrk_aligned>:
 800333c:	b570      	push	{r4, r5, r6, lr}
 800333e:	4e0e      	ldr	r6, [pc, #56]	; (8003378 <sbrk_aligned+0x3c>)
 8003340:	460c      	mov	r4, r1
 8003342:	6831      	ldr	r1, [r6, #0]
 8003344:	4605      	mov	r5, r0
 8003346:	b911      	cbnz	r1, 800334e <sbrk_aligned+0x12>
 8003348:	f000 fb7c 	bl	8003a44 <_sbrk_r>
 800334c:	6030      	str	r0, [r6, #0]
 800334e:	4621      	mov	r1, r4
 8003350:	4628      	mov	r0, r5
 8003352:	f000 fb77 	bl	8003a44 <_sbrk_r>
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	d00a      	beq.n	8003370 <sbrk_aligned+0x34>
 800335a:	1cc4      	adds	r4, r0, #3
 800335c:	f024 0403 	bic.w	r4, r4, #3
 8003360:	42a0      	cmp	r0, r4
 8003362:	d007      	beq.n	8003374 <sbrk_aligned+0x38>
 8003364:	1a21      	subs	r1, r4, r0
 8003366:	4628      	mov	r0, r5
 8003368:	f000 fb6c 	bl	8003a44 <_sbrk_r>
 800336c:	3001      	adds	r0, #1
 800336e:	d101      	bne.n	8003374 <sbrk_aligned+0x38>
 8003370:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003374:	4620      	mov	r0, r4
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	2000013c 	.word	0x2000013c

0800337c <_malloc_r>:
 800337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003380:	1ccd      	adds	r5, r1, #3
 8003382:	f025 0503 	bic.w	r5, r5, #3
 8003386:	3508      	adds	r5, #8
 8003388:	2d0c      	cmp	r5, #12
 800338a:	bf38      	it	cc
 800338c:	250c      	movcc	r5, #12
 800338e:	2d00      	cmp	r5, #0
 8003390:	4607      	mov	r7, r0
 8003392:	db01      	blt.n	8003398 <_malloc_r+0x1c>
 8003394:	42a9      	cmp	r1, r5
 8003396:	d905      	bls.n	80033a4 <_malloc_r+0x28>
 8003398:	230c      	movs	r3, #12
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	2600      	movs	r6, #0
 800339e:	4630      	mov	r0, r6
 80033a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033a4:	4e2e      	ldr	r6, [pc, #184]	; (8003460 <_malloc_r+0xe4>)
 80033a6:	f000 fc1f 	bl	8003be8 <__malloc_lock>
 80033aa:	6833      	ldr	r3, [r6, #0]
 80033ac:	461c      	mov	r4, r3
 80033ae:	bb34      	cbnz	r4, 80033fe <_malloc_r+0x82>
 80033b0:	4629      	mov	r1, r5
 80033b2:	4638      	mov	r0, r7
 80033b4:	f7ff ffc2 	bl	800333c <sbrk_aligned>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	4604      	mov	r4, r0
 80033bc:	d14d      	bne.n	800345a <_malloc_r+0xde>
 80033be:	6834      	ldr	r4, [r6, #0]
 80033c0:	4626      	mov	r6, r4
 80033c2:	2e00      	cmp	r6, #0
 80033c4:	d140      	bne.n	8003448 <_malloc_r+0xcc>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	4631      	mov	r1, r6
 80033ca:	4638      	mov	r0, r7
 80033cc:	eb04 0803 	add.w	r8, r4, r3
 80033d0:	f000 fb38 	bl	8003a44 <_sbrk_r>
 80033d4:	4580      	cmp	r8, r0
 80033d6:	d13a      	bne.n	800344e <_malloc_r+0xd2>
 80033d8:	6821      	ldr	r1, [r4, #0]
 80033da:	3503      	adds	r5, #3
 80033dc:	1a6d      	subs	r5, r5, r1
 80033de:	f025 0503 	bic.w	r5, r5, #3
 80033e2:	3508      	adds	r5, #8
 80033e4:	2d0c      	cmp	r5, #12
 80033e6:	bf38      	it	cc
 80033e8:	250c      	movcc	r5, #12
 80033ea:	4629      	mov	r1, r5
 80033ec:	4638      	mov	r0, r7
 80033ee:	f7ff ffa5 	bl	800333c <sbrk_aligned>
 80033f2:	3001      	adds	r0, #1
 80033f4:	d02b      	beq.n	800344e <_malloc_r+0xd2>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	442b      	add	r3, r5
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	e00e      	b.n	800341c <_malloc_r+0xa0>
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	1b52      	subs	r2, r2, r5
 8003402:	d41e      	bmi.n	8003442 <_malloc_r+0xc6>
 8003404:	2a0b      	cmp	r2, #11
 8003406:	d916      	bls.n	8003436 <_malloc_r+0xba>
 8003408:	1961      	adds	r1, r4, r5
 800340a:	42a3      	cmp	r3, r4
 800340c:	6025      	str	r5, [r4, #0]
 800340e:	bf18      	it	ne
 8003410:	6059      	strne	r1, [r3, #4]
 8003412:	6863      	ldr	r3, [r4, #4]
 8003414:	bf08      	it	eq
 8003416:	6031      	streq	r1, [r6, #0]
 8003418:	5162      	str	r2, [r4, r5]
 800341a:	604b      	str	r3, [r1, #4]
 800341c:	4638      	mov	r0, r7
 800341e:	f104 060b 	add.w	r6, r4, #11
 8003422:	f000 fbe7 	bl	8003bf4 <__malloc_unlock>
 8003426:	f026 0607 	bic.w	r6, r6, #7
 800342a:	1d23      	adds	r3, r4, #4
 800342c:	1af2      	subs	r2, r6, r3
 800342e:	d0b6      	beq.n	800339e <_malloc_r+0x22>
 8003430:	1b9b      	subs	r3, r3, r6
 8003432:	50a3      	str	r3, [r4, r2]
 8003434:	e7b3      	b.n	800339e <_malloc_r+0x22>
 8003436:	6862      	ldr	r2, [r4, #4]
 8003438:	42a3      	cmp	r3, r4
 800343a:	bf0c      	ite	eq
 800343c:	6032      	streq	r2, [r6, #0]
 800343e:	605a      	strne	r2, [r3, #4]
 8003440:	e7ec      	b.n	800341c <_malloc_r+0xa0>
 8003442:	4623      	mov	r3, r4
 8003444:	6864      	ldr	r4, [r4, #4]
 8003446:	e7b2      	b.n	80033ae <_malloc_r+0x32>
 8003448:	4634      	mov	r4, r6
 800344a:	6876      	ldr	r6, [r6, #4]
 800344c:	e7b9      	b.n	80033c2 <_malloc_r+0x46>
 800344e:	230c      	movs	r3, #12
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4638      	mov	r0, r7
 8003454:	f000 fbce 	bl	8003bf4 <__malloc_unlock>
 8003458:	e7a1      	b.n	800339e <_malloc_r+0x22>
 800345a:	6025      	str	r5, [r4, #0]
 800345c:	e7de      	b.n	800341c <_malloc_r+0xa0>
 800345e:	bf00      	nop
 8003460:	20000138 	.word	0x20000138

08003464 <__ssputs_r>:
 8003464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003468:	688e      	ldr	r6, [r1, #8]
 800346a:	429e      	cmp	r6, r3
 800346c:	4682      	mov	sl, r0
 800346e:	460c      	mov	r4, r1
 8003470:	4690      	mov	r8, r2
 8003472:	461f      	mov	r7, r3
 8003474:	d838      	bhi.n	80034e8 <__ssputs_r+0x84>
 8003476:	898a      	ldrh	r2, [r1, #12]
 8003478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800347c:	d032      	beq.n	80034e4 <__ssputs_r+0x80>
 800347e:	6825      	ldr	r5, [r4, #0]
 8003480:	6909      	ldr	r1, [r1, #16]
 8003482:	eba5 0901 	sub.w	r9, r5, r1
 8003486:	6965      	ldr	r5, [r4, #20]
 8003488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800348c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003490:	3301      	adds	r3, #1
 8003492:	444b      	add	r3, r9
 8003494:	106d      	asrs	r5, r5, #1
 8003496:	429d      	cmp	r5, r3
 8003498:	bf38      	it	cc
 800349a:	461d      	movcc	r5, r3
 800349c:	0553      	lsls	r3, r2, #21
 800349e:	d531      	bpl.n	8003504 <__ssputs_r+0xa0>
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7ff ff6b 	bl	800337c <_malloc_r>
 80034a6:	4606      	mov	r6, r0
 80034a8:	b950      	cbnz	r0, 80034c0 <__ssputs_r+0x5c>
 80034aa:	230c      	movs	r3, #12
 80034ac:	f8ca 3000 	str.w	r3, [sl]
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c0:	6921      	ldr	r1, [r4, #16]
 80034c2:	464a      	mov	r2, r9
 80034c4:	f000 fb68 	bl	8003b98 <memcpy>
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d2:	81a3      	strh	r3, [r4, #12]
 80034d4:	6126      	str	r6, [r4, #16]
 80034d6:	6165      	str	r5, [r4, #20]
 80034d8:	444e      	add	r6, r9
 80034da:	eba5 0509 	sub.w	r5, r5, r9
 80034de:	6026      	str	r6, [r4, #0]
 80034e0:	60a5      	str	r5, [r4, #8]
 80034e2:	463e      	mov	r6, r7
 80034e4:	42be      	cmp	r6, r7
 80034e6:	d900      	bls.n	80034ea <__ssputs_r+0x86>
 80034e8:	463e      	mov	r6, r7
 80034ea:	6820      	ldr	r0, [r4, #0]
 80034ec:	4632      	mov	r2, r6
 80034ee:	4641      	mov	r1, r8
 80034f0:	f000 fb60 	bl	8003bb4 <memmove>
 80034f4:	68a3      	ldr	r3, [r4, #8]
 80034f6:	1b9b      	subs	r3, r3, r6
 80034f8:	60a3      	str	r3, [r4, #8]
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	4433      	add	r3, r6
 80034fe:	6023      	str	r3, [r4, #0]
 8003500:	2000      	movs	r0, #0
 8003502:	e7db      	b.n	80034bc <__ssputs_r+0x58>
 8003504:	462a      	mov	r2, r5
 8003506:	f000 fb7b 	bl	8003c00 <_realloc_r>
 800350a:	4606      	mov	r6, r0
 800350c:	2800      	cmp	r0, #0
 800350e:	d1e1      	bne.n	80034d4 <__ssputs_r+0x70>
 8003510:	6921      	ldr	r1, [r4, #16]
 8003512:	4650      	mov	r0, sl
 8003514:	f7ff fec6 	bl	80032a4 <_free_r>
 8003518:	e7c7      	b.n	80034aa <__ssputs_r+0x46>
	...

0800351c <_svfiprintf_r>:
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	4698      	mov	r8, r3
 8003522:	898b      	ldrh	r3, [r1, #12]
 8003524:	061b      	lsls	r3, r3, #24
 8003526:	b09d      	sub	sp, #116	; 0x74
 8003528:	4607      	mov	r7, r0
 800352a:	460d      	mov	r5, r1
 800352c:	4614      	mov	r4, r2
 800352e:	d50e      	bpl.n	800354e <_svfiprintf_r+0x32>
 8003530:	690b      	ldr	r3, [r1, #16]
 8003532:	b963      	cbnz	r3, 800354e <_svfiprintf_r+0x32>
 8003534:	2140      	movs	r1, #64	; 0x40
 8003536:	f7ff ff21 	bl	800337c <_malloc_r>
 800353a:	6028      	str	r0, [r5, #0]
 800353c:	6128      	str	r0, [r5, #16]
 800353e:	b920      	cbnz	r0, 800354a <_svfiprintf_r+0x2e>
 8003540:	230c      	movs	r3, #12
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003548:	e0d1      	b.n	80036ee <_svfiprintf_r+0x1d2>
 800354a:	2340      	movs	r3, #64	; 0x40
 800354c:	616b      	str	r3, [r5, #20]
 800354e:	2300      	movs	r3, #0
 8003550:	9309      	str	r3, [sp, #36]	; 0x24
 8003552:	2320      	movs	r3, #32
 8003554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003558:	f8cd 800c 	str.w	r8, [sp, #12]
 800355c:	2330      	movs	r3, #48	; 0x30
 800355e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003708 <_svfiprintf_r+0x1ec>
 8003562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003566:	f04f 0901 	mov.w	r9, #1
 800356a:	4623      	mov	r3, r4
 800356c:	469a      	mov	sl, r3
 800356e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003572:	b10a      	cbz	r2, 8003578 <_svfiprintf_r+0x5c>
 8003574:	2a25      	cmp	r2, #37	; 0x25
 8003576:	d1f9      	bne.n	800356c <_svfiprintf_r+0x50>
 8003578:	ebba 0b04 	subs.w	fp, sl, r4
 800357c:	d00b      	beq.n	8003596 <_svfiprintf_r+0x7a>
 800357e:	465b      	mov	r3, fp
 8003580:	4622      	mov	r2, r4
 8003582:	4629      	mov	r1, r5
 8003584:	4638      	mov	r0, r7
 8003586:	f7ff ff6d 	bl	8003464 <__ssputs_r>
 800358a:	3001      	adds	r0, #1
 800358c:	f000 80aa 	beq.w	80036e4 <_svfiprintf_r+0x1c8>
 8003590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003592:	445a      	add	r2, fp
 8003594:	9209      	str	r2, [sp, #36]	; 0x24
 8003596:	f89a 3000 	ldrb.w	r3, [sl]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80a2 	beq.w	80036e4 <_svfiprintf_r+0x1c8>
 80035a0:	2300      	movs	r3, #0
 80035a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035aa:	f10a 0a01 	add.w	sl, sl, #1
 80035ae:	9304      	str	r3, [sp, #16]
 80035b0:	9307      	str	r3, [sp, #28]
 80035b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035b6:	931a      	str	r3, [sp, #104]	; 0x68
 80035b8:	4654      	mov	r4, sl
 80035ba:	2205      	movs	r2, #5
 80035bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035c0:	4851      	ldr	r0, [pc, #324]	; (8003708 <_svfiprintf_r+0x1ec>)
 80035c2:	f7fc fe1d 	bl	8000200 <memchr>
 80035c6:	9a04      	ldr	r2, [sp, #16]
 80035c8:	b9d8      	cbnz	r0, 8003602 <_svfiprintf_r+0xe6>
 80035ca:	06d0      	lsls	r0, r2, #27
 80035cc:	bf44      	itt	mi
 80035ce:	2320      	movmi	r3, #32
 80035d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035d4:	0711      	lsls	r1, r2, #28
 80035d6:	bf44      	itt	mi
 80035d8:	232b      	movmi	r3, #43	; 0x2b
 80035da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035de:	f89a 3000 	ldrb.w	r3, [sl]
 80035e2:	2b2a      	cmp	r3, #42	; 0x2a
 80035e4:	d015      	beq.n	8003612 <_svfiprintf_r+0xf6>
 80035e6:	9a07      	ldr	r2, [sp, #28]
 80035e8:	4654      	mov	r4, sl
 80035ea:	2000      	movs	r0, #0
 80035ec:	f04f 0c0a 	mov.w	ip, #10
 80035f0:	4621      	mov	r1, r4
 80035f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035f6:	3b30      	subs	r3, #48	; 0x30
 80035f8:	2b09      	cmp	r3, #9
 80035fa:	d94e      	bls.n	800369a <_svfiprintf_r+0x17e>
 80035fc:	b1b0      	cbz	r0, 800362c <_svfiprintf_r+0x110>
 80035fe:	9207      	str	r2, [sp, #28]
 8003600:	e014      	b.n	800362c <_svfiprintf_r+0x110>
 8003602:	eba0 0308 	sub.w	r3, r0, r8
 8003606:	fa09 f303 	lsl.w	r3, r9, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	9304      	str	r3, [sp, #16]
 800360e:	46a2      	mov	sl, r4
 8003610:	e7d2      	b.n	80035b8 <_svfiprintf_r+0x9c>
 8003612:	9b03      	ldr	r3, [sp, #12]
 8003614:	1d19      	adds	r1, r3, #4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	9103      	str	r1, [sp, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	bfbb      	ittet	lt
 800361e:	425b      	neglt	r3, r3
 8003620:	f042 0202 	orrlt.w	r2, r2, #2
 8003624:	9307      	strge	r3, [sp, #28]
 8003626:	9307      	strlt	r3, [sp, #28]
 8003628:	bfb8      	it	lt
 800362a:	9204      	strlt	r2, [sp, #16]
 800362c:	7823      	ldrb	r3, [r4, #0]
 800362e:	2b2e      	cmp	r3, #46	; 0x2e
 8003630:	d10c      	bne.n	800364c <_svfiprintf_r+0x130>
 8003632:	7863      	ldrb	r3, [r4, #1]
 8003634:	2b2a      	cmp	r3, #42	; 0x2a
 8003636:	d135      	bne.n	80036a4 <_svfiprintf_r+0x188>
 8003638:	9b03      	ldr	r3, [sp, #12]
 800363a:	1d1a      	adds	r2, r3, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	9203      	str	r2, [sp, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	bfb8      	it	lt
 8003644:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003648:	3402      	adds	r4, #2
 800364a:	9305      	str	r3, [sp, #20]
 800364c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003718 <_svfiprintf_r+0x1fc>
 8003650:	7821      	ldrb	r1, [r4, #0]
 8003652:	2203      	movs	r2, #3
 8003654:	4650      	mov	r0, sl
 8003656:	f7fc fdd3 	bl	8000200 <memchr>
 800365a:	b140      	cbz	r0, 800366e <_svfiprintf_r+0x152>
 800365c:	2340      	movs	r3, #64	; 0x40
 800365e:	eba0 000a 	sub.w	r0, r0, sl
 8003662:	fa03 f000 	lsl.w	r0, r3, r0
 8003666:	9b04      	ldr	r3, [sp, #16]
 8003668:	4303      	orrs	r3, r0
 800366a:	3401      	adds	r4, #1
 800366c:	9304      	str	r3, [sp, #16]
 800366e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003672:	4826      	ldr	r0, [pc, #152]	; (800370c <_svfiprintf_r+0x1f0>)
 8003674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003678:	2206      	movs	r2, #6
 800367a:	f7fc fdc1 	bl	8000200 <memchr>
 800367e:	2800      	cmp	r0, #0
 8003680:	d038      	beq.n	80036f4 <_svfiprintf_r+0x1d8>
 8003682:	4b23      	ldr	r3, [pc, #140]	; (8003710 <_svfiprintf_r+0x1f4>)
 8003684:	bb1b      	cbnz	r3, 80036ce <_svfiprintf_r+0x1b2>
 8003686:	9b03      	ldr	r3, [sp, #12]
 8003688:	3307      	adds	r3, #7
 800368a:	f023 0307 	bic.w	r3, r3, #7
 800368e:	3308      	adds	r3, #8
 8003690:	9303      	str	r3, [sp, #12]
 8003692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003694:	4433      	add	r3, r6
 8003696:	9309      	str	r3, [sp, #36]	; 0x24
 8003698:	e767      	b.n	800356a <_svfiprintf_r+0x4e>
 800369a:	fb0c 3202 	mla	r2, ip, r2, r3
 800369e:	460c      	mov	r4, r1
 80036a0:	2001      	movs	r0, #1
 80036a2:	e7a5      	b.n	80035f0 <_svfiprintf_r+0xd4>
 80036a4:	2300      	movs	r3, #0
 80036a6:	3401      	adds	r4, #1
 80036a8:	9305      	str	r3, [sp, #20]
 80036aa:	4619      	mov	r1, r3
 80036ac:	f04f 0c0a 	mov.w	ip, #10
 80036b0:	4620      	mov	r0, r4
 80036b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036b6:	3a30      	subs	r2, #48	; 0x30
 80036b8:	2a09      	cmp	r2, #9
 80036ba:	d903      	bls.n	80036c4 <_svfiprintf_r+0x1a8>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0c5      	beq.n	800364c <_svfiprintf_r+0x130>
 80036c0:	9105      	str	r1, [sp, #20]
 80036c2:	e7c3      	b.n	800364c <_svfiprintf_r+0x130>
 80036c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80036c8:	4604      	mov	r4, r0
 80036ca:	2301      	movs	r3, #1
 80036cc:	e7f0      	b.n	80036b0 <_svfiprintf_r+0x194>
 80036ce:	ab03      	add	r3, sp, #12
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	462a      	mov	r2, r5
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <_svfiprintf_r+0x1f8>)
 80036d6:	a904      	add	r1, sp, #16
 80036d8:	4638      	mov	r0, r7
 80036da:	f3af 8000 	nop.w
 80036de:	1c42      	adds	r2, r0, #1
 80036e0:	4606      	mov	r6, r0
 80036e2:	d1d6      	bne.n	8003692 <_svfiprintf_r+0x176>
 80036e4:	89ab      	ldrh	r3, [r5, #12]
 80036e6:	065b      	lsls	r3, r3, #25
 80036e8:	f53f af2c 	bmi.w	8003544 <_svfiprintf_r+0x28>
 80036ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ee:	b01d      	add	sp, #116	; 0x74
 80036f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f4:	ab03      	add	r3, sp, #12
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	462a      	mov	r2, r5
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <_svfiprintf_r+0x1f8>)
 80036fc:	a904      	add	r1, sp, #16
 80036fe:	4638      	mov	r0, r7
 8003700:	f000 f87a 	bl	80037f8 <_printf_i>
 8003704:	e7eb      	b.n	80036de <_svfiprintf_r+0x1c2>
 8003706:	bf00      	nop
 8003708:	08003d58 	.word	0x08003d58
 800370c:	08003d62 	.word	0x08003d62
 8003710:	00000000 	.word	0x00000000
 8003714:	08003465 	.word	0x08003465
 8003718:	08003d5e 	.word	0x08003d5e

0800371c <_printf_common>:
 800371c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003720:	4616      	mov	r6, r2
 8003722:	4699      	mov	r9, r3
 8003724:	688a      	ldr	r2, [r1, #8]
 8003726:	690b      	ldr	r3, [r1, #16]
 8003728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800372c:	4293      	cmp	r3, r2
 800372e:	bfb8      	it	lt
 8003730:	4613      	movlt	r3, r2
 8003732:	6033      	str	r3, [r6, #0]
 8003734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003738:	4607      	mov	r7, r0
 800373a:	460c      	mov	r4, r1
 800373c:	b10a      	cbz	r2, 8003742 <_printf_common+0x26>
 800373e:	3301      	adds	r3, #1
 8003740:	6033      	str	r3, [r6, #0]
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	0699      	lsls	r1, r3, #26
 8003746:	bf42      	ittt	mi
 8003748:	6833      	ldrmi	r3, [r6, #0]
 800374a:	3302      	addmi	r3, #2
 800374c:	6033      	strmi	r3, [r6, #0]
 800374e:	6825      	ldr	r5, [r4, #0]
 8003750:	f015 0506 	ands.w	r5, r5, #6
 8003754:	d106      	bne.n	8003764 <_printf_common+0x48>
 8003756:	f104 0a19 	add.w	sl, r4, #25
 800375a:	68e3      	ldr	r3, [r4, #12]
 800375c:	6832      	ldr	r2, [r6, #0]
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	42ab      	cmp	r3, r5
 8003762:	dc26      	bgt.n	80037b2 <_printf_common+0x96>
 8003764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003768:	1e13      	subs	r3, r2, #0
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	bf18      	it	ne
 800376e:	2301      	movne	r3, #1
 8003770:	0692      	lsls	r2, r2, #26
 8003772:	d42b      	bmi.n	80037cc <_printf_common+0xb0>
 8003774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003778:	4649      	mov	r1, r9
 800377a:	4638      	mov	r0, r7
 800377c:	47c0      	blx	r8
 800377e:	3001      	adds	r0, #1
 8003780:	d01e      	beq.n	80037c0 <_printf_common+0xa4>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	68e5      	ldr	r5, [r4, #12]
 8003786:	6832      	ldr	r2, [r6, #0]
 8003788:	f003 0306 	and.w	r3, r3, #6
 800378c:	2b04      	cmp	r3, #4
 800378e:	bf08      	it	eq
 8003790:	1aad      	subeq	r5, r5, r2
 8003792:	68a3      	ldr	r3, [r4, #8]
 8003794:	6922      	ldr	r2, [r4, #16]
 8003796:	bf0c      	ite	eq
 8003798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800379c:	2500      	movne	r5, #0
 800379e:	4293      	cmp	r3, r2
 80037a0:	bfc4      	itt	gt
 80037a2:	1a9b      	subgt	r3, r3, r2
 80037a4:	18ed      	addgt	r5, r5, r3
 80037a6:	2600      	movs	r6, #0
 80037a8:	341a      	adds	r4, #26
 80037aa:	42b5      	cmp	r5, r6
 80037ac:	d11a      	bne.n	80037e4 <_printf_common+0xc8>
 80037ae:	2000      	movs	r0, #0
 80037b0:	e008      	b.n	80037c4 <_printf_common+0xa8>
 80037b2:	2301      	movs	r3, #1
 80037b4:	4652      	mov	r2, sl
 80037b6:	4649      	mov	r1, r9
 80037b8:	4638      	mov	r0, r7
 80037ba:	47c0      	blx	r8
 80037bc:	3001      	adds	r0, #1
 80037be:	d103      	bne.n	80037c8 <_printf_common+0xac>
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	3501      	adds	r5, #1
 80037ca:	e7c6      	b.n	800375a <_printf_common+0x3e>
 80037cc:	18e1      	adds	r1, r4, r3
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	2030      	movs	r0, #48	; 0x30
 80037d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037d6:	4422      	add	r2, r4
 80037d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037e0:	3302      	adds	r3, #2
 80037e2:	e7c7      	b.n	8003774 <_printf_common+0x58>
 80037e4:	2301      	movs	r3, #1
 80037e6:	4622      	mov	r2, r4
 80037e8:	4649      	mov	r1, r9
 80037ea:	4638      	mov	r0, r7
 80037ec:	47c0      	blx	r8
 80037ee:	3001      	adds	r0, #1
 80037f0:	d0e6      	beq.n	80037c0 <_printf_common+0xa4>
 80037f2:	3601      	adds	r6, #1
 80037f4:	e7d9      	b.n	80037aa <_printf_common+0x8e>
	...

080037f8 <_printf_i>:
 80037f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037fc:	7e0f      	ldrb	r7, [r1, #24]
 80037fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003800:	2f78      	cmp	r7, #120	; 0x78
 8003802:	4691      	mov	r9, r2
 8003804:	4680      	mov	r8, r0
 8003806:	460c      	mov	r4, r1
 8003808:	469a      	mov	sl, r3
 800380a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800380e:	d807      	bhi.n	8003820 <_printf_i+0x28>
 8003810:	2f62      	cmp	r7, #98	; 0x62
 8003812:	d80a      	bhi.n	800382a <_printf_i+0x32>
 8003814:	2f00      	cmp	r7, #0
 8003816:	f000 80d8 	beq.w	80039ca <_printf_i+0x1d2>
 800381a:	2f58      	cmp	r7, #88	; 0x58
 800381c:	f000 80a3 	beq.w	8003966 <_printf_i+0x16e>
 8003820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003828:	e03a      	b.n	80038a0 <_printf_i+0xa8>
 800382a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800382e:	2b15      	cmp	r3, #21
 8003830:	d8f6      	bhi.n	8003820 <_printf_i+0x28>
 8003832:	a101      	add	r1, pc, #4	; (adr r1, 8003838 <_printf_i+0x40>)
 8003834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003838:	08003891 	.word	0x08003891
 800383c:	080038a5 	.word	0x080038a5
 8003840:	08003821 	.word	0x08003821
 8003844:	08003821 	.word	0x08003821
 8003848:	08003821 	.word	0x08003821
 800384c:	08003821 	.word	0x08003821
 8003850:	080038a5 	.word	0x080038a5
 8003854:	08003821 	.word	0x08003821
 8003858:	08003821 	.word	0x08003821
 800385c:	08003821 	.word	0x08003821
 8003860:	08003821 	.word	0x08003821
 8003864:	080039b1 	.word	0x080039b1
 8003868:	080038d5 	.word	0x080038d5
 800386c:	08003993 	.word	0x08003993
 8003870:	08003821 	.word	0x08003821
 8003874:	08003821 	.word	0x08003821
 8003878:	080039d3 	.word	0x080039d3
 800387c:	08003821 	.word	0x08003821
 8003880:	080038d5 	.word	0x080038d5
 8003884:	08003821 	.word	0x08003821
 8003888:	08003821 	.word	0x08003821
 800388c:	0800399b 	.word	0x0800399b
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	1d1a      	adds	r2, r3, #4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	602a      	str	r2, [r5, #0]
 8003898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800389c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0a3      	b.n	80039ec <_printf_i+0x1f4>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	6829      	ldr	r1, [r5, #0]
 80038a8:	0606      	lsls	r6, r0, #24
 80038aa:	f101 0304 	add.w	r3, r1, #4
 80038ae:	d50a      	bpl.n	80038c6 <_printf_i+0xce>
 80038b0:	680e      	ldr	r6, [r1, #0]
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	2e00      	cmp	r6, #0
 80038b6:	da03      	bge.n	80038c0 <_printf_i+0xc8>
 80038b8:	232d      	movs	r3, #45	; 0x2d
 80038ba:	4276      	negs	r6, r6
 80038bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c0:	485e      	ldr	r0, [pc, #376]	; (8003a3c <_printf_i+0x244>)
 80038c2:	230a      	movs	r3, #10
 80038c4:	e019      	b.n	80038fa <_printf_i+0x102>
 80038c6:	680e      	ldr	r6, [r1, #0]
 80038c8:	602b      	str	r3, [r5, #0]
 80038ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038ce:	bf18      	it	ne
 80038d0:	b236      	sxthne	r6, r6
 80038d2:	e7ef      	b.n	80038b4 <_printf_i+0xbc>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	1d19      	adds	r1, r3, #4
 80038da:	6029      	str	r1, [r5, #0]
 80038dc:	0601      	lsls	r1, r0, #24
 80038de:	d501      	bpl.n	80038e4 <_printf_i+0xec>
 80038e0:	681e      	ldr	r6, [r3, #0]
 80038e2:	e002      	b.n	80038ea <_printf_i+0xf2>
 80038e4:	0646      	lsls	r6, r0, #25
 80038e6:	d5fb      	bpl.n	80038e0 <_printf_i+0xe8>
 80038e8:	881e      	ldrh	r6, [r3, #0]
 80038ea:	4854      	ldr	r0, [pc, #336]	; (8003a3c <_printf_i+0x244>)
 80038ec:	2f6f      	cmp	r7, #111	; 0x6f
 80038ee:	bf0c      	ite	eq
 80038f0:	2308      	moveq	r3, #8
 80038f2:	230a      	movne	r3, #10
 80038f4:	2100      	movs	r1, #0
 80038f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038fa:	6865      	ldr	r5, [r4, #4]
 80038fc:	60a5      	str	r5, [r4, #8]
 80038fe:	2d00      	cmp	r5, #0
 8003900:	bfa2      	ittt	ge
 8003902:	6821      	ldrge	r1, [r4, #0]
 8003904:	f021 0104 	bicge.w	r1, r1, #4
 8003908:	6021      	strge	r1, [r4, #0]
 800390a:	b90e      	cbnz	r6, 8003910 <_printf_i+0x118>
 800390c:	2d00      	cmp	r5, #0
 800390e:	d04d      	beq.n	80039ac <_printf_i+0x1b4>
 8003910:	4615      	mov	r5, r2
 8003912:	fbb6 f1f3 	udiv	r1, r6, r3
 8003916:	fb03 6711 	mls	r7, r3, r1, r6
 800391a:	5dc7      	ldrb	r7, [r0, r7]
 800391c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003920:	4637      	mov	r7, r6
 8003922:	42bb      	cmp	r3, r7
 8003924:	460e      	mov	r6, r1
 8003926:	d9f4      	bls.n	8003912 <_printf_i+0x11a>
 8003928:	2b08      	cmp	r3, #8
 800392a:	d10b      	bne.n	8003944 <_printf_i+0x14c>
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	07de      	lsls	r6, r3, #31
 8003930:	d508      	bpl.n	8003944 <_printf_i+0x14c>
 8003932:	6923      	ldr	r3, [r4, #16]
 8003934:	6861      	ldr	r1, [r4, #4]
 8003936:	4299      	cmp	r1, r3
 8003938:	bfde      	ittt	le
 800393a:	2330      	movle	r3, #48	; 0x30
 800393c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003940:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003944:	1b52      	subs	r2, r2, r5
 8003946:	6122      	str	r2, [r4, #16]
 8003948:	f8cd a000 	str.w	sl, [sp]
 800394c:	464b      	mov	r3, r9
 800394e:	aa03      	add	r2, sp, #12
 8003950:	4621      	mov	r1, r4
 8003952:	4640      	mov	r0, r8
 8003954:	f7ff fee2 	bl	800371c <_printf_common>
 8003958:	3001      	adds	r0, #1
 800395a:	d14c      	bne.n	80039f6 <_printf_i+0x1fe>
 800395c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003960:	b004      	add	sp, #16
 8003962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003966:	4835      	ldr	r0, [pc, #212]	; (8003a3c <_printf_i+0x244>)
 8003968:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800396c:	6829      	ldr	r1, [r5, #0]
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	f851 6b04 	ldr.w	r6, [r1], #4
 8003974:	6029      	str	r1, [r5, #0]
 8003976:	061d      	lsls	r5, r3, #24
 8003978:	d514      	bpl.n	80039a4 <_printf_i+0x1ac>
 800397a:	07df      	lsls	r7, r3, #31
 800397c:	bf44      	itt	mi
 800397e:	f043 0320 	orrmi.w	r3, r3, #32
 8003982:	6023      	strmi	r3, [r4, #0]
 8003984:	b91e      	cbnz	r6, 800398e <_printf_i+0x196>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	f023 0320 	bic.w	r3, r3, #32
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	2310      	movs	r3, #16
 8003990:	e7b0      	b.n	80038f4 <_printf_i+0xfc>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	f043 0320 	orr.w	r3, r3, #32
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	2378      	movs	r3, #120	; 0x78
 800399c:	4828      	ldr	r0, [pc, #160]	; (8003a40 <_printf_i+0x248>)
 800399e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039a2:	e7e3      	b.n	800396c <_printf_i+0x174>
 80039a4:	0659      	lsls	r1, r3, #25
 80039a6:	bf48      	it	mi
 80039a8:	b2b6      	uxthmi	r6, r6
 80039aa:	e7e6      	b.n	800397a <_printf_i+0x182>
 80039ac:	4615      	mov	r5, r2
 80039ae:	e7bb      	b.n	8003928 <_printf_i+0x130>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	6826      	ldr	r6, [r4, #0]
 80039b4:	6961      	ldr	r1, [r4, #20]
 80039b6:	1d18      	adds	r0, r3, #4
 80039b8:	6028      	str	r0, [r5, #0]
 80039ba:	0635      	lsls	r5, r6, #24
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	d501      	bpl.n	80039c4 <_printf_i+0x1cc>
 80039c0:	6019      	str	r1, [r3, #0]
 80039c2:	e002      	b.n	80039ca <_printf_i+0x1d2>
 80039c4:	0670      	lsls	r0, r6, #25
 80039c6:	d5fb      	bpl.n	80039c0 <_printf_i+0x1c8>
 80039c8:	8019      	strh	r1, [r3, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	4615      	mov	r5, r2
 80039d0:	e7ba      	b.n	8003948 <_printf_i+0x150>
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	1d1a      	adds	r2, r3, #4
 80039d6:	602a      	str	r2, [r5, #0]
 80039d8:	681d      	ldr	r5, [r3, #0]
 80039da:	6862      	ldr	r2, [r4, #4]
 80039dc:	2100      	movs	r1, #0
 80039de:	4628      	mov	r0, r5
 80039e0:	f7fc fc0e 	bl	8000200 <memchr>
 80039e4:	b108      	cbz	r0, 80039ea <_printf_i+0x1f2>
 80039e6:	1b40      	subs	r0, r0, r5
 80039e8:	6060      	str	r0, [r4, #4]
 80039ea:	6863      	ldr	r3, [r4, #4]
 80039ec:	6123      	str	r3, [r4, #16]
 80039ee:	2300      	movs	r3, #0
 80039f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f4:	e7a8      	b.n	8003948 <_printf_i+0x150>
 80039f6:	6923      	ldr	r3, [r4, #16]
 80039f8:	462a      	mov	r2, r5
 80039fa:	4649      	mov	r1, r9
 80039fc:	4640      	mov	r0, r8
 80039fe:	47d0      	blx	sl
 8003a00:	3001      	adds	r0, #1
 8003a02:	d0ab      	beq.n	800395c <_printf_i+0x164>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	079b      	lsls	r3, r3, #30
 8003a08:	d413      	bmi.n	8003a32 <_printf_i+0x23a>
 8003a0a:	68e0      	ldr	r0, [r4, #12]
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	4298      	cmp	r0, r3
 8003a10:	bfb8      	it	lt
 8003a12:	4618      	movlt	r0, r3
 8003a14:	e7a4      	b.n	8003960 <_printf_i+0x168>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4632      	mov	r2, r6
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	47d0      	blx	sl
 8003a20:	3001      	adds	r0, #1
 8003a22:	d09b      	beq.n	800395c <_printf_i+0x164>
 8003a24:	3501      	adds	r5, #1
 8003a26:	68e3      	ldr	r3, [r4, #12]
 8003a28:	9903      	ldr	r1, [sp, #12]
 8003a2a:	1a5b      	subs	r3, r3, r1
 8003a2c:	42ab      	cmp	r3, r5
 8003a2e:	dcf2      	bgt.n	8003a16 <_printf_i+0x21e>
 8003a30:	e7eb      	b.n	8003a0a <_printf_i+0x212>
 8003a32:	2500      	movs	r5, #0
 8003a34:	f104 0619 	add.w	r6, r4, #25
 8003a38:	e7f5      	b.n	8003a26 <_printf_i+0x22e>
 8003a3a:	bf00      	nop
 8003a3c:	08003d69 	.word	0x08003d69
 8003a40:	08003d7a 	.word	0x08003d7a

08003a44 <_sbrk_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4d06      	ldr	r5, [pc, #24]	; (8003a60 <_sbrk_r+0x1c>)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	602b      	str	r3, [r5, #0]
 8003a50:	f7ff f838 	bl	8002ac4 <_sbrk>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_sbrk_r+0x1a>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_sbrk_r+0x1a>
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	20000140 	.word	0x20000140

08003a64 <__sread>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	460c      	mov	r4, r1
 8003a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a6c:	f000 f8f8 	bl	8003c60 <_read_r>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	bfab      	itete	ge
 8003a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a76:	89a3      	ldrhlt	r3, [r4, #12]
 8003a78:	181b      	addge	r3, r3, r0
 8003a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a7e:	bfac      	ite	ge
 8003a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a82:	81a3      	strhlt	r3, [r4, #12]
 8003a84:	bd10      	pop	{r4, pc}

08003a86 <__swrite>:
 8003a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8a:	461f      	mov	r7, r3
 8003a8c:	898b      	ldrh	r3, [r1, #12]
 8003a8e:	05db      	lsls	r3, r3, #23
 8003a90:	4605      	mov	r5, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	4616      	mov	r6, r2
 8003a96:	d505      	bpl.n	8003aa4 <__swrite+0x1e>
 8003a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f000 f868 	bl	8003b74 <_lseek_r>
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aba:	f000 b817 	b.w	8003aec <_write_r>

08003abe <__sseek>:
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac6:	f000 f855 	bl	8003b74 <_lseek_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	bf15      	itete	ne
 8003ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ada:	81a3      	strheq	r3, [r4, #12]
 8003adc:	bf18      	it	ne
 8003ade:	81a3      	strhne	r3, [r4, #12]
 8003ae0:	bd10      	pop	{r4, pc}

08003ae2 <__sclose>:
 8003ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae6:	f000 b813 	b.w	8003b10 <_close_r>
	...

08003aec <_write_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d07      	ldr	r5, [pc, #28]	; (8003b0c <_write_r+0x20>)
 8003af0:	4604      	mov	r4, r0
 8003af2:	4608      	mov	r0, r1
 8003af4:	4611      	mov	r1, r2
 8003af6:	2200      	movs	r2, #0
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fe ff91 	bl	8002a22 <_write>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_write_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_write_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20000140 	.word	0x20000140

08003b10 <_close_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4d06      	ldr	r5, [pc, #24]	; (8003b2c <_close_r+0x1c>)
 8003b14:	2300      	movs	r3, #0
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	f7fe ff9d 	bl	8002a5a <_close>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_close_r+0x1a>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_close_r+0x1a>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	20000140 	.word	0x20000140

08003b30 <_fstat_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4d07      	ldr	r5, [pc, #28]	; (8003b50 <_fstat_r+0x20>)
 8003b34:	2300      	movs	r3, #0
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	602b      	str	r3, [r5, #0]
 8003b3e:	f7fe ff98 	bl	8002a72 <_fstat>
 8003b42:	1c43      	adds	r3, r0, #1
 8003b44:	d102      	bne.n	8003b4c <_fstat_r+0x1c>
 8003b46:	682b      	ldr	r3, [r5, #0]
 8003b48:	b103      	cbz	r3, 8003b4c <_fstat_r+0x1c>
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	bd38      	pop	{r3, r4, r5, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000140 	.word	0x20000140

08003b54 <_isatty_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d06      	ldr	r5, [pc, #24]	; (8003b70 <_isatty_r+0x1c>)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	602b      	str	r3, [r5, #0]
 8003b60:	f7fe ff97 	bl	8002a92 <_isatty>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d102      	bne.n	8003b6e <_isatty_r+0x1a>
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	b103      	cbz	r3, 8003b6e <_isatty_r+0x1a>
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
 8003b70:	20000140 	.word	0x20000140

08003b74 <_lseek_r>:
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4d07      	ldr	r5, [pc, #28]	; (8003b94 <_lseek_r+0x20>)
 8003b78:	4604      	mov	r4, r0
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	2200      	movs	r2, #0
 8003b80:	602a      	str	r2, [r5, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f7fe ff90 	bl	8002aa8 <_lseek>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_lseek_r+0x1e>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_lseek_r+0x1e>
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	20000140 	.word	0x20000140

08003b98 <memcpy>:
 8003b98:	440a      	add	r2, r1
 8003b9a:	4291      	cmp	r1, r2
 8003b9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ba0:	d100      	bne.n	8003ba4 <memcpy+0xc>
 8003ba2:	4770      	bx	lr
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bae:	4291      	cmp	r1, r2
 8003bb0:	d1f9      	bne.n	8003ba6 <memcpy+0xe>
 8003bb2:	bd10      	pop	{r4, pc}

08003bb4 <memmove>:
 8003bb4:	4288      	cmp	r0, r1
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	eb01 0402 	add.w	r4, r1, r2
 8003bbc:	d902      	bls.n	8003bc4 <memmove+0x10>
 8003bbe:	4284      	cmp	r4, r0
 8003bc0:	4623      	mov	r3, r4
 8003bc2:	d807      	bhi.n	8003bd4 <memmove+0x20>
 8003bc4:	1e43      	subs	r3, r0, #1
 8003bc6:	42a1      	cmp	r1, r4
 8003bc8:	d008      	beq.n	8003bdc <memmove+0x28>
 8003bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bd2:	e7f8      	b.n	8003bc6 <memmove+0x12>
 8003bd4:	4402      	add	r2, r0
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	428a      	cmp	r2, r1
 8003bda:	d100      	bne.n	8003bde <memmove+0x2a>
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003be6:	e7f7      	b.n	8003bd8 <memmove+0x24>

08003be8 <__malloc_lock>:
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <__malloc_lock+0x8>)
 8003bea:	f7ff baf3 	b.w	80031d4 <__retarget_lock_acquire_recursive>
 8003bee:	bf00      	nop
 8003bf0:	20000134 	.word	0x20000134

08003bf4 <__malloc_unlock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <__malloc_unlock+0x8>)
 8003bf6:	f7ff baee 	b.w	80031d6 <__retarget_lock_release_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	20000134 	.word	0x20000134

08003c00 <_realloc_r>:
 8003c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c04:	4680      	mov	r8, r0
 8003c06:	4614      	mov	r4, r2
 8003c08:	460e      	mov	r6, r1
 8003c0a:	b921      	cbnz	r1, 8003c16 <_realloc_r+0x16>
 8003c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c10:	4611      	mov	r1, r2
 8003c12:	f7ff bbb3 	b.w	800337c <_malloc_r>
 8003c16:	b92a      	cbnz	r2, 8003c24 <_realloc_r+0x24>
 8003c18:	f7ff fb44 	bl	80032a4 <_free_r>
 8003c1c:	4625      	mov	r5, r4
 8003c1e:	4628      	mov	r0, r5
 8003c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c24:	f000 f82e 	bl	8003c84 <_malloc_usable_size_r>
 8003c28:	4284      	cmp	r4, r0
 8003c2a:	4607      	mov	r7, r0
 8003c2c:	d802      	bhi.n	8003c34 <_realloc_r+0x34>
 8003c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c32:	d812      	bhi.n	8003c5a <_realloc_r+0x5a>
 8003c34:	4621      	mov	r1, r4
 8003c36:	4640      	mov	r0, r8
 8003c38:	f7ff fba0 	bl	800337c <_malloc_r>
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d0ed      	beq.n	8003c1e <_realloc_r+0x1e>
 8003c42:	42bc      	cmp	r4, r7
 8003c44:	4622      	mov	r2, r4
 8003c46:	4631      	mov	r1, r6
 8003c48:	bf28      	it	cs
 8003c4a:	463a      	movcs	r2, r7
 8003c4c:	f7ff ffa4 	bl	8003b98 <memcpy>
 8003c50:	4631      	mov	r1, r6
 8003c52:	4640      	mov	r0, r8
 8003c54:	f7ff fb26 	bl	80032a4 <_free_r>
 8003c58:	e7e1      	b.n	8003c1e <_realloc_r+0x1e>
 8003c5a:	4635      	mov	r5, r6
 8003c5c:	e7df      	b.n	8003c1e <_realloc_r+0x1e>
	...

08003c60 <_read_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d07      	ldr	r5, [pc, #28]	; (8003c80 <_read_r+0x20>)
 8003c64:	4604      	mov	r4, r0
 8003c66:	4608      	mov	r0, r1
 8003c68:	4611      	mov	r1, r2
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	602a      	str	r2, [r5, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f7fe feba 	bl	80029e8 <_read>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	d102      	bne.n	8003c7e <_read_r+0x1e>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	b103      	cbz	r3, 8003c7e <_read_r+0x1e>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	20000140 	.word	0x20000140

08003c84 <_malloc_usable_size_r>:
 8003c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c88:	1f18      	subs	r0, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bfbc      	itt	lt
 8003c8e:	580b      	ldrlt	r3, [r1, r0]
 8003c90:	18c0      	addlt	r0, r0, r3
 8003c92:	4770      	bx	lr

08003c94 <_init>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr

08003ca0 <_fini>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	bf00      	nop
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr
