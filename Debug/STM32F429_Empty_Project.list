
STM32F429_Empty_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a04  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c38  08002c38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c40  08002c40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000088  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7ea  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1e  00000000  00000000  0002a88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f8  00000000  00000000  0002cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d76  00000000  00000000  0002d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fddf  00000000  00000000  00056706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000feaeb  00000000  00000000  000664e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164fd0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032d0  00000000  00000000  00165020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002b98 	.word	0x08002b98

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08002b98 	.word	0x08002b98

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <GPIO_Init>:
 */

#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef *port, uint16_t pin_number)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef gpio_init_struct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

	gpio_init_struct.Pin = pin_number;
 800050c:	887b      	ldrh	r3, [r7, #2]
 800050e:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
	gpio_init_struct.Speed = GPIO_SPEED_FAST;
 8000518:	2302      	movs	r3, #2
 800051a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(port, &gpio_init_struct);
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 fab0 	bl	8000a88 <HAL_GPIO_Init>
}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <Clock_Enable>:

void Clock_Enable(GPIO_TypeDef *port)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if(port == GPIOA)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a4f      	ldr	r2, [pc, #316]	; (8000678 <Clock_Enable+0x148>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d10e      	bne.n	800055e <Clock_Enable+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
 8000544:	4b4d      	ldr	r3, [pc, #308]	; (800067c <Clock_Enable+0x14c>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a4c      	ldr	r2, [pc, #304]	; (800067c <Clock_Enable+0x14c>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6313      	str	r3, [r2, #48]	; 0x30
 8000550:	4b4a      	ldr	r3, [pc, #296]	; (800067c <Clock_Enable+0x14c>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
 800055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		__HAL_RCC_GPIOG_CLK_ENABLE();
	else if(port == GPIOH)
		__HAL_RCC_GPIOH_CLK_ENABLE();
	else
		printf("Enter Valid Port\r\n");
}
 800055c:	e087      	b.n	800066e <Clock_Enable+0x13e>
	else if(port == GPIOB)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a47      	ldr	r2, [pc, #284]	; (8000680 <Clock_Enable+0x150>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d10e      	bne.n	8000584 <Clock_Enable+0x54>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
 800056a:	4b44      	ldr	r3, [pc, #272]	; (800067c <Clock_Enable+0x14c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a43      	ldr	r2, [pc, #268]	; (800067c <Clock_Enable+0x14c>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b41      	ldr	r3, [pc, #260]	; (800067c <Clock_Enable+0x14c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	623b      	str	r3, [r7, #32]
 8000580:	6a3b      	ldr	r3, [r7, #32]
}
 8000582:	e074      	b.n	800066e <Clock_Enable+0x13e>
	else if(port == GPIOC)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a3f      	ldr	r2, [pc, #252]	; (8000684 <Clock_Enable+0x154>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d10e      	bne.n	80005aa <Clock_Enable+0x7a>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <Clock_Enable+0x14c>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4a39      	ldr	r2, [pc, #228]	; (800067c <Clock_Enable+0x14c>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6313      	str	r3, [r2, #48]	; 0x30
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <Clock_Enable+0x14c>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	61fb      	str	r3, [r7, #28]
 80005a6:	69fb      	ldr	r3, [r7, #28]
}
 80005a8:	e061      	b.n	800066e <Clock_Enable+0x13e>
	else if(port == GPIOD)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a36      	ldr	r2, [pc, #216]	; (8000688 <Clock_Enable+0x158>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d10e      	bne.n	80005d0 <Clock_Enable+0xa0>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <Clock_Enable+0x14c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a30      	ldr	r2, [pc, #192]	; (800067c <Clock_Enable+0x14c>)
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <Clock_Enable+0x14c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0308 	and.w	r3, r3, #8
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	69bb      	ldr	r3, [r7, #24]
}
 80005ce:	e04e      	b.n	800066e <Clock_Enable+0x13e>
	else if(port == GPIOE)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a2e      	ldr	r2, [pc, #184]	; (800068c <Clock_Enable+0x15c>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d10e      	bne.n	80005f6 <Clock_Enable+0xc6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <Clock_Enable+0x14c>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a26      	ldr	r2, [pc, #152]	; (800067c <Clock_Enable+0x14c>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <Clock_Enable+0x14c>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	697b      	ldr	r3, [r7, #20]
}
 80005f4:	e03b      	b.n	800066e <Clock_Enable+0x13e>
	else if(port == GPIOF)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a25      	ldr	r2, [pc, #148]	; (8000690 <Clock_Enable+0x160>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d10e      	bne.n	800061c <Clock_Enable+0xec>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <Clock_Enable+0x14c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <Clock_Enable+0x14c>)
 8000608:	f043 0320 	orr.w	r3, r3, #32
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <Clock_Enable+0x14c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0320 	and.w	r3, r3, #32
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
}
 800061a:	e028      	b.n	800066e <Clock_Enable+0x13e>
	else if(port == GPIOG)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <Clock_Enable+0x164>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d10e      	bne.n	8000642 <Clock_Enable+0x112>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <Clock_Enable+0x14c>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <Clock_Enable+0x14c>)
 800062e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <Clock_Enable+0x14c>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	e015      	b.n	800066e <Clock_Enable+0x13e>
	else if(port == GPIOH)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a14      	ldr	r2, [pc, #80]	; (8000698 <Clock_Enable+0x168>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d10e      	bne.n	8000668 <Clock_Enable+0x138>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <Clock_Enable+0x14c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <Clock_Enable+0x14c>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <Clock_Enable+0x14c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
}
 8000666:	e002      	b.n	800066e <Clock_Enable+0x13e>
		printf("Enter Valid Port\r\n");
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <Clock_Enable+0x16c>)
 800066a:	f001 fe05 	bl	8002278 <puts>
}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020000 	.word	0x40020000
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40021000 	.word	0x40021000
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800
 8000698:	40021c00 	.word	0x40021c00
 800069c:	08002bb0 	.word	0x08002bb0

080006a0 <GPIO_Pin_Toggle>:

inline void GPIO_Pin_Toggle(GPIO_TypeDef *port, uint16_t pin_number)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(port, pin_number);
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	4619      	mov	r1, r3
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 fb95 	bl	8000de0 <HAL_GPIO_TogglePin>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <Timer_Init>:
TIM_HandleTypeDef htim;

volatile uint32_t sysTick = 0;;

void Timer_Init(TIM_TypeDef *Timer)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	htim.Instance = Timer;
 80006c8:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <Timer_Init+0x34>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
	//htimer.Init.AutoReloadPreload = 1;
	htim.Init.Prescaler = 1;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <Timer_Init+0x34>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	605a      	str	r2, [r3, #4]
	htim.Init.Period = 20000-1;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <Timer_Init+0x34>)
 80006d6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006da:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim) != HAL_OK)
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <Timer_Init+0x34>)
 80006de:	f001 f84d 	bl	800177c <HAL_TIM_Base_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <Timer_Init+0x2c>
	{
		Error_Handler();
 80006e8:	f001 fbda 	bl	8001ea0 <Error_Handler>
	}
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000008c 	.word	0x2000008c

080006f8 <Timer_Start_IT>:
{
	HAL_TIM_Base_Start(&htim);
}

inline void Timer_Start_IT(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <Timer_Start_IT+0x10>)
 80006fe:	f001 f88d 	bl	800181c <HAL_TIM_Base_Start_IT>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000008c 	.word	0x2000008c

0800070c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	sysTick++;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071c:	6013      	str	r3, [r2, #0]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	200000d4 	.word	0x200000d4

08000730 <SysTick_Get>:
inline uint32_t SysTick_Get(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	return sysTick;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <SysTick_Get+0x14>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	200000d4 	.word	0x200000d4

08000748 <SysTick_Set>:
inline void SysTick_Set(uint8_t tmpSysTick)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	sysTick = (uint32_t)tmpSysTick;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4a03      	ldr	r2, [pc, #12]	; (8000764 <SysTick_Set+0x1c>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	200000d4 	.word	0x200000d4

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <HAL_Init+0x40>)
 8000772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_Init+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_Init+0x40>)
 800077e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x40>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x40>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f92b 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f001 fb86 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023c00 	.word	0x40023c00

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f943 	bl	8000a56 <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e8:	f000 f90b 	bl	8000a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004
 8000808:	20000000 	.word	0x20000000

0800080c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000004 	.word	0x20000004
 8000830:	200000d8 	.word	0x200000d8

08000834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	200000d8 	.word	0x200000d8

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	db0b      	blt.n	80008da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 021f 	and.w	r2, r3, #31
 80008c8:	4907      	ldr	r1, [pc, #28]	; (80008e8 <__NVIC_EnableIRQ+0x38>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	2001      	movs	r0, #1
 80008d2:	fa00 f202 	lsl.w	r2, r0, r2
 80008d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	; 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	; 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b8:	d301      	bcc.n	80009be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00f      	b.n	80009de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <SysTick_Config+0x40>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c6:	210f      	movs	r1, #15
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009cc:	f7ff ff8e 	bl	80008ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SysTick_Config+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <SysTick_Config+0x40>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff29 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a14:	f7ff ff3e 	bl	8000894 <__NVIC_GetPriorityGrouping>
 8000a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff ff8e 	bl	8000940 <NVIC_EncodePriority>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff5d 	bl	80008ec <__NVIC_SetPriority>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff31 	bl	80008b0 <__NVIC_EnableIRQ>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffa2 	bl	80009a8 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a72:	f000 f802 	bl	8000a7a <HAL_SYSTICK_Callback>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	e177      	b.n	8000d94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 8166 	bne.w	8000d8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d005      	beq.n	8000ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d130      	bne.n	8000b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4013      	ands	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b10:	2201      	movs	r2, #1
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	f003 0201 	and.w	r2, r3, #1
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d017      	beq.n	8000b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d123      	bne.n	8000bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	69b9      	ldr	r1, [r7, #24]
 8000bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0203 	and.w	r2, r3, #3
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 80c0 	beq.w	8000d8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b66      	ldr	r3, [pc, #408]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a65      	ldr	r2, [pc, #404]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b63      	ldr	r3, [pc, #396]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c2a:	4a61      	ldr	r2, [pc, #388]	; (8000db0 <HAL_GPIO_Init+0x328>)
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3302      	adds	r3, #2
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a58      	ldr	r2, [pc, #352]	; (8000db4 <HAL_GPIO_Init+0x32c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d037      	beq.n	8000cc6 <HAL_GPIO_Init+0x23e>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a57      	ldr	r2, [pc, #348]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d031      	beq.n	8000cc2 <HAL_GPIO_Init+0x23a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a56      	ldr	r2, [pc, #344]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d02b      	beq.n	8000cbe <HAL_GPIO_Init+0x236>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a55      	ldr	r2, [pc, #340]	; (8000dc0 <HAL_GPIO_Init+0x338>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d025      	beq.n	8000cba <HAL_GPIO_Init+0x232>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_GPIO_Init+0x33c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d01f      	beq.n	8000cb6 <HAL_GPIO_Init+0x22e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a53      	ldr	r2, [pc, #332]	; (8000dc8 <HAL_GPIO_Init+0x340>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d019      	beq.n	8000cb2 <HAL_GPIO_Init+0x22a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a52      	ldr	r2, [pc, #328]	; (8000dcc <HAL_GPIO_Init+0x344>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d013      	beq.n	8000cae <HAL_GPIO_Init+0x226>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a51      	ldr	r2, [pc, #324]	; (8000dd0 <HAL_GPIO_Init+0x348>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d00d      	beq.n	8000caa <HAL_GPIO_Init+0x222>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a50      	ldr	r2, [pc, #320]	; (8000dd4 <HAL_GPIO_Init+0x34c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d007      	beq.n	8000ca6 <HAL_GPIO_Init+0x21e>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a4f      	ldr	r2, [pc, #316]	; (8000dd8 <HAL_GPIO_Init+0x350>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_GPIO_Init+0x21a>
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	e012      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	e010      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	e00e      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000caa:	2307      	movs	r3, #7
 8000cac:	e00c      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000cae:	2306      	movs	r3, #6
 8000cb0:	e00a      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	e008      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	e006      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e004      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x240>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	69fa      	ldr	r2, [r7, #28]
 8000cca:	f002 0203 	and.w	r2, r2, #3
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cd8:	4935      	ldr	r1, [pc, #212]	; (8000db0 <HAL_GPIO_Init+0x328>)
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <HAL_GPIO_Init+0x354>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d0a:	4a34      	ldr	r2, [pc, #208]	; (8000ddc <HAL_GPIO_Init+0x354>)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <HAL_GPIO_Init+0x354>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d34:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <HAL_GPIO_Init+0x354>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <HAL_GPIO_Init+0x354>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <HAL_GPIO_Init+0x354>)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_GPIO_Init+0x354>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_GPIO_Init+0x354>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3301      	adds	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	2b0f      	cmp	r3, #15
 8000d98:	f67f ae84 	bls.w	8000aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40013800 	.word	0x40013800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	40020c00 	.word	0x40020c00
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40021400 	.word	0x40021400
 8000dcc:	40021800 	.word	0x40021800
 8000dd0:	40021c00 	.word	0x40021c00
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	40022400 	.word	0x40022400
 8000ddc:	40013c00 	.word	0x40013c00

08000de0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000df2:	887a      	ldrh	r2, [r7, #2]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4013      	ands	r3, r2
 8000df8:	041a      	lsls	r2, r3, #16
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43d9      	mvns	r1, r3
 8000dfe:	887b      	ldrh	r3, [r7, #2]
 8000e00:	400b      	ands	r3, r1
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	619a      	str	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_PWREx_EnableOverDrive+0x94>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e40:	f7ff fcf8 	bl	8000834 <HAL_GetTick>
 8000e44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e46:	e009      	b.n	8000e5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e48:	f7ff fcf4 	bl	8000834 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e56:	d901      	bls.n	8000e5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e01f      	b.n	8000e9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_PWREx_EnableOverDrive+0x98>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e68:	d1ee      	bne.n	8000e48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e70:	f7ff fce0 	bl	8000834 <HAL_GetTick>
 8000e74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e76:	e009      	b.n	8000e8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e78:	f7ff fcdc 	bl	8000834 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e86:	d901      	bls.n	8000e8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e007      	b.n	8000e9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_PWREx_EnableOverDrive+0x98>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e98:	d1ee      	bne.n	8000e78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	420e0040 	.word	0x420e0040
 8000eac:	40007000 	.word	0x40007000
 8000eb0:	420e0044 	.word	0x420e0044

08000eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e267      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d075      	beq.n	8000fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ed2:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d00c      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ede:	4b85      	ldr	r3, [pc, #532]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d112      	bne.n	8000f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eea:	4b82      	ldr	r3, [pc, #520]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ef6:	d10b      	bne.n	8000f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	4b7e      	ldr	r3, [pc, #504]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d05b      	beq.n	8000fbc <HAL_RCC_OscConfig+0x108>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d157      	bne.n	8000fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e242      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f18:	d106      	bne.n	8000f28 <HAL_RCC_OscConfig+0x74>
 8000f1a:	4b76      	ldr	r3, [pc, #472]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a75      	ldr	r2, [pc, #468]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e01d      	b.n	8000f64 <HAL_RCC_OscConfig+0xb0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x98>
 8000f32:	4b70      	ldr	r3, [pc, #448]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a6f      	ldr	r2, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b6d      	ldr	r3, [pc, #436]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a6c      	ldr	r2, [pc, #432]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e00b      	b.n	8000f64 <HAL_RCC_OscConfig+0xb0>
 8000f4c:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a68      	ldr	r2, [pc, #416]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b66      	ldr	r3, [pc, #408]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a65      	ldr	r2, [pc, #404]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc62 	bl	8000834 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fc5e 	bl	8000834 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e207      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f86:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0xc0>
 8000f92:	e014      	b.n	8000fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fc4e 	bl	8000834 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fc4a 	bl	8000834 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e1f3      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	4b51      	ldr	r3, [pc, #324]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0xe8>
 8000fba:	e000      	b.n	8000fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d063      	beq.n	8001092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fca:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fd6:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d11c      	bne.n	800101c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d116      	bne.n	800101c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <HAL_RCC_OscConfig+0x152>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d001      	beq.n	8001006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e1c7      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4937      	ldr	r1, [pc, #220]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001016:	4313      	orrs	r3, r2
 8001018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	e03a      	b.n	8001092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d020      	beq.n	8001066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001024:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_RCC_OscConfig+0x244>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102a:	f7ff fc03 	bl	8000834 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001032:	f7ff fbff 	bl	8000834 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e1a8      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4925      	ldr	r1, [pc, #148]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e015      	b.n	8001092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_RCC_OscConfig+0x244>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106c:	f7ff fbe2 	bl	8000834 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001074:	f7ff fbde 	bl	8000834 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e187      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d036      	beq.n	800110c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d016      	beq.n	80010d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_RCC_OscConfig+0x248>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ac:	f7ff fbc2 	bl	8000834 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fbbe 	bl	8000834 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e167      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 80010c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x200>
 80010d2:	e01b      	b.n	800110c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_RCC_OscConfig+0x248>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010da:	f7ff fbab 	bl	8000834 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e0:	e00e      	b.n	8001100 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fba7 	bl	8000834 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d907      	bls.n	8001100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e150      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
 80010f4:	40023800 	.word	0x40023800
 80010f8:	42470000 	.word	0x42470000
 80010fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1ea      	bne.n	80010e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 8097 	beq.w	8001248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b81      	ldr	r3, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b7d      	ldr	r3, [pc, #500]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a7c      	ldr	r2, [pc, #496]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b77      	ldr	r3, [pc, #476]	; (8001328 <HAL_RCC_OscConfig+0x474>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b74      	ldr	r3, [pc, #464]	; (8001328 <HAL_RCC_OscConfig+0x474>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a73      	ldr	r2, [pc, #460]	; (8001328 <HAL_RCC_OscConfig+0x474>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb67 	bl	8000834 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fb63 	bl	8000834 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e10c      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b6a      	ldr	r3, [pc, #424]	; (8001328 <HAL_RCC_OscConfig+0x474>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x2ea>
 8001190:	4b64      	ldr	r3, [pc, #400]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001194:	4a63      	ldr	r2, [pc, #396]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6713      	str	r3, [r2, #112]	; 0x70
 800119c:	e01c      	b.n	80011d8 <HAL_RCC_OscConfig+0x324>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x30c>
 80011a6:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011aa:	4a5e      	ldr	r2, [pc, #376]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6713      	str	r3, [r2, #112]	; 0x70
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b6:	4a5b      	ldr	r2, [pc, #364]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6713      	str	r3, [r2, #112]	; 0x70
 80011be:	e00b      	b.n	80011d8 <HAL_RCC_OscConfig+0x324>
 80011c0:	4b58      	ldr	r3, [pc, #352]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c4:	4a57      	ldr	r2, [pc, #348]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	; 0x70
 80011cc:	4b55      	ldr	r3, [pc, #340]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d0:	4a54      	ldr	r2, [pc, #336]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011d2:	f023 0304 	bic.w	r3, r3, #4
 80011d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d015      	beq.n	800120c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e0:	f7ff fb28 	bl	8000834 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7ff fb24 	bl	8000834 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e0cb      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0ee      	beq.n	80011e8 <HAL_RCC_OscConfig+0x334>
 800120a:	e014      	b.n	8001236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff fb12 	bl	8000834 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fb0e 	bl	8000834 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e0b5      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1ee      	bne.n	8001214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800123c:	4b39      	ldr	r3, [pc, #228]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a38      	ldr	r2, [pc, #224]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a1 	beq.w	8001394 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b08      	cmp	r3, #8
 800125c:	d05c      	beq.n	8001318 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d141      	bne.n	80012ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <HAL_RCC_OscConfig+0x478>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fae2 	bl	8000834 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fade 	bl	8000834 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e087      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69da      	ldr	r2, [r3, #28]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	019b      	lsls	r3, r3, #6
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	3b01      	subs	r3, #1
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	061b      	lsls	r3, r3, #24
 80012b6:	491b      	ldr	r1, [pc, #108]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_RCC_OscConfig+0x478>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fab7 	bl	8000834 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff fab3 	bl	8000834 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e05c      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x416>
 80012e8:	e054      	b.n	8001394 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_RCC_OscConfig+0x478>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff faa0 	bl	8000834 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fa9c 	bl	8000834 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e045      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x444>
 8001316:	e03d      	b.n	8001394 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d107      	bne.n	8001330 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e038      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000
 800132c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_RCC_OscConfig+0x4ec>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d028      	beq.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001348:	429a      	cmp	r2, r3
 800134a:	d121      	bne.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	429a      	cmp	r2, r3
 8001358:	d11a      	bne.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001360:	4013      	ands	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001368:	4293      	cmp	r3, r2
 800136a:	d111      	bne.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	3b01      	subs	r3, #1
 800137a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d107      	bne.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0cc      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d90c      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800141a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	4313      	orrs	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d044      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d119      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d003      	beq.n	8001462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145e:	2b03      	cmp	r3, #3
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e06f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e067      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f023 0203 	bic.w	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4934      	ldr	r1, [pc, #208]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001494:	f7ff f9ce 	bl	8000834 <HAL_GetTick>
 8001498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149c:	f7ff f9ca 	bl	8000834 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e04f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 020c 	and.w	r2, r3, #12
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1eb      	bne.n	800149c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d20c      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f821 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f92e 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00
 8001560:	40023800 	.word	0x40023800
 8001564:	08002bc4 	.word	0x08002bc4
 8001568:	20000008 	.word	0x20000008
 800156c:	20000000 	.word	0x20000000

08001570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001574:	b094      	sub	sp, #80	; 0x50
 8001576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
 800157c:	2300      	movs	r3, #0
 800157e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001580:	2300      	movs	r3, #0
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001588:	4b79      	ldr	r3, [pc, #484]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d00d      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001594:	2b08      	cmp	r3, #8
 8001596:	f200 80e1 	bhi.w	800175c <HAL_RCC_GetSysClockFreq+0x1ec>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x34>
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d003      	beq.n	80015aa <HAL_RCC_GetSysClockFreq+0x3a>
 80015a2:	e0db      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b73      	ldr	r3, [pc, #460]	; (8001774 <HAL_RCC_GetSysClockFreq+0x204>)
 80015a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80015a8:	e0db      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015aa:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_GetSysClockFreq+0x208>)
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80015ae:	e0d8      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b0:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ba:	4b6d      	ldr	r3, [pc, #436]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d063      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c6:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	099b      	lsrs	r3, r3, #6
 80015cc:	2200      	movs	r2, #0
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80015d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
 80015de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015e2:	4622      	mov	r2, r4
 80015e4:	462b      	mov	r3, r5
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	0159      	lsls	r1, r3, #5
 80015f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f4:	0150      	lsls	r0, r2, #5
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4621      	mov	r1, r4
 80015fc:	1a51      	subs	r1, r2, r1
 80015fe:	6139      	str	r1, [r7, #16]
 8001600:	4629      	mov	r1, r5
 8001602:	eb63 0301 	sbc.w	r3, r3, r1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001614:	4659      	mov	r1, fp
 8001616:	018b      	lsls	r3, r1, #6
 8001618:	4651      	mov	r1, sl
 800161a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800161e:	4651      	mov	r1, sl
 8001620:	018a      	lsls	r2, r1, #6
 8001622:	4651      	mov	r1, sl
 8001624:	ebb2 0801 	subs.w	r8, r2, r1
 8001628:	4659      	mov	r1, fp
 800162a:	eb63 0901 	sbc.w	r9, r3, r1
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800163a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800163e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	4623      	mov	r3, r4
 8001648:	eb18 0303 	adds.w	r3, r8, r3
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	462b      	mov	r3, r5
 8001650:	eb49 0303 	adc.w	r3, r9, r3
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001662:	4629      	mov	r1, r5
 8001664:	024b      	lsls	r3, r1, #9
 8001666:	4621      	mov	r1, r4
 8001668:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800166c:	4621      	mov	r1, r4
 800166e:	024a      	lsls	r2, r1, #9
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001676:	2200      	movs	r2, #0
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
 800167a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800167c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001680:	f7fe fdb4 	bl	80001ec <__aeabi_uldivmod>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4613      	mov	r3, r2
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800168c:	e058      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	099b      	lsrs	r3, r3, #6
 8001694:	2200      	movs	r2, #0
 8001696:	4618      	mov	r0, r3
 8001698:	4611      	mov	r1, r2
 800169a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016a8:	4642      	mov	r2, r8
 80016aa:	464b      	mov	r3, r9
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	0159      	lsls	r1, r3, #5
 80016b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ba:	0150      	lsls	r0, r2, #5
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4641      	mov	r1, r8
 80016c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80016c6:	4649      	mov	r1, r9
 80016c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016e0:	ebb2 040a 	subs.w	r4, r2, sl
 80016e4:	eb63 050b 	sbc.w	r5, r3, fp
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	00eb      	lsls	r3, r5, #3
 80016f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016f6:	00e2      	lsls	r2, r4, #3
 80016f8:	4614      	mov	r4, r2
 80016fa:	461d      	mov	r5, r3
 80016fc:	4643      	mov	r3, r8
 80016fe:	18e3      	adds	r3, r4, r3
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	464b      	mov	r3, r9
 8001704:	eb45 0303 	adc.w	r3, r5, r3
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001716:	4629      	mov	r1, r5
 8001718:	028b      	lsls	r3, r1, #10
 800171a:	4621      	mov	r1, r4
 800171c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001720:	4621      	mov	r1, r4
 8001722:	028a      	lsls	r2, r1, #10
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800172a:	2200      	movs	r2, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	61fa      	str	r2, [r7, #28]
 8001730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001734:	f7fe fd5a 	bl	80001ec <__aeabi_uldivmod>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4613      	mov	r3, r2
 800173e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800175a:	e002      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetSysClockFreq+0x204>)
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001764:	4618      	mov	r0, r3
 8001766:	3750      	adds	r7, #80	; 0x50
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	00f42400 	.word	0x00f42400
 8001778:	007a1200 	.word	0x007a1200

0800177c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e041      	b.n	8001812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fbbc 	bl	8001f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3304      	adds	r3, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4610      	mov	r0, r2
 80017bc:	f000 f9ce 	bl	8001b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d001      	beq.n	8001834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e04e      	b.n	80018d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d022      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x80>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185e:	d01d      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x80>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d018      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x80>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d013      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x80>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_TIM_Base_Start_IT+0xd0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00e      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x80>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d009      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x80>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d004      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x80>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d111      	bne.n	80018c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d010      	beq.n	80018d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018be:	e007      	b.n	80018d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40010000 	.word	0x40010000
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40000800 	.word	0x40000800
 80018ec:	40000c00 	.word	0x40000c00
 80018f0:	40010400 	.word	0x40010400
 80018f4:	40014000 	.word	0x40014000
 80018f8:	40001800 	.word	0x40001800

080018fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d122      	bne.n	8001958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b02      	cmp	r3, #2
 800191e:	d11b      	bne.n	8001958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0202 	mvn.w	r2, #2
 8001928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f8ee 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 8001944:	e005      	b.n	8001952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f8e0 	bl	8001b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f8f1 	bl	8001b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b04      	cmp	r3, #4
 8001964:	d122      	bne.n	80019ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d11b      	bne.n	80019ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f06f 0204 	mvn.w	r2, #4
 800197c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2202      	movs	r2, #2
 8001982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f8c4 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 8001998:	e005      	b.n	80019a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f8b6 	bl	8001b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f8c7 	bl	8001b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d122      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d11b      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0208 	mvn.w	r2, #8
 80019d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2204      	movs	r2, #4
 80019d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f89a 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 80019ec:	e005      	b.n	80019fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f88c 	bl	8001b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f89d 	bl	8001b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d122      	bne.n	8001a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b10      	cmp	r3, #16
 8001a1a:	d11b      	bne.n	8001a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0210 	mvn.w	r2, #16
 8001a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f870 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 8001a40:	e005      	b.n	8001a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f862 	bl	8001b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f873 	bl	8001b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10e      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d107      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0201 	mvn.w	r2, #1
 8001a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fe46 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	2b80      	cmp	r3, #128	; 0x80
 8001a8c:	d10e      	bne.n	8001aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a98:	2b80      	cmp	r3, #128	; 0x80
 8001a9a:	d107      	bne.n	8001aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f902 	bl	8001cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	2b40      	cmp	r3, #64	; 0x40
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d107      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f838 	bl	8001b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d10e      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d107      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0220 	mvn.w	r2, #32
 8001afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8cc 	bl	8001c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <TIM_Base_SetConfig+0x114>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <TIM_Base_SetConfig+0x40>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d00f      	beq.n	8001b9c <TIM_Base_SetConfig+0x40>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3d      	ldr	r2, [pc, #244]	; (8001c74 <TIM_Base_SetConfig+0x118>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <TIM_Base_SetConfig+0x40>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a3c      	ldr	r2, [pc, #240]	; (8001c78 <TIM_Base_SetConfig+0x11c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <TIM_Base_SetConfig+0x40>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <TIM_Base_SetConfig+0x120>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <TIM_Base_SetConfig+0x40>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3a      	ldr	r2, [pc, #232]	; (8001c80 <TIM_Base_SetConfig+0x124>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <TIM_Base_SetConfig+0x114>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02b      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbc:	d027      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <TIM_Base_SetConfig+0x118>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d023      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <TIM_Base_SetConfig+0x11c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01f      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a2a      	ldr	r2, [pc, #168]	; (8001c7c <TIM_Base_SetConfig+0x120>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01b      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <TIM_Base_SetConfig+0x124>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d017      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <TIM_Base_SetConfig+0x128>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <TIM_Base_SetConfig+0x12c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00f      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <TIM_Base_SetConfig+0x130>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <TIM_Base_SetConfig+0x134>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <TIM_Base_SetConfig+0x138>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d003      	beq.n	8001c0e <TIM_Base_SetConfig+0xb2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <TIM_Base_SetConfig+0x13c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d108      	bne.n	8001c20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <TIM_Base_SetConfig+0x114>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d003      	beq.n	8001c54 <TIM_Base_SetConfig+0xf8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <TIM_Base_SetConfig+0x124>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d103      	bne.n	8001c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	615a      	str	r2, [r3, #20]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40000800 	.word	0x40000800
 8001c7c:	40000c00 	.word	0x40000c00
 8001c80:	40010400 	.word	0x40010400
 8001c84:	40014000 	.word	0x40014000
 8001c88:	40014400 	.word	0x40014400
 8001c8c:	40014800 	.word	0x40014800
 8001c90:	40001800 	.word	0x40001800
 8001c94:	40001c00 	.word	0x40001c00
 8001c98:	40002000 	.word	0x40002000

08001c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cc8:	f000 fa24 	bl	8002114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <LoopForever+0xe>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	; (8001d10 <LoopForever+0x16>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cf2:	f000 fa27 	bl	8002144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf6:	f000 f80f 	bl	8001d18 <main>

08001cfa <LoopForever>:

LoopForever:
  b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
  ldr   r0, =_estack
 8001cfc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d08:	08002c48 	.word	0x08002c48
  ldr r2, =_sbss
 8001d0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d10:	200000f8 	.word	0x200000f8

08001d14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC_IRQHandler>
	...

08001d18 <main>:
#include "main.h"

uint32_t led1_Counter = 0;
uint32_t led2_Counter = 0;
int main(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	HAL_Init();
 8001d1c:	f7fe fd24 	bl	8000768 <HAL_Init>
	SystemClock_Config();
 8001d20:	f000 f84e 	bl	8001dc0 <SystemClock_Config>

	Clock_Enable(GPIOG);
 8001d24:	4822      	ldr	r0, [pc, #136]	; (8001db0 <main+0x98>)
 8001d26:	f7fe fc03 	bl	8000530 <Clock_Enable>
	Timer_Init(TIM6);
 8001d2a:	4822      	ldr	r0, [pc, #136]	; (8001db4 <main+0x9c>)
 8001d2c:	f7fe fcc8 	bl	80006c0 <Timer_Init>
	GPIO_Init(GPIOG, GPIO_PIN_14);
 8001d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d34:	481e      	ldr	r0, [pc, #120]	; (8001db0 <main+0x98>)
 8001d36:	f7fe fbdb 	bl	80004f0 <GPIO_Init>
	GPIO_Init(GPIOG, GPIO_PIN_13);
 8001d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3e:	481c      	ldr	r0, [pc, #112]	; (8001db0 <main+0x98>)
 8001d40:	f7fe fbd6 	bl	80004f0 <GPIO_Init>
	Timer_Start_IT();
 8001d44:	f7fe fcd8 	bl	80006f8 <Timer_Start_IT>

	/* Loop forever */
	for(;;)
	{

		if(SysTick_Get() > 0)
 8001d48:	f7fe fcf2 	bl	8000730 <SysTick_Get>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0fa      	beq.n	8001d48 <main+0x30>
		{
			led1_Counter += SysTick_Get();
 8001d52:	f7fe fced 	bl	8000730 <SysTick_Get>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <main+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <main+0xa0>)
 8001d60:	6013      	str	r3, [r2, #0]
			led2_Counter += SysTick_Get();
 8001d62:	f7fe fce5 	bl	8000730 <SysTick_Get>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <main+0xa4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a13      	ldr	r2, [pc, #76]	; (8001dbc <main+0xa4>)
 8001d70:	6013      	str	r3, [r2, #0]
			SysTick_Set(0);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7fe fce8 	bl	8000748 <SysTick_Set>
			if(led1_Counter == 1000)
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <main+0xa0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d80:	d107      	bne.n	8001d92 <main+0x7a>
			{
				led1_Counter = 0;
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <main+0xa0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
				GPIO_Pin_Toggle(GPIOG, GPIO_PIN_13);
 8001d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d8c:	4808      	ldr	r0, [pc, #32]	; (8001db0 <main+0x98>)
 8001d8e:	f7fe fc87 	bl	80006a0 <GPIO_Pin_Toggle>
			}
			if(led2_Counter == 500)
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <main+0xa4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d9a:	d1d5      	bne.n	8001d48 <main+0x30>
			{
				led2_Counter = 0;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <main+0xa4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
				GPIO_Pin_Toggle(GPIOG, GPIO_PIN_14);
 8001da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da6:	4802      	ldr	r0, [pc, #8]	; (8001db0 <main+0x98>)
 8001da8:	f7fe fc7a 	bl	80006a0 <GPIO_Pin_Toggle>
		if(SysTick_Get() > 0)
 8001dac:	e7cc      	b.n	8001d48 <main+0x30>
 8001dae:	bf00      	nop
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40001000 	.word	0x40001000
 8001db8:	200000dc 	.word	0x200000dc
 8001dbc:	200000e0 	.word	0x200000e0

08001dc0 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b094      	sub	sp, #80	; 0x50
 8001dc4:	af00      	add	r7, sp, #0
	/*    Configure processor to run at full speed i.e 180Mhz */
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc6:	f107 0320 	add.w	r3, r7, #32
 8001dca:	2230      	movs	r2, #48	; 0x30
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f9dc 	bl	800218c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <SystemClock_Config+0xd8>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <SystemClock_Config+0xd8>)
 8001dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df2:	6413      	str	r3, [r2, #64]	; 0x40
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <SystemClock_Config+0xd8>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e00:	2300      	movs	r3, #0
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <SystemClock_Config+0xdc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <SystemClock_Config+0xdc>)
 8001e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <SystemClock_Config+0xdc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e26:	2302      	movs	r3, #2
 8001e28:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001e30:	2304      	movs	r3, #4
 8001e32:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 8001e34:	2350      	movs	r3, #80	; 0x50
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f835 	bl	8000eb4 <HAL_RCC_OscConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001e50:	f000 f826 	bl	8001ea0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e54:	f7fe ffde 	bl	8000e14 <HAL_PWREx_EnableOverDrive>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8001e5e:	f000 f81f 	bl	8001ea0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e62:	230f      	movs	r3, #15
 8001e64:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e66:	2302      	movs	r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e72:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e78:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	2105      	movs	r1, #5
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fa8f 	bl	80013a4 <HAL_RCC_ClockConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8001e8c:	f000 f808 	bl	8001ea0 <Error_Handler>
	}
}
 8001e90:	bf00      	nop
 8001e92:	3750      	adds	r7, #80	; 0x50
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <Error_Handler>:

void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <Error_Handler+0x8>
	...

08001eac <HAL_MspInit>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"


void HAL_MspInit(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_MspInit+0x70>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_MspInit+0x70>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_MspInit+0x70>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_MspInit+0x70>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_MspInit+0x70>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x70>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eea:	2007      	movs	r0, #7
 8001eec:	f7fe fd7e 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/

	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	f06f 000b 	mvn.w	r0, #11
 8001ef8:	f7fe fd83 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	f06f 000a 	mvn.w	r0, #10
 8001f04:	f7fe fd7d 	bl	8000a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f06f 0009 	mvn.w	r0, #9
 8001f10:	f7fe fd77 	bl	8000a02 <HAL_NVIC_SetPriority>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_TIM_Base_MspInit+0x3c>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_TIM_Base_MspInit+0x3c>)
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	6413      	str	r3, [r2, #64]	; 0x40
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_TIM_Base_MspInit+0x3c>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f44:	2036      	movs	r0, #54	; 0x36
 8001f46:	f7fe fd78 	bl	8000a3a <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	2036      	movs	r0, #54	; 0x36
 8001f50:	f7fe fd57 	bl	8000a02 <HAL_NVIC_SetPriority>

}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40023800 	.word	0x40023800

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <NMI_Handler+0x4>

08001f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler+0x4>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001fac:	f7fe fc2e 	bl	800080c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001fb0:	f7fe fd5d 	bl	8000a6e <HAL_SYSTICK_IRQHandler>
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <TIM6_DAC_IRQHandler>:

extern TIM_HandleTypeDef htim;


void TIM6_DAC_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <TIM6_DAC_IRQHandler+0x10>)
 8001fbe:	f7ff fc9d 	bl	80018fc <HAL_TIM_IRQHandler>

}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000008c 	.word	0x2000008c

08001fcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e00a      	b.n	8001ff4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fde:	f3af 8000 	nop.w
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	60ba      	str	r2, [r7, #8]
 8001fea:	b2ca      	uxtb	r2, r1
 8001fec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dbf0      	blt.n	8001fde <_read+0x12>
  }

  return len;
 8001ffc:	687b      	ldr	r3, [r7, #4]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e009      	b.n	800202c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	60ba      	str	r2, [r7, #8]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	dbf1      	blt.n	8002018 <_write+0x12>
  }
  return len;
 8002034:	687b      	ldr	r3, [r7, #4]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_close>:

int _close(int file)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002066:	605a      	str	r2, [r3, #4]
  return 0;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <_isatty>:

int _isatty(int file)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <_sbrk+0x5c>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <_sbrk+0x60>)
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <_sbrk+0x64>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <_sbrk+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d207      	bcs.n	80020e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d8:	f000 f82e 	bl	8002138 <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	220c      	movs	r2, #12
 80020e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e6:	e009      	b.n	80020fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <_sbrk+0x64>)
 80020f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20030000 	.word	0x20030000
 8002108:	00000400 	.word	0x00000400
 800210c:	200000e4 	.word	0x200000e4
 8002110:	200000f8 	.word	0x200000f8

08002114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <SystemInit+0x20>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <SystemInit+0x20>)
 8002120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__errno>:
 8002138:	4b01      	ldr	r3, [pc, #4]	; (8002140 <__errno+0x8>)
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2000000c 	.word	0x2000000c

08002144 <__libc_init_array>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	4d0d      	ldr	r5, [pc, #52]	; (800217c <__libc_init_array+0x38>)
 8002148:	4c0d      	ldr	r4, [pc, #52]	; (8002180 <__libc_init_array+0x3c>)
 800214a:	1b64      	subs	r4, r4, r5
 800214c:	10a4      	asrs	r4, r4, #2
 800214e:	2600      	movs	r6, #0
 8002150:	42a6      	cmp	r6, r4
 8002152:	d109      	bne.n	8002168 <__libc_init_array+0x24>
 8002154:	4d0b      	ldr	r5, [pc, #44]	; (8002184 <__libc_init_array+0x40>)
 8002156:	4c0c      	ldr	r4, [pc, #48]	; (8002188 <__libc_init_array+0x44>)
 8002158:	f000 fd1e 	bl	8002b98 <_init>
 800215c:	1b64      	subs	r4, r4, r5
 800215e:	10a4      	asrs	r4, r4, #2
 8002160:	2600      	movs	r6, #0
 8002162:	42a6      	cmp	r6, r4
 8002164:	d105      	bne.n	8002172 <__libc_init_array+0x2e>
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	f855 3b04 	ldr.w	r3, [r5], #4
 800216c:	4798      	blx	r3
 800216e:	3601      	adds	r6, #1
 8002170:	e7ee      	b.n	8002150 <__libc_init_array+0xc>
 8002172:	f855 3b04 	ldr.w	r3, [r5], #4
 8002176:	4798      	blx	r3
 8002178:	3601      	adds	r6, #1
 800217a:	e7f2      	b.n	8002162 <__libc_init_array+0x1e>
 800217c:	08002c40 	.word	0x08002c40
 8002180:	08002c40 	.word	0x08002c40
 8002184:	08002c40 	.word	0x08002c40
 8002188:	08002c44 	.word	0x08002c44

0800218c <memset>:
 800218c:	4402      	add	r2, r0
 800218e:	4603      	mov	r3, r0
 8002190:	4293      	cmp	r3, r2
 8002192:	d100      	bne.n	8002196 <memset+0xa>
 8002194:	4770      	bx	lr
 8002196:	f803 1b01 	strb.w	r1, [r3], #1
 800219a:	e7f9      	b.n	8002190 <memset+0x4>

0800219c <_puts_r>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	460e      	mov	r6, r1
 80021a0:	4605      	mov	r5, r0
 80021a2:	b118      	cbz	r0, 80021ac <_puts_r+0x10>
 80021a4:	6983      	ldr	r3, [r0, #24]
 80021a6:	b90b      	cbnz	r3, 80021ac <_puts_r+0x10>
 80021a8:	f000 fa48 	bl	800263c <__sinit>
 80021ac:	69ab      	ldr	r3, [r5, #24]
 80021ae:	68ac      	ldr	r4, [r5, #8]
 80021b0:	b913      	cbnz	r3, 80021b8 <_puts_r+0x1c>
 80021b2:	4628      	mov	r0, r5
 80021b4:	f000 fa42 	bl	800263c <__sinit>
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <_puts_r+0xd0>)
 80021ba:	429c      	cmp	r4, r3
 80021bc:	d120      	bne.n	8002200 <_puts_r+0x64>
 80021be:	686c      	ldr	r4, [r5, #4]
 80021c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021c2:	07db      	lsls	r3, r3, #31
 80021c4:	d405      	bmi.n	80021d2 <_puts_r+0x36>
 80021c6:	89a3      	ldrh	r3, [r4, #12]
 80021c8:	0598      	lsls	r0, r3, #22
 80021ca:	d402      	bmi.n	80021d2 <_puts_r+0x36>
 80021cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ce:	f000 fad3 	bl	8002778 <__retarget_lock_acquire_recursive>
 80021d2:	89a3      	ldrh	r3, [r4, #12]
 80021d4:	0719      	lsls	r1, r3, #28
 80021d6:	d51d      	bpl.n	8002214 <_puts_r+0x78>
 80021d8:	6923      	ldr	r3, [r4, #16]
 80021da:	b1db      	cbz	r3, 8002214 <_puts_r+0x78>
 80021dc:	3e01      	subs	r6, #1
 80021de:	68a3      	ldr	r3, [r4, #8]
 80021e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60a3      	str	r3, [r4, #8]
 80021e8:	bb39      	cbnz	r1, 800223a <_puts_r+0x9e>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da38      	bge.n	8002260 <_puts_r+0xc4>
 80021ee:	4622      	mov	r2, r4
 80021f0:	210a      	movs	r1, #10
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 f848 	bl	8002288 <__swbuf_r>
 80021f8:	3001      	adds	r0, #1
 80021fa:	d011      	beq.n	8002220 <_puts_r+0x84>
 80021fc:	250a      	movs	r5, #10
 80021fe:	e011      	b.n	8002224 <_puts_r+0x88>
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <_puts_r+0xd4>)
 8002202:	429c      	cmp	r4, r3
 8002204:	d101      	bne.n	800220a <_puts_r+0x6e>
 8002206:	68ac      	ldr	r4, [r5, #8]
 8002208:	e7da      	b.n	80021c0 <_puts_r+0x24>
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <_puts_r+0xd8>)
 800220c:	429c      	cmp	r4, r3
 800220e:	bf08      	it	eq
 8002210:	68ec      	ldreq	r4, [r5, #12]
 8002212:	e7d5      	b.n	80021c0 <_puts_r+0x24>
 8002214:	4621      	mov	r1, r4
 8002216:	4628      	mov	r0, r5
 8002218:	f000 f888 	bl	800232c <__swsetup_r>
 800221c:	2800      	cmp	r0, #0
 800221e:	d0dd      	beq.n	80021dc <_puts_r+0x40>
 8002220:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002226:	07da      	lsls	r2, r3, #31
 8002228:	d405      	bmi.n	8002236 <_puts_r+0x9a>
 800222a:	89a3      	ldrh	r3, [r4, #12]
 800222c:	059b      	lsls	r3, r3, #22
 800222e:	d402      	bmi.n	8002236 <_puts_r+0x9a>
 8002230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002232:	f000 faa2 	bl	800277a <__retarget_lock_release_recursive>
 8002236:	4628      	mov	r0, r5
 8002238:	bd70      	pop	{r4, r5, r6, pc}
 800223a:	2b00      	cmp	r3, #0
 800223c:	da04      	bge.n	8002248 <_puts_r+0xac>
 800223e:	69a2      	ldr	r2, [r4, #24]
 8002240:	429a      	cmp	r2, r3
 8002242:	dc06      	bgt.n	8002252 <_puts_r+0xb6>
 8002244:	290a      	cmp	r1, #10
 8002246:	d004      	beq.n	8002252 <_puts_r+0xb6>
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	6022      	str	r2, [r4, #0]
 800224e:	7019      	strb	r1, [r3, #0]
 8002250:	e7c5      	b.n	80021de <_puts_r+0x42>
 8002252:	4622      	mov	r2, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 f817 	bl	8002288 <__swbuf_r>
 800225a:	3001      	adds	r0, #1
 800225c:	d1bf      	bne.n	80021de <_puts_r+0x42>
 800225e:	e7df      	b.n	8002220 <_puts_r+0x84>
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	250a      	movs	r5, #10
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	6022      	str	r2, [r4, #0]
 8002268:	701d      	strb	r5, [r3, #0]
 800226a:	e7db      	b.n	8002224 <_puts_r+0x88>
 800226c:	08002bf8 	.word	0x08002bf8
 8002270:	08002c18 	.word	0x08002c18
 8002274:	08002bd8 	.word	0x08002bd8

08002278 <puts>:
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <puts+0xc>)
 800227a:	4601      	mov	r1, r0
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	f7ff bf8d 	b.w	800219c <_puts_r>
 8002282:	bf00      	nop
 8002284:	2000000c 	.word	0x2000000c

08002288 <__swbuf_r>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	460e      	mov	r6, r1
 800228c:	4614      	mov	r4, r2
 800228e:	4605      	mov	r5, r0
 8002290:	b118      	cbz	r0, 800229a <__swbuf_r+0x12>
 8002292:	6983      	ldr	r3, [r0, #24]
 8002294:	b90b      	cbnz	r3, 800229a <__swbuf_r+0x12>
 8002296:	f000 f9d1 	bl	800263c <__sinit>
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <__swbuf_r+0x98>)
 800229c:	429c      	cmp	r4, r3
 800229e:	d12b      	bne.n	80022f8 <__swbuf_r+0x70>
 80022a0:	686c      	ldr	r4, [r5, #4]
 80022a2:	69a3      	ldr	r3, [r4, #24]
 80022a4:	60a3      	str	r3, [r4, #8]
 80022a6:	89a3      	ldrh	r3, [r4, #12]
 80022a8:	071a      	lsls	r2, r3, #28
 80022aa:	d52f      	bpl.n	800230c <__swbuf_r+0x84>
 80022ac:	6923      	ldr	r3, [r4, #16]
 80022ae:	b36b      	cbz	r3, 800230c <__swbuf_r+0x84>
 80022b0:	6923      	ldr	r3, [r4, #16]
 80022b2:	6820      	ldr	r0, [r4, #0]
 80022b4:	1ac0      	subs	r0, r0, r3
 80022b6:	6963      	ldr	r3, [r4, #20]
 80022b8:	b2f6      	uxtb	r6, r6
 80022ba:	4283      	cmp	r3, r0
 80022bc:	4637      	mov	r7, r6
 80022be:	dc04      	bgt.n	80022ca <__swbuf_r+0x42>
 80022c0:	4621      	mov	r1, r4
 80022c2:	4628      	mov	r0, r5
 80022c4:	f000 f926 	bl	8002514 <_fflush_r>
 80022c8:	bb30      	cbnz	r0, 8002318 <__swbuf_r+0x90>
 80022ca:	68a3      	ldr	r3, [r4, #8]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	60a3      	str	r3, [r4, #8]
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	6022      	str	r2, [r4, #0]
 80022d6:	701e      	strb	r6, [r3, #0]
 80022d8:	6963      	ldr	r3, [r4, #20]
 80022da:	3001      	adds	r0, #1
 80022dc:	4283      	cmp	r3, r0
 80022de:	d004      	beq.n	80022ea <__swbuf_r+0x62>
 80022e0:	89a3      	ldrh	r3, [r4, #12]
 80022e2:	07db      	lsls	r3, r3, #31
 80022e4:	d506      	bpl.n	80022f4 <__swbuf_r+0x6c>
 80022e6:	2e0a      	cmp	r6, #10
 80022e8:	d104      	bne.n	80022f4 <__swbuf_r+0x6c>
 80022ea:	4621      	mov	r1, r4
 80022ec:	4628      	mov	r0, r5
 80022ee:	f000 f911 	bl	8002514 <_fflush_r>
 80022f2:	b988      	cbnz	r0, 8002318 <__swbuf_r+0x90>
 80022f4:	4638      	mov	r0, r7
 80022f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <__swbuf_r+0x9c>)
 80022fa:	429c      	cmp	r4, r3
 80022fc:	d101      	bne.n	8002302 <__swbuf_r+0x7a>
 80022fe:	68ac      	ldr	r4, [r5, #8]
 8002300:	e7cf      	b.n	80022a2 <__swbuf_r+0x1a>
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <__swbuf_r+0xa0>)
 8002304:	429c      	cmp	r4, r3
 8002306:	bf08      	it	eq
 8002308:	68ec      	ldreq	r4, [r5, #12]
 800230a:	e7ca      	b.n	80022a2 <__swbuf_r+0x1a>
 800230c:	4621      	mov	r1, r4
 800230e:	4628      	mov	r0, r5
 8002310:	f000 f80c 	bl	800232c <__swsetup_r>
 8002314:	2800      	cmp	r0, #0
 8002316:	d0cb      	beq.n	80022b0 <__swbuf_r+0x28>
 8002318:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800231c:	e7ea      	b.n	80022f4 <__swbuf_r+0x6c>
 800231e:	bf00      	nop
 8002320:	08002bf8 	.word	0x08002bf8
 8002324:	08002c18 	.word	0x08002c18
 8002328:	08002bd8 	.word	0x08002bd8

0800232c <__swsetup_r>:
 800232c:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <__swsetup_r+0xcc>)
 800232e:	b570      	push	{r4, r5, r6, lr}
 8002330:	681d      	ldr	r5, [r3, #0]
 8002332:	4606      	mov	r6, r0
 8002334:	460c      	mov	r4, r1
 8002336:	b125      	cbz	r5, 8002342 <__swsetup_r+0x16>
 8002338:	69ab      	ldr	r3, [r5, #24]
 800233a:	b913      	cbnz	r3, 8002342 <__swsetup_r+0x16>
 800233c:	4628      	mov	r0, r5
 800233e:	f000 f97d 	bl	800263c <__sinit>
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <__swsetup_r+0xd0>)
 8002344:	429c      	cmp	r4, r3
 8002346:	d10f      	bne.n	8002368 <__swsetup_r+0x3c>
 8002348:	686c      	ldr	r4, [r5, #4]
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002350:	0719      	lsls	r1, r3, #28
 8002352:	d42c      	bmi.n	80023ae <__swsetup_r+0x82>
 8002354:	06dd      	lsls	r5, r3, #27
 8002356:	d411      	bmi.n	800237c <__swsetup_r+0x50>
 8002358:	2309      	movs	r3, #9
 800235a:	6033      	str	r3, [r6, #0]
 800235c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002360:	81a3      	strh	r3, [r4, #12]
 8002362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002366:	e03e      	b.n	80023e6 <__swsetup_r+0xba>
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <__swsetup_r+0xd4>)
 800236a:	429c      	cmp	r4, r3
 800236c:	d101      	bne.n	8002372 <__swsetup_r+0x46>
 800236e:	68ac      	ldr	r4, [r5, #8]
 8002370:	e7eb      	b.n	800234a <__swsetup_r+0x1e>
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <__swsetup_r+0xd8>)
 8002374:	429c      	cmp	r4, r3
 8002376:	bf08      	it	eq
 8002378:	68ec      	ldreq	r4, [r5, #12]
 800237a:	e7e6      	b.n	800234a <__swsetup_r+0x1e>
 800237c:	0758      	lsls	r0, r3, #29
 800237e:	d512      	bpl.n	80023a6 <__swsetup_r+0x7a>
 8002380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002382:	b141      	cbz	r1, 8002396 <__swsetup_r+0x6a>
 8002384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002388:	4299      	cmp	r1, r3
 800238a:	d002      	beq.n	8002392 <__swsetup_r+0x66>
 800238c:	4630      	mov	r0, r6
 800238e:	f000 fa5b 	bl	8002848 <_free_r>
 8002392:	2300      	movs	r3, #0
 8002394:	6363      	str	r3, [r4, #52]	; 0x34
 8002396:	89a3      	ldrh	r3, [r4, #12]
 8002398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	2300      	movs	r3, #0
 80023a0:	6063      	str	r3, [r4, #4]
 80023a2:	6923      	ldr	r3, [r4, #16]
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	81a3      	strh	r3, [r4, #12]
 80023ae:	6923      	ldr	r3, [r4, #16]
 80023b0:	b94b      	cbnz	r3, 80023c6 <__swsetup_r+0x9a>
 80023b2:	89a3      	ldrh	r3, [r4, #12]
 80023b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023bc:	d003      	beq.n	80023c6 <__swsetup_r+0x9a>
 80023be:	4621      	mov	r1, r4
 80023c0:	4630      	mov	r0, r6
 80023c2:	f000 fa01 	bl	80027c8 <__smakebuf_r>
 80023c6:	89a0      	ldrh	r0, [r4, #12]
 80023c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023cc:	f010 0301 	ands.w	r3, r0, #1
 80023d0:	d00a      	beq.n	80023e8 <__swsetup_r+0xbc>
 80023d2:	2300      	movs	r3, #0
 80023d4:	60a3      	str	r3, [r4, #8]
 80023d6:	6963      	ldr	r3, [r4, #20]
 80023d8:	425b      	negs	r3, r3
 80023da:	61a3      	str	r3, [r4, #24]
 80023dc:	6923      	ldr	r3, [r4, #16]
 80023de:	b943      	cbnz	r3, 80023f2 <__swsetup_r+0xc6>
 80023e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023e4:	d1ba      	bne.n	800235c <__swsetup_r+0x30>
 80023e6:	bd70      	pop	{r4, r5, r6, pc}
 80023e8:	0781      	lsls	r1, r0, #30
 80023ea:	bf58      	it	pl
 80023ec:	6963      	ldrpl	r3, [r4, #20]
 80023ee:	60a3      	str	r3, [r4, #8]
 80023f0:	e7f4      	b.n	80023dc <__swsetup_r+0xb0>
 80023f2:	2000      	movs	r0, #0
 80023f4:	e7f7      	b.n	80023e6 <__swsetup_r+0xba>
 80023f6:	bf00      	nop
 80023f8:	2000000c 	.word	0x2000000c
 80023fc:	08002bf8 	.word	0x08002bf8
 8002400:	08002c18 	.word	0x08002c18
 8002404:	08002bd8 	.word	0x08002bd8

08002408 <__sflush_r>:
 8002408:	898a      	ldrh	r2, [r1, #12]
 800240a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800240e:	4605      	mov	r5, r0
 8002410:	0710      	lsls	r0, r2, #28
 8002412:	460c      	mov	r4, r1
 8002414:	d458      	bmi.n	80024c8 <__sflush_r+0xc0>
 8002416:	684b      	ldr	r3, [r1, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	dc05      	bgt.n	8002428 <__sflush_r+0x20>
 800241c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	dc02      	bgt.n	8002428 <__sflush_r+0x20>
 8002422:	2000      	movs	r0, #0
 8002424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800242a:	2e00      	cmp	r6, #0
 800242c:	d0f9      	beq.n	8002422 <__sflush_r+0x1a>
 800242e:	2300      	movs	r3, #0
 8002430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002434:	682f      	ldr	r7, [r5, #0]
 8002436:	602b      	str	r3, [r5, #0]
 8002438:	d032      	beq.n	80024a0 <__sflush_r+0x98>
 800243a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800243c:	89a3      	ldrh	r3, [r4, #12]
 800243e:	075a      	lsls	r2, r3, #29
 8002440:	d505      	bpl.n	800244e <__sflush_r+0x46>
 8002442:	6863      	ldr	r3, [r4, #4]
 8002444:	1ac0      	subs	r0, r0, r3
 8002446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002448:	b10b      	cbz	r3, 800244e <__sflush_r+0x46>
 800244a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800244c:	1ac0      	subs	r0, r0, r3
 800244e:	2300      	movs	r3, #0
 8002450:	4602      	mov	r2, r0
 8002452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002454:	6a21      	ldr	r1, [r4, #32]
 8002456:	4628      	mov	r0, r5
 8002458:	47b0      	blx	r6
 800245a:	1c43      	adds	r3, r0, #1
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	d106      	bne.n	800246e <__sflush_r+0x66>
 8002460:	6829      	ldr	r1, [r5, #0]
 8002462:	291d      	cmp	r1, #29
 8002464:	d82c      	bhi.n	80024c0 <__sflush_r+0xb8>
 8002466:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <__sflush_r+0x108>)
 8002468:	40ca      	lsrs	r2, r1
 800246a:	07d6      	lsls	r6, r2, #31
 800246c:	d528      	bpl.n	80024c0 <__sflush_r+0xb8>
 800246e:	2200      	movs	r2, #0
 8002470:	6062      	str	r2, [r4, #4]
 8002472:	04d9      	lsls	r1, r3, #19
 8002474:	6922      	ldr	r2, [r4, #16]
 8002476:	6022      	str	r2, [r4, #0]
 8002478:	d504      	bpl.n	8002484 <__sflush_r+0x7c>
 800247a:	1c42      	adds	r2, r0, #1
 800247c:	d101      	bne.n	8002482 <__sflush_r+0x7a>
 800247e:	682b      	ldr	r3, [r5, #0]
 8002480:	b903      	cbnz	r3, 8002484 <__sflush_r+0x7c>
 8002482:	6560      	str	r0, [r4, #84]	; 0x54
 8002484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002486:	602f      	str	r7, [r5, #0]
 8002488:	2900      	cmp	r1, #0
 800248a:	d0ca      	beq.n	8002422 <__sflush_r+0x1a>
 800248c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002490:	4299      	cmp	r1, r3
 8002492:	d002      	beq.n	800249a <__sflush_r+0x92>
 8002494:	4628      	mov	r0, r5
 8002496:	f000 f9d7 	bl	8002848 <_free_r>
 800249a:	2000      	movs	r0, #0
 800249c:	6360      	str	r0, [r4, #52]	; 0x34
 800249e:	e7c1      	b.n	8002424 <__sflush_r+0x1c>
 80024a0:	6a21      	ldr	r1, [r4, #32]
 80024a2:	2301      	movs	r3, #1
 80024a4:	4628      	mov	r0, r5
 80024a6:	47b0      	blx	r6
 80024a8:	1c41      	adds	r1, r0, #1
 80024aa:	d1c7      	bne.n	800243c <__sflush_r+0x34>
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0c4      	beq.n	800243c <__sflush_r+0x34>
 80024b2:	2b1d      	cmp	r3, #29
 80024b4:	d001      	beq.n	80024ba <__sflush_r+0xb2>
 80024b6:	2b16      	cmp	r3, #22
 80024b8:	d101      	bne.n	80024be <__sflush_r+0xb6>
 80024ba:	602f      	str	r7, [r5, #0]
 80024bc:	e7b1      	b.n	8002422 <__sflush_r+0x1a>
 80024be:	89a3      	ldrh	r3, [r4, #12]
 80024c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c4:	81a3      	strh	r3, [r4, #12]
 80024c6:	e7ad      	b.n	8002424 <__sflush_r+0x1c>
 80024c8:	690f      	ldr	r7, [r1, #16]
 80024ca:	2f00      	cmp	r7, #0
 80024cc:	d0a9      	beq.n	8002422 <__sflush_r+0x1a>
 80024ce:	0793      	lsls	r3, r2, #30
 80024d0:	680e      	ldr	r6, [r1, #0]
 80024d2:	bf08      	it	eq
 80024d4:	694b      	ldreq	r3, [r1, #20]
 80024d6:	600f      	str	r7, [r1, #0]
 80024d8:	bf18      	it	ne
 80024da:	2300      	movne	r3, #0
 80024dc:	eba6 0807 	sub.w	r8, r6, r7
 80024e0:	608b      	str	r3, [r1, #8]
 80024e2:	f1b8 0f00 	cmp.w	r8, #0
 80024e6:	dd9c      	ble.n	8002422 <__sflush_r+0x1a>
 80024e8:	6a21      	ldr	r1, [r4, #32]
 80024ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80024ec:	4643      	mov	r3, r8
 80024ee:	463a      	mov	r2, r7
 80024f0:	4628      	mov	r0, r5
 80024f2:	47b0      	blx	r6
 80024f4:	2800      	cmp	r0, #0
 80024f6:	dc06      	bgt.n	8002506 <__sflush_r+0xfe>
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024fe:	81a3      	strh	r3, [r4, #12]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002504:	e78e      	b.n	8002424 <__sflush_r+0x1c>
 8002506:	4407      	add	r7, r0
 8002508:	eba8 0800 	sub.w	r8, r8, r0
 800250c:	e7e9      	b.n	80024e2 <__sflush_r+0xda>
 800250e:	bf00      	nop
 8002510:	20400001 	.word	0x20400001

08002514 <_fflush_r>:
 8002514:	b538      	push	{r3, r4, r5, lr}
 8002516:	690b      	ldr	r3, [r1, #16]
 8002518:	4605      	mov	r5, r0
 800251a:	460c      	mov	r4, r1
 800251c:	b913      	cbnz	r3, 8002524 <_fflush_r+0x10>
 800251e:	2500      	movs	r5, #0
 8002520:	4628      	mov	r0, r5
 8002522:	bd38      	pop	{r3, r4, r5, pc}
 8002524:	b118      	cbz	r0, 800252e <_fflush_r+0x1a>
 8002526:	6983      	ldr	r3, [r0, #24]
 8002528:	b90b      	cbnz	r3, 800252e <_fflush_r+0x1a>
 800252a:	f000 f887 	bl	800263c <__sinit>
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <_fflush_r+0x6c>)
 8002530:	429c      	cmp	r4, r3
 8002532:	d11b      	bne.n	800256c <_fflush_r+0x58>
 8002534:	686c      	ldr	r4, [r5, #4]
 8002536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0ef      	beq.n	800251e <_fflush_r+0xa>
 800253e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002540:	07d0      	lsls	r0, r2, #31
 8002542:	d404      	bmi.n	800254e <_fflush_r+0x3a>
 8002544:	0599      	lsls	r1, r3, #22
 8002546:	d402      	bmi.n	800254e <_fflush_r+0x3a>
 8002548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800254a:	f000 f915 	bl	8002778 <__retarget_lock_acquire_recursive>
 800254e:	4628      	mov	r0, r5
 8002550:	4621      	mov	r1, r4
 8002552:	f7ff ff59 	bl	8002408 <__sflush_r>
 8002556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002558:	07da      	lsls	r2, r3, #31
 800255a:	4605      	mov	r5, r0
 800255c:	d4e0      	bmi.n	8002520 <_fflush_r+0xc>
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	059b      	lsls	r3, r3, #22
 8002562:	d4dd      	bmi.n	8002520 <_fflush_r+0xc>
 8002564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002566:	f000 f908 	bl	800277a <__retarget_lock_release_recursive>
 800256a:	e7d9      	b.n	8002520 <_fflush_r+0xc>
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <_fflush_r+0x70>)
 800256e:	429c      	cmp	r4, r3
 8002570:	d101      	bne.n	8002576 <_fflush_r+0x62>
 8002572:	68ac      	ldr	r4, [r5, #8]
 8002574:	e7df      	b.n	8002536 <_fflush_r+0x22>
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <_fflush_r+0x74>)
 8002578:	429c      	cmp	r4, r3
 800257a:	bf08      	it	eq
 800257c:	68ec      	ldreq	r4, [r5, #12]
 800257e:	e7da      	b.n	8002536 <_fflush_r+0x22>
 8002580:	08002bf8 	.word	0x08002bf8
 8002584:	08002c18 	.word	0x08002c18
 8002588:	08002bd8 	.word	0x08002bd8

0800258c <std>:
 800258c:	2300      	movs	r3, #0
 800258e:	b510      	push	{r4, lr}
 8002590:	4604      	mov	r4, r0
 8002592:	e9c0 3300 	strd	r3, r3, [r0]
 8002596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800259a:	6083      	str	r3, [r0, #8]
 800259c:	8181      	strh	r1, [r0, #12]
 800259e:	6643      	str	r3, [r0, #100]	; 0x64
 80025a0:	81c2      	strh	r2, [r0, #14]
 80025a2:	6183      	str	r3, [r0, #24]
 80025a4:	4619      	mov	r1, r3
 80025a6:	2208      	movs	r2, #8
 80025a8:	305c      	adds	r0, #92	; 0x5c
 80025aa:	f7ff fdef 	bl	800218c <memset>
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <std+0x38>)
 80025b0:	6263      	str	r3, [r4, #36]	; 0x24
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <std+0x3c>)
 80025b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <std+0x40>)
 80025b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <std+0x44>)
 80025bc:	6224      	str	r4, [r4, #32]
 80025be:	6323      	str	r3, [r4, #48]	; 0x30
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	bf00      	nop
 80025c4:	08002a29 	.word	0x08002a29
 80025c8:	08002a4b 	.word	0x08002a4b
 80025cc:	08002a83 	.word	0x08002a83
 80025d0:	08002aa7 	.word	0x08002aa7

080025d4 <_cleanup_r>:
 80025d4:	4901      	ldr	r1, [pc, #4]	; (80025dc <_cleanup_r+0x8>)
 80025d6:	f000 b8af 	b.w	8002738 <_fwalk_reent>
 80025da:	bf00      	nop
 80025dc:	08002515 	.word	0x08002515

080025e0 <__sfmoreglue>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	2268      	movs	r2, #104	; 0x68
 80025e4:	1e4d      	subs	r5, r1, #1
 80025e6:	4355      	muls	r5, r2
 80025e8:	460e      	mov	r6, r1
 80025ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025ee:	f000 f997 	bl	8002920 <_malloc_r>
 80025f2:	4604      	mov	r4, r0
 80025f4:	b140      	cbz	r0, 8002608 <__sfmoreglue+0x28>
 80025f6:	2100      	movs	r1, #0
 80025f8:	e9c0 1600 	strd	r1, r6, [r0]
 80025fc:	300c      	adds	r0, #12
 80025fe:	60a0      	str	r0, [r4, #8]
 8002600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002604:	f7ff fdc2 	bl	800218c <memset>
 8002608:	4620      	mov	r0, r4
 800260a:	bd70      	pop	{r4, r5, r6, pc}

0800260c <__sfp_lock_acquire>:
 800260c:	4801      	ldr	r0, [pc, #4]	; (8002614 <__sfp_lock_acquire+0x8>)
 800260e:	f000 b8b3 	b.w	8002778 <__retarget_lock_acquire_recursive>
 8002612:	bf00      	nop
 8002614:	200000e9 	.word	0x200000e9

08002618 <__sfp_lock_release>:
 8002618:	4801      	ldr	r0, [pc, #4]	; (8002620 <__sfp_lock_release+0x8>)
 800261a:	f000 b8ae 	b.w	800277a <__retarget_lock_release_recursive>
 800261e:	bf00      	nop
 8002620:	200000e9 	.word	0x200000e9

08002624 <__sinit_lock_acquire>:
 8002624:	4801      	ldr	r0, [pc, #4]	; (800262c <__sinit_lock_acquire+0x8>)
 8002626:	f000 b8a7 	b.w	8002778 <__retarget_lock_acquire_recursive>
 800262a:	bf00      	nop
 800262c:	200000ea 	.word	0x200000ea

08002630 <__sinit_lock_release>:
 8002630:	4801      	ldr	r0, [pc, #4]	; (8002638 <__sinit_lock_release+0x8>)
 8002632:	f000 b8a2 	b.w	800277a <__retarget_lock_release_recursive>
 8002636:	bf00      	nop
 8002638:	200000ea 	.word	0x200000ea

0800263c <__sinit>:
 800263c:	b510      	push	{r4, lr}
 800263e:	4604      	mov	r4, r0
 8002640:	f7ff fff0 	bl	8002624 <__sinit_lock_acquire>
 8002644:	69a3      	ldr	r3, [r4, #24]
 8002646:	b11b      	cbz	r3, 8002650 <__sinit+0x14>
 8002648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800264c:	f7ff bff0 	b.w	8002630 <__sinit_lock_release>
 8002650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002654:	6523      	str	r3, [r4, #80]	; 0x50
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <__sinit+0x68>)
 8002658:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <__sinit+0x6c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	62a2      	str	r2, [r4, #40]	; 0x28
 800265e:	42a3      	cmp	r3, r4
 8002660:	bf04      	itt	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	61a3      	streq	r3, [r4, #24]
 8002666:	4620      	mov	r0, r4
 8002668:	f000 f820 	bl	80026ac <__sfp>
 800266c:	6060      	str	r0, [r4, #4]
 800266e:	4620      	mov	r0, r4
 8002670:	f000 f81c 	bl	80026ac <__sfp>
 8002674:	60a0      	str	r0, [r4, #8]
 8002676:	4620      	mov	r0, r4
 8002678:	f000 f818 	bl	80026ac <__sfp>
 800267c:	2200      	movs	r2, #0
 800267e:	60e0      	str	r0, [r4, #12]
 8002680:	2104      	movs	r1, #4
 8002682:	6860      	ldr	r0, [r4, #4]
 8002684:	f7ff ff82 	bl	800258c <std>
 8002688:	68a0      	ldr	r0, [r4, #8]
 800268a:	2201      	movs	r2, #1
 800268c:	2109      	movs	r1, #9
 800268e:	f7ff ff7d 	bl	800258c <std>
 8002692:	68e0      	ldr	r0, [r4, #12]
 8002694:	2202      	movs	r2, #2
 8002696:	2112      	movs	r1, #18
 8002698:	f7ff ff78 	bl	800258c <std>
 800269c:	2301      	movs	r3, #1
 800269e:	61a3      	str	r3, [r4, #24]
 80026a0:	e7d2      	b.n	8002648 <__sinit+0xc>
 80026a2:	bf00      	nop
 80026a4:	08002bd4 	.word	0x08002bd4
 80026a8:	080025d5 	.word	0x080025d5

080026ac <__sfp>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	4607      	mov	r7, r0
 80026b0:	f7ff ffac 	bl	800260c <__sfp_lock_acquire>
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <__sfp+0x84>)
 80026b6:	681e      	ldr	r6, [r3, #0]
 80026b8:	69b3      	ldr	r3, [r6, #24]
 80026ba:	b913      	cbnz	r3, 80026c2 <__sfp+0x16>
 80026bc:	4630      	mov	r0, r6
 80026be:	f7ff ffbd 	bl	800263c <__sinit>
 80026c2:	3648      	adds	r6, #72	; 0x48
 80026c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	d503      	bpl.n	80026d4 <__sfp+0x28>
 80026cc:	6833      	ldr	r3, [r6, #0]
 80026ce:	b30b      	cbz	r3, 8002714 <__sfp+0x68>
 80026d0:	6836      	ldr	r6, [r6, #0]
 80026d2:	e7f7      	b.n	80026c4 <__sfp+0x18>
 80026d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026d8:	b9d5      	cbnz	r5, 8002710 <__sfp+0x64>
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <__sfp+0x88>)
 80026dc:	60e3      	str	r3, [r4, #12]
 80026de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026e2:	6665      	str	r5, [r4, #100]	; 0x64
 80026e4:	f000 f847 	bl	8002776 <__retarget_lock_init_recursive>
 80026e8:	f7ff ff96 	bl	8002618 <__sfp_lock_release>
 80026ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026f4:	6025      	str	r5, [r4, #0]
 80026f6:	61a5      	str	r5, [r4, #24]
 80026f8:	2208      	movs	r2, #8
 80026fa:	4629      	mov	r1, r5
 80026fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002700:	f7ff fd44 	bl	800218c <memset>
 8002704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800270c:	4620      	mov	r0, r4
 800270e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002710:	3468      	adds	r4, #104	; 0x68
 8002712:	e7d9      	b.n	80026c8 <__sfp+0x1c>
 8002714:	2104      	movs	r1, #4
 8002716:	4638      	mov	r0, r7
 8002718:	f7ff ff62 	bl	80025e0 <__sfmoreglue>
 800271c:	4604      	mov	r4, r0
 800271e:	6030      	str	r0, [r6, #0]
 8002720:	2800      	cmp	r0, #0
 8002722:	d1d5      	bne.n	80026d0 <__sfp+0x24>
 8002724:	f7ff ff78 	bl	8002618 <__sfp_lock_release>
 8002728:	230c      	movs	r3, #12
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	e7ee      	b.n	800270c <__sfp+0x60>
 800272e:	bf00      	nop
 8002730:	08002bd4 	.word	0x08002bd4
 8002734:	ffff0001 	.word	0xffff0001

08002738 <_fwalk_reent>:
 8002738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800273c:	4606      	mov	r6, r0
 800273e:	4688      	mov	r8, r1
 8002740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002744:	2700      	movs	r7, #0
 8002746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800274a:	f1b9 0901 	subs.w	r9, r9, #1
 800274e:	d505      	bpl.n	800275c <_fwalk_reent+0x24>
 8002750:	6824      	ldr	r4, [r4, #0]
 8002752:	2c00      	cmp	r4, #0
 8002754:	d1f7      	bne.n	8002746 <_fwalk_reent+0xe>
 8002756:	4638      	mov	r0, r7
 8002758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800275c:	89ab      	ldrh	r3, [r5, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d907      	bls.n	8002772 <_fwalk_reent+0x3a>
 8002762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002766:	3301      	adds	r3, #1
 8002768:	d003      	beq.n	8002772 <_fwalk_reent+0x3a>
 800276a:	4629      	mov	r1, r5
 800276c:	4630      	mov	r0, r6
 800276e:	47c0      	blx	r8
 8002770:	4307      	orrs	r7, r0
 8002772:	3568      	adds	r5, #104	; 0x68
 8002774:	e7e9      	b.n	800274a <_fwalk_reent+0x12>

08002776 <__retarget_lock_init_recursive>:
 8002776:	4770      	bx	lr

08002778 <__retarget_lock_acquire_recursive>:
 8002778:	4770      	bx	lr

0800277a <__retarget_lock_release_recursive>:
 800277a:	4770      	bx	lr

0800277c <__swhatbuf_r>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	460e      	mov	r6, r1
 8002780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002784:	2900      	cmp	r1, #0
 8002786:	b096      	sub	sp, #88	; 0x58
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	da08      	bge.n	80027a0 <__swhatbuf_r+0x24>
 800278e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	602a      	str	r2, [r5, #0]
 8002796:	061a      	lsls	r2, r3, #24
 8002798:	d410      	bmi.n	80027bc <__swhatbuf_r+0x40>
 800279a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800279e:	e00e      	b.n	80027be <__swhatbuf_r+0x42>
 80027a0:	466a      	mov	r2, sp
 80027a2:	f000 f9a7 	bl	8002af4 <_fstat_r>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	dbf1      	blt.n	800278e <__swhatbuf_r+0x12>
 80027aa:	9a01      	ldr	r2, [sp, #4]
 80027ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80027b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027b4:	425a      	negs	r2, r3
 80027b6:	415a      	adcs	r2, r3
 80027b8:	602a      	str	r2, [r5, #0]
 80027ba:	e7ee      	b.n	800279a <__swhatbuf_r+0x1e>
 80027bc:	2340      	movs	r3, #64	; 0x40
 80027be:	2000      	movs	r0, #0
 80027c0:	6023      	str	r3, [r4, #0]
 80027c2:	b016      	add	sp, #88	; 0x58
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080027c8 <__smakebuf_r>:
 80027c8:	898b      	ldrh	r3, [r1, #12]
 80027ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027cc:	079d      	lsls	r5, r3, #30
 80027ce:	4606      	mov	r6, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	d507      	bpl.n	80027e4 <__smakebuf_r+0x1c>
 80027d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	6123      	str	r3, [r4, #16]
 80027dc:	2301      	movs	r3, #1
 80027de:	6163      	str	r3, [r4, #20]
 80027e0:	b002      	add	sp, #8
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	ab01      	add	r3, sp, #4
 80027e6:	466a      	mov	r2, sp
 80027e8:	f7ff ffc8 	bl	800277c <__swhatbuf_r>
 80027ec:	9900      	ldr	r1, [sp, #0]
 80027ee:	4605      	mov	r5, r0
 80027f0:	4630      	mov	r0, r6
 80027f2:	f000 f895 	bl	8002920 <_malloc_r>
 80027f6:	b948      	cbnz	r0, 800280c <__smakebuf_r+0x44>
 80027f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027fc:	059a      	lsls	r2, r3, #22
 80027fe:	d4ef      	bmi.n	80027e0 <__smakebuf_r+0x18>
 8002800:	f023 0303 	bic.w	r3, r3, #3
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	81a3      	strh	r3, [r4, #12]
 800280a:	e7e3      	b.n	80027d4 <__smakebuf_r+0xc>
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <__smakebuf_r+0x7c>)
 800280e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	6020      	str	r0, [r4, #0]
 8002814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002818:	81a3      	strh	r3, [r4, #12]
 800281a:	9b00      	ldr	r3, [sp, #0]
 800281c:	6163      	str	r3, [r4, #20]
 800281e:	9b01      	ldr	r3, [sp, #4]
 8002820:	6120      	str	r0, [r4, #16]
 8002822:	b15b      	cbz	r3, 800283c <__smakebuf_r+0x74>
 8002824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002828:	4630      	mov	r0, r6
 800282a:	f000 f975 	bl	8002b18 <_isatty_r>
 800282e:	b128      	cbz	r0, 800283c <__smakebuf_r+0x74>
 8002830:	89a3      	ldrh	r3, [r4, #12]
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	81a3      	strh	r3, [r4, #12]
 800283c:	89a0      	ldrh	r0, [r4, #12]
 800283e:	4305      	orrs	r5, r0
 8002840:	81a5      	strh	r5, [r4, #12]
 8002842:	e7cd      	b.n	80027e0 <__smakebuf_r+0x18>
 8002844:	080025d5 	.word	0x080025d5

08002848 <_free_r>:
 8002848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800284a:	2900      	cmp	r1, #0
 800284c:	d044      	beq.n	80028d8 <_free_r+0x90>
 800284e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002852:	9001      	str	r0, [sp, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f1a1 0404 	sub.w	r4, r1, #4
 800285a:	bfb8      	it	lt
 800285c:	18e4      	addlt	r4, r4, r3
 800285e:	f000 f97d 	bl	8002b5c <__malloc_lock>
 8002862:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <_free_r+0x94>)
 8002864:	9801      	ldr	r0, [sp, #4]
 8002866:	6813      	ldr	r3, [r2, #0]
 8002868:	b933      	cbnz	r3, 8002878 <_free_r+0x30>
 800286a:	6063      	str	r3, [r4, #4]
 800286c:	6014      	str	r4, [r2, #0]
 800286e:	b003      	add	sp, #12
 8002870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002874:	f000 b978 	b.w	8002b68 <__malloc_unlock>
 8002878:	42a3      	cmp	r3, r4
 800287a:	d908      	bls.n	800288e <_free_r+0x46>
 800287c:	6825      	ldr	r5, [r4, #0]
 800287e:	1961      	adds	r1, r4, r5
 8002880:	428b      	cmp	r3, r1
 8002882:	bf01      	itttt	eq
 8002884:	6819      	ldreq	r1, [r3, #0]
 8002886:	685b      	ldreq	r3, [r3, #4]
 8002888:	1949      	addeq	r1, r1, r5
 800288a:	6021      	streq	r1, [r4, #0]
 800288c:	e7ed      	b.n	800286a <_free_r+0x22>
 800288e:	461a      	mov	r2, r3
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	b10b      	cbz	r3, 8002898 <_free_r+0x50>
 8002894:	42a3      	cmp	r3, r4
 8002896:	d9fa      	bls.n	800288e <_free_r+0x46>
 8002898:	6811      	ldr	r1, [r2, #0]
 800289a:	1855      	adds	r5, r2, r1
 800289c:	42a5      	cmp	r5, r4
 800289e:	d10b      	bne.n	80028b8 <_free_r+0x70>
 80028a0:	6824      	ldr	r4, [r4, #0]
 80028a2:	4421      	add	r1, r4
 80028a4:	1854      	adds	r4, r2, r1
 80028a6:	42a3      	cmp	r3, r4
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	d1e0      	bne.n	800286e <_free_r+0x26>
 80028ac:	681c      	ldr	r4, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	6053      	str	r3, [r2, #4]
 80028b2:	4421      	add	r1, r4
 80028b4:	6011      	str	r1, [r2, #0]
 80028b6:	e7da      	b.n	800286e <_free_r+0x26>
 80028b8:	d902      	bls.n	80028c0 <_free_r+0x78>
 80028ba:	230c      	movs	r3, #12
 80028bc:	6003      	str	r3, [r0, #0]
 80028be:	e7d6      	b.n	800286e <_free_r+0x26>
 80028c0:	6825      	ldr	r5, [r4, #0]
 80028c2:	1961      	adds	r1, r4, r5
 80028c4:	428b      	cmp	r3, r1
 80028c6:	bf04      	itt	eq
 80028c8:	6819      	ldreq	r1, [r3, #0]
 80028ca:	685b      	ldreq	r3, [r3, #4]
 80028cc:	6063      	str	r3, [r4, #4]
 80028ce:	bf04      	itt	eq
 80028d0:	1949      	addeq	r1, r1, r5
 80028d2:	6021      	streq	r1, [r4, #0]
 80028d4:	6054      	str	r4, [r2, #4]
 80028d6:	e7ca      	b.n	800286e <_free_r+0x26>
 80028d8:	b003      	add	sp, #12
 80028da:	bd30      	pop	{r4, r5, pc}
 80028dc:	200000ec 	.word	0x200000ec

080028e0 <sbrk_aligned>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4e0e      	ldr	r6, [pc, #56]	; (800291c <sbrk_aligned+0x3c>)
 80028e4:	460c      	mov	r4, r1
 80028e6:	6831      	ldr	r1, [r6, #0]
 80028e8:	4605      	mov	r5, r0
 80028ea:	b911      	cbnz	r1, 80028f2 <sbrk_aligned+0x12>
 80028ec:	f000 f88c 	bl	8002a08 <_sbrk_r>
 80028f0:	6030      	str	r0, [r6, #0]
 80028f2:	4621      	mov	r1, r4
 80028f4:	4628      	mov	r0, r5
 80028f6:	f000 f887 	bl	8002a08 <_sbrk_r>
 80028fa:	1c43      	adds	r3, r0, #1
 80028fc:	d00a      	beq.n	8002914 <sbrk_aligned+0x34>
 80028fe:	1cc4      	adds	r4, r0, #3
 8002900:	f024 0403 	bic.w	r4, r4, #3
 8002904:	42a0      	cmp	r0, r4
 8002906:	d007      	beq.n	8002918 <sbrk_aligned+0x38>
 8002908:	1a21      	subs	r1, r4, r0
 800290a:	4628      	mov	r0, r5
 800290c:	f000 f87c 	bl	8002a08 <_sbrk_r>
 8002910:	3001      	adds	r0, #1
 8002912:	d101      	bne.n	8002918 <sbrk_aligned+0x38>
 8002914:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002918:	4620      	mov	r0, r4
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	200000f0 	.word	0x200000f0

08002920 <_malloc_r>:
 8002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002924:	1ccd      	adds	r5, r1, #3
 8002926:	f025 0503 	bic.w	r5, r5, #3
 800292a:	3508      	adds	r5, #8
 800292c:	2d0c      	cmp	r5, #12
 800292e:	bf38      	it	cc
 8002930:	250c      	movcc	r5, #12
 8002932:	2d00      	cmp	r5, #0
 8002934:	4607      	mov	r7, r0
 8002936:	db01      	blt.n	800293c <_malloc_r+0x1c>
 8002938:	42a9      	cmp	r1, r5
 800293a:	d905      	bls.n	8002948 <_malloc_r+0x28>
 800293c:	230c      	movs	r3, #12
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	2600      	movs	r6, #0
 8002942:	4630      	mov	r0, r6
 8002944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002948:	4e2e      	ldr	r6, [pc, #184]	; (8002a04 <_malloc_r+0xe4>)
 800294a:	f000 f907 	bl	8002b5c <__malloc_lock>
 800294e:	6833      	ldr	r3, [r6, #0]
 8002950:	461c      	mov	r4, r3
 8002952:	bb34      	cbnz	r4, 80029a2 <_malloc_r+0x82>
 8002954:	4629      	mov	r1, r5
 8002956:	4638      	mov	r0, r7
 8002958:	f7ff ffc2 	bl	80028e0 <sbrk_aligned>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	4604      	mov	r4, r0
 8002960:	d14d      	bne.n	80029fe <_malloc_r+0xde>
 8002962:	6834      	ldr	r4, [r6, #0]
 8002964:	4626      	mov	r6, r4
 8002966:	2e00      	cmp	r6, #0
 8002968:	d140      	bne.n	80029ec <_malloc_r+0xcc>
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	4631      	mov	r1, r6
 800296e:	4638      	mov	r0, r7
 8002970:	eb04 0803 	add.w	r8, r4, r3
 8002974:	f000 f848 	bl	8002a08 <_sbrk_r>
 8002978:	4580      	cmp	r8, r0
 800297a:	d13a      	bne.n	80029f2 <_malloc_r+0xd2>
 800297c:	6821      	ldr	r1, [r4, #0]
 800297e:	3503      	adds	r5, #3
 8002980:	1a6d      	subs	r5, r5, r1
 8002982:	f025 0503 	bic.w	r5, r5, #3
 8002986:	3508      	adds	r5, #8
 8002988:	2d0c      	cmp	r5, #12
 800298a:	bf38      	it	cc
 800298c:	250c      	movcc	r5, #12
 800298e:	4629      	mov	r1, r5
 8002990:	4638      	mov	r0, r7
 8002992:	f7ff ffa5 	bl	80028e0 <sbrk_aligned>
 8002996:	3001      	adds	r0, #1
 8002998:	d02b      	beq.n	80029f2 <_malloc_r+0xd2>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	442b      	add	r3, r5
 800299e:	6023      	str	r3, [r4, #0]
 80029a0:	e00e      	b.n	80029c0 <_malloc_r+0xa0>
 80029a2:	6822      	ldr	r2, [r4, #0]
 80029a4:	1b52      	subs	r2, r2, r5
 80029a6:	d41e      	bmi.n	80029e6 <_malloc_r+0xc6>
 80029a8:	2a0b      	cmp	r2, #11
 80029aa:	d916      	bls.n	80029da <_malloc_r+0xba>
 80029ac:	1961      	adds	r1, r4, r5
 80029ae:	42a3      	cmp	r3, r4
 80029b0:	6025      	str	r5, [r4, #0]
 80029b2:	bf18      	it	ne
 80029b4:	6059      	strne	r1, [r3, #4]
 80029b6:	6863      	ldr	r3, [r4, #4]
 80029b8:	bf08      	it	eq
 80029ba:	6031      	streq	r1, [r6, #0]
 80029bc:	5162      	str	r2, [r4, r5]
 80029be:	604b      	str	r3, [r1, #4]
 80029c0:	4638      	mov	r0, r7
 80029c2:	f104 060b 	add.w	r6, r4, #11
 80029c6:	f000 f8cf 	bl	8002b68 <__malloc_unlock>
 80029ca:	f026 0607 	bic.w	r6, r6, #7
 80029ce:	1d23      	adds	r3, r4, #4
 80029d0:	1af2      	subs	r2, r6, r3
 80029d2:	d0b6      	beq.n	8002942 <_malloc_r+0x22>
 80029d4:	1b9b      	subs	r3, r3, r6
 80029d6:	50a3      	str	r3, [r4, r2]
 80029d8:	e7b3      	b.n	8002942 <_malloc_r+0x22>
 80029da:	6862      	ldr	r2, [r4, #4]
 80029dc:	42a3      	cmp	r3, r4
 80029de:	bf0c      	ite	eq
 80029e0:	6032      	streq	r2, [r6, #0]
 80029e2:	605a      	strne	r2, [r3, #4]
 80029e4:	e7ec      	b.n	80029c0 <_malloc_r+0xa0>
 80029e6:	4623      	mov	r3, r4
 80029e8:	6864      	ldr	r4, [r4, #4]
 80029ea:	e7b2      	b.n	8002952 <_malloc_r+0x32>
 80029ec:	4634      	mov	r4, r6
 80029ee:	6876      	ldr	r6, [r6, #4]
 80029f0:	e7b9      	b.n	8002966 <_malloc_r+0x46>
 80029f2:	230c      	movs	r3, #12
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4638      	mov	r0, r7
 80029f8:	f000 f8b6 	bl	8002b68 <__malloc_unlock>
 80029fc:	e7a1      	b.n	8002942 <_malloc_r+0x22>
 80029fe:	6025      	str	r5, [r4, #0]
 8002a00:	e7de      	b.n	80029c0 <_malloc_r+0xa0>
 8002a02:	bf00      	nop
 8002a04:	200000ec 	.word	0x200000ec

08002a08 <_sbrk_r>:
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4d06      	ldr	r5, [pc, #24]	; (8002a24 <_sbrk_r+0x1c>)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	4604      	mov	r4, r0
 8002a10:	4608      	mov	r0, r1
 8002a12:	602b      	str	r3, [r5, #0]
 8002a14:	f7ff fb48 	bl	80020a8 <_sbrk>
 8002a18:	1c43      	adds	r3, r0, #1
 8002a1a:	d102      	bne.n	8002a22 <_sbrk_r+0x1a>
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	b103      	cbz	r3, 8002a22 <_sbrk_r+0x1a>
 8002a20:	6023      	str	r3, [r4, #0]
 8002a22:	bd38      	pop	{r3, r4, r5, pc}
 8002a24:	200000f4 	.word	0x200000f4

08002a28 <__sread>:
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a30:	f000 f8a0 	bl	8002b74 <_read_r>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	bfab      	itete	ge
 8002a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8002a3c:	181b      	addge	r3, r3, r0
 8002a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a42:	bfac      	ite	ge
 8002a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a46:	81a3      	strhlt	r3, [r4, #12]
 8002a48:	bd10      	pop	{r4, pc}

08002a4a <__swrite>:
 8002a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a4e:	461f      	mov	r7, r3
 8002a50:	898b      	ldrh	r3, [r1, #12]
 8002a52:	05db      	lsls	r3, r3, #23
 8002a54:	4605      	mov	r5, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	4616      	mov	r6, r2
 8002a5a:	d505      	bpl.n	8002a68 <__swrite+0x1e>
 8002a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a60:	2302      	movs	r3, #2
 8002a62:	2200      	movs	r2, #0
 8002a64:	f000 f868 	bl	8002b38 <_lseek_r>
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a72:	81a3      	strh	r3, [r4, #12]
 8002a74:	4632      	mov	r2, r6
 8002a76:	463b      	mov	r3, r7
 8002a78:	4628      	mov	r0, r5
 8002a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7e:	f000 b817 	b.w	8002ab0 <_write_r>

08002a82 <__sseek>:
 8002a82:	b510      	push	{r4, lr}
 8002a84:	460c      	mov	r4, r1
 8002a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a8a:	f000 f855 	bl	8002b38 <_lseek_r>
 8002a8e:	1c43      	adds	r3, r0, #1
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	bf15      	itete	ne
 8002a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a9e:	81a3      	strheq	r3, [r4, #12]
 8002aa0:	bf18      	it	ne
 8002aa2:	81a3      	strhne	r3, [r4, #12]
 8002aa4:	bd10      	pop	{r4, pc}

08002aa6 <__sclose>:
 8002aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aaa:	f000 b813 	b.w	8002ad4 <_close_r>
	...

08002ab0 <_write_r>:
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	4d07      	ldr	r5, [pc, #28]	; (8002ad0 <_write_r+0x20>)
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	4608      	mov	r0, r1
 8002ab8:	4611      	mov	r1, r2
 8002aba:	2200      	movs	r2, #0
 8002abc:	602a      	str	r2, [r5, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f7ff faa1 	bl	8002006 <_write>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d102      	bne.n	8002ace <_write_r+0x1e>
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	b103      	cbz	r3, 8002ace <_write_r+0x1e>
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
 8002ad0:	200000f4 	.word	0x200000f4

08002ad4 <_close_r>:
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	4d06      	ldr	r5, [pc, #24]	; (8002af0 <_close_r+0x1c>)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	4604      	mov	r4, r0
 8002adc:	4608      	mov	r0, r1
 8002ade:	602b      	str	r3, [r5, #0]
 8002ae0:	f7ff faad 	bl	800203e <_close>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d102      	bne.n	8002aee <_close_r+0x1a>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	b103      	cbz	r3, 8002aee <_close_r+0x1a>
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	200000f4 	.word	0x200000f4

08002af4 <_fstat_r>:
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	4d07      	ldr	r5, [pc, #28]	; (8002b14 <_fstat_r+0x20>)
 8002af8:	2300      	movs	r3, #0
 8002afa:	4604      	mov	r4, r0
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	602b      	str	r3, [r5, #0]
 8002b02:	f7ff faa8 	bl	8002056 <_fstat>
 8002b06:	1c43      	adds	r3, r0, #1
 8002b08:	d102      	bne.n	8002b10 <_fstat_r+0x1c>
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	b103      	cbz	r3, 8002b10 <_fstat_r+0x1c>
 8002b0e:	6023      	str	r3, [r4, #0]
 8002b10:	bd38      	pop	{r3, r4, r5, pc}
 8002b12:	bf00      	nop
 8002b14:	200000f4 	.word	0x200000f4

08002b18 <_isatty_r>:
 8002b18:	b538      	push	{r3, r4, r5, lr}
 8002b1a:	4d06      	ldr	r5, [pc, #24]	; (8002b34 <_isatty_r+0x1c>)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	4604      	mov	r4, r0
 8002b20:	4608      	mov	r0, r1
 8002b22:	602b      	str	r3, [r5, #0]
 8002b24:	f7ff faa7 	bl	8002076 <_isatty>
 8002b28:	1c43      	adds	r3, r0, #1
 8002b2a:	d102      	bne.n	8002b32 <_isatty_r+0x1a>
 8002b2c:	682b      	ldr	r3, [r5, #0]
 8002b2e:	b103      	cbz	r3, 8002b32 <_isatty_r+0x1a>
 8002b30:	6023      	str	r3, [r4, #0]
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
 8002b34:	200000f4 	.word	0x200000f4

08002b38 <_lseek_r>:
 8002b38:	b538      	push	{r3, r4, r5, lr}
 8002b3a:	4d07      	ldr	r5, [pc, #28]	; (8002b58 <_lseek_r+0x20>)
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	4608      	mov	r0, r1
 8002b40:	4611      	mov	r1, r2
 8002b42:	2200      	movs	r2, #0
 8002b44:	602a      	str	r2, [r5, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f7ff faa0 	bl	800208c <_lseek>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d102      	bne.n	8002b56 <_lseek_r+0x1e>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	b103      	cbz	r3, 8002b56 <_lseek_r+0x1e>
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
 8002b58:	200000f4 	.word	0x200000f4

08002b5c <__malloc_lock>:
 8002b5c:	4801      	ldr	r0, [pc, #4]	; (8002b64 <__malloc_lock+0x8>)
 8002b5e:	f7ff be0b 	b.w	8002778 <__retarget_lock_acquire_recursive>
 8002b62:	bf00      	nop
 8002b64:	200000e8 	.word	0x200000e8

08002b68 <__malloc_unlock>:
 8002b68:	4801      	ldr	r0, [pc, #4]	; (8002b70 <__malloc_unlock+0x8>)
 8002b6a:	f7ff be06 	b.w	800277a <__retarget_lock_release_recursive>
 8002b6e:	bf00      	nop
 8002b70:	200000e8 	.word	0x200000e8

08002b74 <_read_r>:
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4d07      	ldr	r5, [pc, #28]	; (8002b94 <_read_r+0x20>)
 8002b78:	4604      	mov	r4, r0
 8002b7a:	4608      	mov	r0, r1
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	2200      	movs	r2, #0
 8002b80:	602a      	str	r2, [r5, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f7ff fa22 	bl	8001fcc <_read>
 8002b88:	1c43      	adds	r3, r0, #1
 8002b8a:	d102      	bne.n	8002b92 <_read_r+0x1e>
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	b103      	cbz	r3, 8002b92 <_read_r+0x1e>
 8002b90:	6023      	str	r3, [r4, #0]
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	200000f4 	.word	0x200000f4

08002b98 <_init>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	bf00      	nop
 8002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	469e      	mov	lr, r3
 8002ba2:	4770      	bx	lr

08002ba4 <_fini>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr
