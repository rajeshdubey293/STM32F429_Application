
STM32F4_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f94  08006f94  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f9c  08006f9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012f0c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f84  20012f84  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192ea  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039f2  00000000  00000000  00039392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003cd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  0003e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000651b  00000000  00000000  0003f898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002104a  00000000  00000000  00045db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109627  00000000  00000000  00066dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00170424  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006508  00000000  00000000  00170474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e60 	.word	0x08006e60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006e60 	.word	0x08006e60

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GPIO_Init>:
 */

#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef *port, uint16_t pin_number)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef gpio_init_struct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
	Clock_Enable(port);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 f813 	bl	80005ec <Clock_Enable>
	gpio_init_struct.Pin = pin_number;
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
	gpio_init_struct.Speed = GPIO_SPEED_FAST;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(port, &gpio_init_struct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fb7d 	bl	8000cdc <HAL_GPIO_Init>
}
 80005e2:	bf00      	nop
 80005e4:	3720      	adds	r7, #32
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <Clock_Enable>:

void Clock_Enable(GPIO_TypeDef *port)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if(port == GPIOA)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a4f      	ldr	r2, [pc, #316]	; (8000734 <Clock_Enable+0x148>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d10e      	bne.n	800061a <Clock_Enable+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	4b4d      	ldr	r3, [pc, #308]	; (8000738 <Clock_Enable+0x14c>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	4a4c      	ldr	r2, [pc, #304]	; (8000738 <Clock_Enable+0x14c>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6313      	str	r3, [r2, #48]	; 0x30
 800060c:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <Clock_Enable+0x14c>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		__HAL_RCC_GPIOG_CLK_ENABLE();
	else if(port == GPIOH)
		__HAL_RCC_GPIOH_CLK_ENABLE();
	else
		printf("Enter Valid Port\r\n");
}
 8000618:	e087      	b.n	800072a <Clock_Enable+0x13e>
	else if(port == GPIOB)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a47      	ldr	r2, [pc, #284]	; (800073c <Clock_Enable+0x150>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d10e      	bne.n	8000640 <Clock_Enable+0x54>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
 8000626:	4b44      	ldr	r3, [pc, #272]	; (8000738 <Clock_Enable+0x14c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a43      	ldr	r2, [pc, #268]	; (8000738 <Clock_Enable+0x14c>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <Clock_Enable+0x14c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	623b      	str	r3, [r7, #32]
 800063c:	6a3b      	ldr	r3, [r7, #32]
}
 800063e:	e074      	b.n	800072a <Clock_Enable+0x13e>
	else if(port == GPIOC)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a3f      	ldr	r2, [pc, #252]	; (8000740 <Clock_Enable+0x154>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d10e      	bne.n	8000666 <Clock_Enable+0x7a>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
 800064c:	4b3a      	ldr	r3, [pc, #232]	; (8000738 <Clock_Enable+0x14c>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a39      	ldr	r2, [pc, #228]	; (8000738 <Clock_Enable+0x14c>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
 8000658:	4b37      	ldr	r3, [pc, #220]	; (8000738 <Clock_Enable+0x14c>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	69fb      	ldr	r3, [r7, #28]
}
 8000664:	e061      	b.n	800072a <Clock_Enable+0x13e>
	else if(port == GPIOD)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a36      	ldr	r2, [pc, #216]	; (8000744 <Clock_Enable+0x158>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d10e      	bne.n	800068c <Clock_Enable+0xa0>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <Clock_Enable+0x14c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a30      	ldr	r2, [pc, #192]	; (8000738 <Clock_Enable+0x14c>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <Clock_Enable+0x14c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]
}
 800068a:	e04e      	b.n	800072a <Clock_Enable+0x13e>
	else if(port == GPIOE)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <Clock_Enable+0x15c>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10e      	bne.n	80006b2 <Clock_Enable+0xc6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <Clock_Enable+0x14c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a26      	ldr	r2, [pc, #152]	; (8000738 <Clock_Enable+0x14c>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <Clock_Enable+0x14c>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	697b      	ldr	r3, [r7, #20]
}
 80006b0:	e03b      	b.n	800072a <Clock_Enable+0x13e>
	else if(port == GPIOF)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <Clock_Enable+0x160>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d10e      	bne.n	80006d8 <Clock_Enable+0xec>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <Clock_Enable+0x14c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <Clock_Enable+0x14c>)
 80006c4:	f043 0320 	orr.w	r3, r3, #32
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <Clock_Enable+0x14c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0320 	and.w	r3, r3, #32
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
}
 80006d6:	e028      	b.n	800072a <Clock_Enable+0x13e>
	else if(port == GPIOG)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <Clock_Enable+0x164>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d10e      	bne.n	80006fe <Clock_Enable+0x112>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <Clock_Enable+0x14c>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	4a13      	ldr	r2, [pc, #76]	; (8000738 <Clock_Enable+0x14c>)
 80006ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ee:	6313      	str	r3, [r2, #48]	; 0x30
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <Clock_Enable+0x14c>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	e015      	b.n	800072a <Clock_Enable+0x13e>
	else if(port == GPIOH)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <Clock_Enable+0x168>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d10e      	bne.n	8000724 <Clock_Enable+0x138>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <Clock_Enable+0x14c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <Clock_Enable+0x14c>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <Clock_Enable+0x14c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
}
 8000722:	e002      	b.n	800072a <Clock_Enable+0x13e>
		printf("Enter Valid Port\r\n");
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <Clock_Enable+0x16c>)
 8000726:	f005 fb9b 	bl	8005e60 <puts>
}
 800072a:	bf00      	nop
 800072c:	3728      	adds	r7, #40	; 0x28
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020000 	.word	0x40020000
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021000 	.word	0x40021000
 800074c:	40021400 	.word	0x40021400
 8000750:	40021800 	.word	0x40021800
 8000754:	40021c00 	.word	0x40021c00
 8000758:	08006e78 	.word	0x08006e78

0800075c <GPIO_Pin_Toggle>:

inline void GPIO_Pin_Toggle(GPIO_TypeDef *port, uint16_t pin_number)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(port, pin_number);
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	4619      	mov	r1, r3
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 fc61 	bl	8001034 <HAL_GPIO_TogglePin>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <I2C_Init>:
#include "I2C.h"

I2C_HandleTypeDef hi2c1;

void I2C_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <I2C_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <I2C_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <I2C_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <I2C_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <I2C_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <I2C_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <I2C_Init+0x74>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <I2C_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <I2C_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <I2C_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <I2C_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <I2C_Init+0x74>)
 80007ba:	f000 fc55 	bl	8001068 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <I2C_Init+0x4c>
	{
		Error_Handler();
 80007c4:	f004 fff0 	bl	80057a8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <I2C_Init+0x74>)
 80007cc:	f000 fd90 	bl	80012f0 <HAL_I2CEx_ConfigAnalogFilter>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <I2C_Init+0x5e>
	{
		Error_Handler();
 80007d6:	f004 ffe7 	bl	80057a8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <I2C_Init+0x74>)
 80007de:	f000 fdc3 	bl	8001368 <HAL_I2CEx_ConfigDigitalFilter>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <I2C_Init+0x70>
	{
		Error_Handler();
 80007e8:	f004 ffde 	bl	80057a8 <Error_Handler>
	}

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000094 	.word	0x20000094
 80007f4:	40005400 	.word	0x40005400
 80007f8:	000186a0 	.word	0x000186a0

080007fc <Timer_Init>:

/*
 * Timer init function
 */
void Timer_Init(TIM_TypeDef *Timer)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	htim6.Instance = Timer;
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <Timer_Init+0x34>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
	htim6.Init.Prescaler = 1;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <Timer_Init+0x34>)
 800080c:	2201      	movs	r2, #1
 800080e:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 20000-1;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <Timer_Init+0x34>)
 8000812:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000816:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <Timer_Init+0x34>)
 800081a:	f001 faff 	bl	8001e1c <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <Timer_Init+0x2c>
	{
		Error_Handler();
 8000824:	f004 ffc0 	bl	80057a8 <Error_Handler>
	}
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000e8 	.word	0x200000e8

08000834 <Timer_Start_IT>:
{
	HAL_TIM_Base_Start(&htim6);
}

inline void Timer_Start_IT(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <Timer_Start_IT+0x10>)
 800083a:	f001 fb3f 	bl	8001ebc <HAL_TIM_Base_Start_IT>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000e8 	.word	0x200000e8

08000848 <HAL_TIM_PeriodElapsedCallback>:

inline void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a09      	ldr	r2, [pc, #36]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800085a:	f000 f8ab 	bl	80009b4 <HAL_IncTick>
	}
	if (htim->Instance == TIM6) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d104      	bne.n	8000872 <HAL_TIM_PeriodElapsedCallback+0x2a>
		sysTick++;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000870:	6013      	str	r3, [r2, #0]
	}

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40001400 	.word	0x40001400
 8000880:	40001000 	.word	0x40001000
 8000884:	20000130 	.word	0x20000130

08000888 <UART_Init>:

extern uint8_t rx_Buffer;
char byte_Available = 0;

void UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <UART_Init+0x4c>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <UART_Init+0x4c>)
 80008c0:	f001 fd50 	bl	8002364 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <UART_Init+0x46>
	{
		Error_Handler();
 80008ca:	f004 ff6d 	bl	80057a8 <Error_Handler>
	}

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000134 	.word	0x20000134
 80008d8:	40011000 	.word	0x40011000

080008dc <Print_Msg>:

void Print_Msg(char *format,...)
{
 80008dc:	b40f      	push	{r0, r1, r2, r3}
 80008de:	b580      	push	{r7, lr}
 80008e0:	b096      	sub	sp, #88	; 0x58
 80008e2:	af00      	add	r7, sp, #0
	char tx_Buffer[80];
	/*Extract the the argument list using VA APIS */
	va_list args;
	va_start(args, format);
 80008e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008e8:	607b      	str	r3, [r7, #4]
	vsprintf(tx_Buffer, format,args);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 fad2 	bl	8005e9c <vsiprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)tx_Buffer, strlen(tx_Buffer), 10);
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc77 	bl	80001f0 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	f107 0108 	add.w	r1, r7, #8
 800090a:	230a      	movs	r3, #10
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <Print_Msg+0x44>)
 800090e:	f001 fd76 	bl	80023fe <HAL_UART_Transmit>
	va_end(args);
}
 8000912:	bf00      	nop
 8000914:	3758      	adds	r7, #88	; 0x58
 8000916:	46bd      	mov	sp, r7
 8000918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800091c:	b004      	add	sp, #16
 800091e:	4770      	bx	lr
 8000920:	20000134 	.word	0x20000134

08000924 <HAL_UART_RxCpltCallback>:
inline void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	byte_Available = 1;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_UART_RxCpltCallback+0x20>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_Buffer, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	4904      	ldr	r1, [pc, #16]	; (8000948 <HAL_UART_RxCpltCallback+0x24>)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_RxCpltCallback+0x28>)
 8000938:	f001 fdf3 	bl	8002522 <HAL_UART_Receive_IT>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000178 	.word	0x20000178
 8000948:	20012f24 	.word	0x20012f24
 800094c:	20000134 	.word	0x20000134

08000950 <UART_Interrupt_Start>:
inline void UART_Receive(char *tmp_Rx_Buffer)
{
	HAL_UART_Receive(&huart1, (uint8_t*)tmp_Rx_Buffer, 1, 100);
}
inline void UART_Interrupt_Start(char *tmp_Rx_Buffer)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)tmp_Rx_Buffer, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <UART_Interrupt_Start+0x1c>)
 800095e:	f001 fde0 	bl	8002522 <HAL_UART_Receive_IT>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000134 	.word	0x20000134

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f8d8 	bl	8000b4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	2000      	movs	r0, #0
 80009a0:	f005 f886 	bl	8005ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f004 ff92 	bl	80058cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000004 	.word	0x20000004
 80009d8:	2000017c 	.word	0x2000017c

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2000017c 	.word	0x2000017c

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <__NVIC_EnableIRQ+0x38>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff4c 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b76:	f7ff ff61 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	6978      	ldr	r0, [r7, #20]
 8000b82:	f7ff ffb1 	bl	8000ae8 <NVIC_EncodePriority>
 8000b86:	4602      	mov	r2, r0
 8000b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff80 	bl	8000a94 <__NVIC_SetPriority>
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff54 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000bc6:	f7ff ff09 	bl	80009dc <HAL_GetTick>
 8000bca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d008      	beq.n	8000bea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e052      	b.n	8000c90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0216 	bic.w	r2, r2, #22
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <HAL_DMA_Abort+0x62>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0208 	bic.w	r2, r2, #8
 8000c28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c3a:	e013      	b.n	8000c64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c3c:	f7ff fece 	bl	80009dc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d90c      	bls.n	8000c64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2220      	movs	r2, #32
 8000c4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2203      	movs	r2, #3
 8000c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e015      	b.n	8000c90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1e4      	bne.n	8000c3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c76:	223f      	movs	r2, #63	; 0x3f
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d004      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00c      	b.n	8000cd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2205      	movs	r2, #5
 8000cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0201 	bic.w	r2, r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	e177      	b.n	8000fe8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f040 8166 	bne.w	8000fe2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d005      	beq.n	8000d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d130      	bne.n	8000d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	091b      	lsrs	r3, r3, #4
 8000d7a:	f003 0201 	and.w	r2, r3, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d017      	beq.n	8000dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d123      	bne.n	8000e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	08da      	lsrs	r2, r3, #3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3208      	adds	r2, #8
 8000de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	69b9      	ldr	r1, [r7, #24]
 8000e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0203 	and.w	r2, r3, #3
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 80c0 	beq.w	8000fe2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b66      	ldr	r3, [pc, #408]	; (8001000 <HAL_GPIO_Init+0x324>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a65      	ldr	r2, [pc, #404]	; (8001000 <HAL_GPIO_Init+0x324>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b63      	ldr	r3, [pc, #396]	; (8001000 <HAL_GPIO_Init+0x324>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7e:	4a61      	ldr	r2, [pc, #388]	; (8001004 <HAL_GPIO_Init+0x328>)
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a58      	ldr	r2, [pc, #352]	; (8001008 <HAL_GPIO_Init+0x32c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d037      	beq.n	8000f1a <HAL_GPIO_Init+0x23e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a57      	ldr	r2, [pc, #348]	; (800100c <HAL_GPIO_Init+0x330>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d031      	beq.n	8000f16 <HAL_GPIO_Init+0x23a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a56      	ldr	r2, [pc, #344]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d02b      	beq.n	8000f12 <HAL_GPIO_Init+0x236>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a55      	ldr	r2, [pc, #340]	; (8001014 <HAL_GPIO_Init+0x338>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d025      	beq.n	8000f0e <HAL_GPIO_Init+0x232>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a54      	ldr	r2, [pc, #336]	; (8001018 <HAL_GPIO_Init+0x33c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d01f      	beq.n	8000f0a <HAL_GPIO_Init+0x22e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a53      	ldr	r2, [pc, #332]	; (800101c <HAL_GPIO_Init+0x340>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x22a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a52      	ldr	r2, [pc, #328]	; (8001020 <HAL_GPIO_Init+0x344>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x226>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a51      	ldr	r2, [pc, #324]	; (8001024 <HAL_GPIO_Init+0x348>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x222>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a50      	ldr	r2, [pc, #320]	; (8001028 <HAL_GPIO_Init+0x34c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x21e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_GPIO_Init+0x350>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x21a>
 8000ef2:	2309      	movs	r3, #9
 8000ef4:	e012      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	e010      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000efa:	2308      	movs	r3, #8
 8000efc:	e00e      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e00c      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000f02:	2306      	movs	r3, #6
 8000f04:	e00a      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x240>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_GPIO_Init+0x328>)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <HAL_GPIO_Init+0x354>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a34      	ldr	r2, [pc, #208]	; (8001030 <HAL_GPIO_Init+0x354>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <HAL_GPIO_Init+0x354>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a29      	ldr	r2, [pc, #164]	; (8001030 <HAL_GPIO_Init+0x354>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <HAL_GPIO_Init+0x354>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <HAL_GPIO_Init+0x354>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_GPIO_Init+0x354>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_GPIO_Init+0x354>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f67f ae84 	bls.w	8000cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40013800 	.word	0x40013800
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40021400 	.word	0x40021400
 8001020:	40021800 	.word	0x40021800
 8001024:	40021c00 	.word	0x40021c00
 8001028:	40022000 	.word	0x40022000
 800102c:	40022400 	.word	0x40022400
 8001030:	40013c00 	.word	0x40013c00

08001034 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4013      	ands	r3, r2
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43d9      	mvns	r1, r3
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	400b      	ands	r3, r1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e12b      	b.n	80012d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f004 fcc6 	bl	8005a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2224      	movs	r2, #36	; 0x24
 8001098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010cc:	f000 fe4c 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 80010d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a81      	ldr	r2, [pc, #516]	; (80012dc <HAL_I2C_Init+0x274>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d807      	bhi.n	80010ec <HAL_I2C_Init+0x84>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4a80      	ldr	r2, [pc, #512]	; (80012e0 <HAL_I2C_Init+0x278>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	bf94      	ite	ls
 80010e4:	2301      	movls	r3, #1
 80010e6:	2300      	movhi	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	e006      	b.n	80010fa <HAL_I2C_Init+0x92>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4a7d      	ldr	r2, [pc, #500]	; (80012e4 <HAL_I2C_Init+0x27c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	bf94      	ite	ls
 80010f4:	2301      	movls	r3, #1
 80010f6:	2300      	movhi	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0e7      	b.n	80012d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4a78      	ldr	r2, [pc, #480]	; (80012e8 <HAL_I2C_Init+0x280>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0c9b      	lsrs	r3, r3, #18
 800110c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	430a      	orrs	r2, r1
 8001120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a6a      	ldr	r2, [pc, #424]	; (80012dc <HAL_I2C_Init+0x274>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d802      	bhi.n	800113c <HAL_I2C_Init+0xd4>
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3301      	adds	r3, #1
 800113a:	e009      	b.n	8001150 <HAL_I2C_Init+0xe8>
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4a69      	ldr	r2, [pc, #420]	; (80012ec <HAL_I2C_Init+0x284>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	099b      	lsrs	r3, r3, #6
 800114e:	3301      	adds	r3, #1
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	430b      	orrs	r3, r1
 8001156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	495c      	ldr	r1, [pc, #368]	; (80012dc <HAL_I2C_Init+0x274>)
 800116c:	428b      	cmp	r3, r1
 800116e:	d819      	bhi.n	80011a4 <HAL_I2C_Init+0x13c>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1e59      	subs	r1, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fbb1 f3f3 	udiv	r3, r1, r3
 800117e:	1c59      	adds	r1, r3, #1
 8001180:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001184:	400b      	ands	r3, r1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00a      	beq.n	80011a0 <HAL_I2C_Init+0x138>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1e59      	subs	r1, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fbb1 f3f3 	udiv	r3, r1, r3
 8001198:	3301      	adds	r3, #1
 800119a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119e:	e051      	b.n	8001244 <HAL_I2C_Init+0x1dc>
 80011a0:	2304      	movs	r3, #4
 80011a2:	e04f      	b.n	8001244 <HAL_I2C_Init+0x1dc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d111      	bne.n	80011d0 <HAL_I2C_Init+0x168>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1e58      	subs	r0, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6859      	ldr	r1, [r3, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	440b      	add	r3, r1
 80011ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80011be:	3301      	adds	r3, #1
 80011c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	e012      	b.n	80011f6 <HAL_I2C_Init+0x18e>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1e58      	subs	r0, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	0099      	lsls	r1, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_Init+0x196>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e022      	b.n	8001244 <HAL_I2C_Init+0x1dc>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10e      	bne.n	8001224 <HAL_I2C_Init+0x1bc>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1e58      	subs	r0, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6859      	ldr	r1, [r3, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	440b      	add	r3, r1
 8001214:	fbb0 f3f3 	udiv	r3, r0, r3
 8001218:	3301      	adds	r3, #1
 800121a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001222:	e00f      	b.n	8001244 <HAL_I2C_Init+0x1dc>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	0099      	lsls	r1, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	fbb0 f3f3 	udiv	r3, r0, r3
 800123a:	3301      	adds	r3, #1
 800123c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	6809      	ldr	r1, [r1, #0]
 8001248:	4313      	orrs	r3, r2
 800124a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69da      	ldr	r2, [r3, #28]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6911      	ldr	r1, [r2, #16]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68d2      	ldr	r2, [r2, #12]
 800127e:	4311      	orrs	r1, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	430b      	orrs	r3, r1
 8001286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695a      	ldr	r2, [r3, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2220      	movs	r2, #32
 80012be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	000186a0 	.word	0x000186a0
 80012e0:	001e847f 	.word	0x001e847f
 80012e4:	003d08ff 	.word	0x003d08ff
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	10624dd3 	.word	0x10624dd3

080012f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b20      	cmp	r3, #32
 8001304:	d129      	bne.n	800135a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2224      	movs	r2, #36	; 0x24
 800130a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0210 	bic.w	r2, r2, #16
 800132c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800135a:	2302      	movs	r3, #2
  }
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b20      	cmp	r3, #32
 8001380:	d12a      	bne.n	80013d8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2224      	movs	r2, #36	; 0x24
 8001386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	f023 030f 	bic.w	r3, r3, #15
 80013a8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	89fa      	ldrh	r2, [r7, #14]
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2220      	movs	r2, #32
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e000      	b.n	80013da <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80013d8:	2302      	movs	r3, #2
  }
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_PWREx_EnableOverDrive+0x90>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_PWREx_EnableOverDrive+0x90>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_PWREx_EnableOverDrive+0x90>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_PWREx_EnableOverDrive+0x94>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001414:	f7ff fae2 	bl	80009dc <HAL_GetTick>
 8001418:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800141a:	e009      	b.n	8001430 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800141c:	f7ff fade 	bl	80009dc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800142a:	d901      	bls.n	8001430 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e01f      	b.n	8001470 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_PWREx_EnableOverDrive+0x98>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d1ee      	bne.n	800141c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001444:	f7ff faca 	bl	80009dc <HAL_GetTick>
 8001448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800144a:	e009      	b.n	8001460 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800144c:	f7ff fac6 	bl	80009dc <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145a:	d901      	bls.n	8001460 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e007      	b.n	8001470 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <HAL_PWREx_EnableOverDrive+0x98>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800146c:	d1ee      	bne.n	800144c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	420e0040 	.word	0x420e0040
 8001480:	40007000 	.word	0x40007000
 8001484:	420e0044 	.word	0x420e0044

08001488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e267      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d075      	beq.n	8001592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d00c      	beq.n	80014cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b2:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d112      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ca:	d10b      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d05b      	beq.n	8001590 <HAL_RCC_OscConfig+0x108>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d157      	bne.n	8001590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e242      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d106      	bne.n	80014fc <HAL_RCC_OscConfig+0x74>
 80014ee:	4b76      	ldr	r3, [pc, #472]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a75      	ldr	r2, [pc, #468]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e01d      	b.n	8001538 <HAL_RCC_OscConfig+0xb0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x98>
 8001506:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a6f      	ldr	r2, [pc, #444]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b6d      	ldr	r3, [pc, #436]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6c      	ldr	r2, [pc, #432]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0xb0>
 8001520:	4b69      	ldr	r3, [pc, #420]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a68      	ldr	r2, [pc, #416]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fa4c 	bl	80009dc <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fa48 	bl	80009dc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e207      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0xc0>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fa38 	bl	80009dc <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fa34 	bl	80009dc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1f3      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0xe8>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d063      	beq.n	8001666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d116      	bne.n	80015f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_RCC_OscConfig+0x152>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d001      	beq.n	80015da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1c7      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4937      	ldr	r1, [pc, #220]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	e03a      	b.n	8001666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_OscConfig+0x244>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff f9ed 	bl	80009dc <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff f9e9 	bl	80009dc <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1a8      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4925      	ldr	r1, [pc, #148]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e015      	b.n	8001666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x244>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff f9cc 	bl	80009dc <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff f9c8 	bl	80009dc <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e187      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d036      	beq.n	80016e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d016      	beq.n	80016a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x248>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff f9ac 	bl	80009dc <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff f9a8 	bl	80009dc <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e167      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800169c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x200>
 80016a6:	e01b      	b.n	80016e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x248>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f995 	bl	80009dc <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	e00e      	b.n	80016d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff f991 	bl	80009dc <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d907      	bls.n	80016d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e150      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
 80016c8:	40023800 	.word	0x40023800
 80016cc:	42470000 	.word	0x42470000
 80016d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ea      	bne.n	80016b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8097 	beq.w	800181c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10f      	bne.n	800171e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a7c      	ldr	r2, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b77      	ldr	r3, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b74      	ldr	r3, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a73      	ldr	r2, [pc, #460]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7ff f951 	bl	80009dc <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7ff f94d 	bl	80009dc <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e10c      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x2ea>
 8001764:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x324>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x30c>
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	4a5e      	ldr	r2, [pc, #376]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6713      	str	r3, [r2, #112]	; 0x70
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a5b      	ldr	r2, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x324>
 8001794:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a57      	ldr	r2, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a54      	ldr	r2, [pc, #336]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d015      	beq.n	80017e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff f912 	bl	80009dc <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff f90e 	bl	80009dc <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0cb      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ee      	beq.n	80017bc <HAL_RCC_OscConfig+0x334>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff f8fc 	bl	80009dc <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff f8f8 	bl	80009dc <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0b5      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ee      	bne.n	80017e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a38      	ldr	r2, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a1 	beq.w	8001968 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d05c      	beq.n	80018ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d141      	bne.n	80018be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff f8cc 	bl	80009dc <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff f8c8 	bl	80009dc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e087      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	3b01      	subs	r3, #1
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	491b      	ldr	r1, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff f8a1 	bl	80009dc <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff f89d 	bl	80009dc <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e05c      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x416>
 80018bc:	e054      	b.n	8001968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f88a 	bl	80009dc <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff f886 	bl	80009dc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e045      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x444>
 80018ea:	e03d      	b.n	8001968 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e038      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000
 8001900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_RCC_OscConfig+0x4ec>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d028      	beq.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d121      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d11a      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001934:	4013      	ands	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800193a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193c:	4293      	cmp	r3, r2
 800193e:	d111      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	3b01      	subs	r3, #1
 800194e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d107      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0cc      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d90c      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b8      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d044      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d119      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e07f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e06f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e067      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 0203 	bic.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4934      	ldr	r1, [pc, #208]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a68:	f7fe ffb8 	bl	80009dc <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7fe ffb4 	bl	80009dc <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e04f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 020c 	and.w	r2, r3, #12
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1eb      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 030f 	and.w	r3, r3, #15
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d20c      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e032      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4916      	ldr	r1, [pc, #88]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001afe:	f000 f821 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	5ccb      	ldrb	r3, [r1, r3]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 ffc6 	bl	8005ab0 <HAL_InitTick>

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023c00 	.word	0x40023c00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08006ee4 	.word	0x08006ee4
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b48:	b094      	sub	sp, #80	; 0x50
 8001b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b50:	2300      	movs	r3, #0
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b54:	2300      	movs	r3, #0
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b5c:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d00d      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x40>
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	f200 80e1 	bhi.w	8001d30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x34>
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b76:	e0db      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b7c:	e0db      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b7e:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b82:	e0d8      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b84:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b8e:	4b6d      	ldr	r3, [pc, #436]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9a:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	099b      	lsrs	r3, r3, #6
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	462b      	mov	r3, r5
 8001bba:	f04f 0000 	mov.w	r0, #0
 8001bbe:	f04f 0100 	mov.w	r1, #0
 8001bc2:	0159      	lsls	r1, r3, #5
 8001bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc8:	0150      	lsls	r0, r2, #5
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4621      	mov	r1, r4
 8001bd0:	1a51      	subs	r1, r2, r1
 8001bd2:	6139      	str	r1, [r7, #16]
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001be8:	4659      	mov	r1, fp
 8001bea:	018b      	lsls	r3, r1, #6
 8001bec:	4651      	mov	r1, sl
 8001bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bf2:	4651      	mov	r1, sl
 8001bf4:	018a      	lsls	r2, r1, #6
 8001bf6:	4651      	mov	r1, sl
 8001bf8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bfc:	4659      	mov	r1, fp
 8001bfe:	eb63 0901 	sbc.w	r9, r3, r1
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c16:	4690      	mov	r8, r2
 8001c18:	4699      	mov	r9, r3
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	eb18 0303 	adds.w	r3, r8, r3
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	462b      	mov	r3, r5
 8001c24:	eb49 0303 	adc.w	r3, r9, r3
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c36:	4629      	mov	r1, r5
 8001c38:	024b      	lsls	r3, r1, #9
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c40:	4621      	mov	r1, r4
 8001c42:	024a      	lsls	r2, r1, #9
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c54:	f7fe fb24 	bl	80002a0 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c60:	e058      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c7c:	4642      	mov	r2, r8
 8001c7e:	464b      	mov	r3, r9
 8001c80:	f04f 0000 	mov.w	r0, #0
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	0159      	lsls	r1, r3, #5
 8001c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8e:	0150      	lsls	r0, r2, #5
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4641      	mov	r1, r8
 8001c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c9a:	4649      	mov	r1, r9
 8001c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	00eb      	lsls	r3, r5, #3
 8001cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cca:	00e2      	lsls	r2, r4, #3
 8001ccc:	4614      	mov	r4, r2
 8001cce:	461d      	mov	r5, r3
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	18e3      	adds	r3, r4, r3
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	464b      	mov	r3, r9
 8001cd8:	eb45 0303 	adc.w	r3, r5, r3
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cea:	4629      	mov	r1, r5
 8001cec:	028b      	lsls	r3, r1, #10
 8001cee:	4621      	mov	r1, r4
 8001cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	028a      	lsls	r2, r1, #10
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	61fa      	str	r2, [r7, #28]
 8001d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d08:	f7fe faca 	bl	80002a0 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d2e:	e002      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3750      	adds	r7, #80	; 0x50
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	00f42400 	.word	0x00f42400
 8001d4c:	007a1200 	.word	0x007a1200

08001d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000010 	.word	0x20000010

08001d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d6c:	f7ff fff0 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0a9b      	lsrs	r3, r3, #10
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4903      	ldr	r1, [pc, #12]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	08006ef4 	.word	0x08006ef4

08001d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d94:	f7ff ffdc 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0b5b      	lsrs	r3, r3, #13
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08006ef4 	.word	0x08006ef4

08001db8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_GetClockConfig+0x5c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <HAL_RCC_GetClockConfig+0x60>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 020f 	and.w	r2, r3, #15
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	601a      	str	r2, [r3, #0]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40023c00 	.word	0x40023c00

08001e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e041      	b.n	8001eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f003 fd7c 	bl	8005940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 f9ce 	bl	80021fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d001      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e04e      	b.n	8001f72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d022      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x80>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efe:	d01d      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x80>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d018      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x80>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x80>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00e      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x80>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x80>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x80>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d111      	bne.n	8001f60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d010      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5e:	e007      	b.n	8001f70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00
 8001f90:	40010400 	.word	0x40010400
 8001f94:	40014000 	.word	0x40014000
 8001f98:	40001800 	.word	0x40001800

08001f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d122      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0202 	mvn.w	r2, #2
 8001fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8ee 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8e0 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f8f1 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d122      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11b      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0204 	mvn.w	r2, #4
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8c4 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8b6 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f8c7 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d122      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b08      	cmp	r3, #8
 8002066:	d11b      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0208 	mvn.w	r2, #8
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f89a 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f88c 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f89d 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0210 	mvn.w	r2, #16
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2208      	movs	r2, #8
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f870 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f862 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f873 	bl	80021d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0201 	mvn.w	r2, #1
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fb94 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f902 	bl	8002350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d107      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f838 	bl	80021e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b20      	cmp	r3, #32
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b20      	cmp	r3, #32
 8002192:	d107      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0220 	mvn.w	r2, #32
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8cc 	bl	800233c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a40      	ldr	r2, [pc, #256]	; (8002310 <TIM_Base_SetConfig+0x114>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <TIM_Base_SetConfig+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221a:	d00f      	beq.n	800223c <TIM_Base_SetConfig+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3d      	ldr	r2, [pc, #244]	; (8002314 <TIM_Base_SetConfig+0x118>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00b      	beq.n	800223c <TIM_Base_SetConfig+0x40>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3c      	ldr	r2, [pc, #240]	; (8002318 <TIM_Base_SetConfig+0x11c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3b      	ldr	r2, [pc, #236]	; (800231c <TIM_Base_SetConfig+0x120>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_Base_SetConfig+0x40>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3a      	ldr	r2, [pc, #232]	; (8002320 <TIM_Base_SetConfig+0x124>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d108      	bne.n	800224e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <TIM_Base_SetConfig+0x114>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02b      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225c:	d027      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <TIM_Base_SetConfig+0x118>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d023      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <TIM_Base_SetConfig+0x11c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01f      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a2a      	ldr	r2, [pc, #168]	; (800231c <TIM_Base_SetConfig+0x120>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01b      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a29      	ldr	r2, [pc, #164]	; (8002320 <TIM_Base_SetConfig+0x124>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d017      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a28      	ldr	r2, [pc, #160]	; (8002324 <TIM_Base_SetConfig+0x128>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a27      	ldr	r2, [pc, #156]	; (8002328 <TIM_Base_SetConfig+0x12c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00f      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a26      	ldr	r2, [pc, #152]	; (800232c <TIM_Base_SetConfig+0x130>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00b      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a25      	ldr	r2, [pc, #148]	; (8002330 <TIM_Base_SetConfig+0x134>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <TIM_Base_SetConfig+0x138>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <TIM_Base_SetConfig+0x13c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d108      	bne.n	80022c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <TIM_Base_SetConfig+0x114>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d003      	beq.n	80022f4 <TIM_Base_SetConfig+0xf8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <TIM_Base_SetConfig+0x124>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d103      	bne.n	80022fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	615a      	str	r2, [r3, #20]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40010000 	.word	0x40010000
 8002314:	40000400 	.word	0x40000400
 8002318:	40000800 	.word	0x40000800
 800231c:	40000c00 	.word	0x40000c00
 8002320:	40010400 	.word	0x40010400
 8002324:	40014000 	.word	0x40014000
 8002328:	40014400 	.word	0x40014400
 800232c:	40014800 	.word	0x40014800
 8002330:	40001800 	.word	0x40001800
 8002334:	40001c00 	.word	0x40001c00
 8002338:	40002000 	.word	0x40002000

0800233c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e03f      	b.n	80023f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f003 faf8 	bl	8005980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	; 0x24
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fddf 	bl	8002f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b08a      	sub	sp, #40	; 0x28
 8002402:	af02      	add	r7, sp, #8
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b20      	cmp	r3, #32
 800241c:	d17c      	bne.n	8002518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_UART_Transmit+0x2c>
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e075      	b.n	800251a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_UART_Transmit+0x3e>
 8002438:	2302      	movs	r3, #2
 800243a:	e06e      	b.n	800251a <HAL_UART_Transmit+0x11c>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2221      	movs	r2, #33	; 0x21
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002452:	f7fe fac3 	bl	80009dc <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246c:	d108      	bne.n	8002480 <HAL_UART_Transmit+0x82>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	e003      	b.n	8002488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002490:	e02a      	b.n	80024e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fb1f 	bl	8002ae0 <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e036      	b.n	800251a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10b      	bne.n	80024ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	3302      	adds	r3, #2
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	e007      	b.n	80024da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3301      	adds	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1cf      	bne.n	8002492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 faef 	bl	8002ae0 <UART_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	4613      	mov	r3, r2
 800252e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b20      	cmp	r3, #32
 800253a:	d11d      	bne.n	8002578 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_UART_Receive_IT+0x26>
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e016      	b.n	800257a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_UART_Receive_IT+0x38>
 8002556:	2302      	movs	r3, #2
 8002558:	e00f      	b.n	800257a <HAL_UART_Receive_IT+0x58>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	461a      	mov	r2, r3
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fb24 	bl	8002bbc <UART_Start_Receive_IT>
 8002574:	4603      	mov	r3, r0
 8002576:	e000      	b.n	800257a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0ba      	sub	sp, #232	; 0xe8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_UART_IRQHandler+0x66>
 80025d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fc07 	bl	8002df6 <UART_Receive_IT>
      return;
 80025e8:	e256      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80de 	beq.w	80027b0 <HAL_UART_IRQHandler+0x22c>
 80025f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002604:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80d1 	beq.w	80027b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_UART_IRQHandler+0xae>
 800261a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_UART_IRQHandler+0xd2>
 800263e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_UART_IRQHandler+0xf6>
 8002662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f043 0204 	orr.w	r2, r3, #4
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d011      	beq.n	80026aa <HAL_UART_IRQHandler+0x126>
 8002686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0208 	orr.w	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 81ed 	beq.w	8002a8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_UART_IRQHandler+0x14e>
 80026c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fb92 	bl	8002df6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_UART_IRQHandler+0x17a>
 80026f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04f      	beq.n	800279e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa9a 	bl	8002c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d141      	bne.n	8002796 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3314      	adds	r3, #20
 8002718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002720:	e853 3f00 	ldrex	r3, [r3]
 8002724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800272c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3314      	adds	r3, #20
 800273a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800273e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800274a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800274e:	e841 2300 	strex	r3, r2, [r1]
 8002752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1d9      	bne.n	8002712 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	2b00      	cmp	r3, #0
 8002764:	d013      	beq.n	800278e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	4a7d      	ldr	r2, [pc, #500]	; (8002960 <HAL_UART_IRQHandler+0x3dc>)
 800276c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fa90 	bl	8000c98 <HAL_DMA_Abort_IT>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002788:	4610      	mov	r0, r2
 800278a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278c:	e00e      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f990 	bl	8002ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002794:	e00a      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f98c 	bl	8002ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279c:	e006      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f988 	bl	8002ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027aa:	e170      	b.n	8002a8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	bf00      	nop
    return;
 80027ae:	e16e      	b.n	8002a8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f040 814a 	bne.w	8002a4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8143 	beq.w	8002a4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 813c 	beq.w	8002a4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	f040 80b4 	bne.w	8002964 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002808:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8140 	beq.w	8002a92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800281a:	429a      	cmp	r2, r3
 800281c:	f080 8139 	bcs.w	8002a92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002826:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002832:	f000 8088 	beq.w	8002946 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800284c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800286e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800287a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1d9      	bne.n	8002836 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e1      	bne.n	8002882 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3314      	adds	r3, #20
 80028c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3314      	adds	r3, #20
 80028de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e3      	bne.n	80028be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002916:	f023 0310 	bic.w	r3, r3, #16
 800291a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002928:	65ba      	str	r2, [r7, #88]	; 0x58
 800292a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800292e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e3      	bne.n	8002904 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe f939 	bl	8000bb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800294e:	b29b      	uxth	r3, r3
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	b29b      	uxth	r3, r3
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8b6 	bl	8002ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800295c:	e099      	b.n	8002a92 <HAL_UART_IRQHandler+0x50e>
 800295e:	bf00      	nop
 8002960:	08002cff 	.word	0x08002cff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800296c:	b29b      	uxth	r3, r3
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 808b 	beq.w	8002a96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8086 	beq.w	8002a96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029ae:	647a      	str	r2, [r7, #68]	; 0x44
 80029b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e3      	bne.n	800298a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3314      	adds	r3, #20
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	623b      	str	r3, [r7, #32]
   return(result);
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029e6:	633a      	str	r2, [r7, #48]	; 0x30
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e3      	bne.n	80029c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0310 	bic.w	r3, r3, #16
 8002a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a2c:	61fa      	str	r2, [r7, #28]
 8002a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	69b9      	ldr	r1, [r7, #24]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	617b      	str	r3, [r7, #20]
   return(result);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e3      	bne.n	8002a08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f83e 	bl	8002ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a4c:	e023      	b.n	8002a96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_UART_IRQHandler+0x4ea>
 8002a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f95d 	bl	8002d26 <UART_Transmit_IT>
    return;
 8002a6c:	e014      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <HAL_UART_IRQHandler+0x514>
 8002a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f99d 	bl	8002dc6 <UART_EndTransmit_IT>
    return;
 8002a8c:	e004      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
    return;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
      return;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
      return;
 8002a96:	bf00      	nop
  }
}
 8002a98:	37e8      	adds	r7, #232	; 0xe8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop

08002aa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b090      	sub	sp, #64	; 0x40
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af0:	e050      	b.n	8002b94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af8:	d04c      	beq.n	8002b94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b00:	f7fd ff6c 	bl	80009dc <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d241      	bcs.n	8002b94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	e853 3f00 	ldrex	r3, [r3]
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b30:	637a      	str	r2, [r7, #52]	; 0x34
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b38:	e841 2300 	strex	r3, r2, [r1]
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e5      	bne.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3314      	adds	r3, #20
 8002b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	e853 3f00 	ldrex	r3, [r3]
 8002b52:	613b      	str	r3, [r7, #16]
   return(result);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3314      	adds	r3, #20
 8002b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b64:	623a      	str	r2, [r7, #32]
 8002b66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b68:	69f9      	ldr	r1, [r7, #28]
 8002b6a:	6a3a      	ldr	r2, [r7, #32]
 8002b6c:	e841 2300 	strex	r3, r2, [r1]
 8002b70:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e5      	bne.n	8002b44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e00f      	b.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d09f      	beq.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3740      	adds	r7, #64	; 0x40
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2222      	movs	r2, #34	; 0x22
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0201 	orr.w	r2, r2, #1
 8002c18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0220 	orr.w	r2, r2, #32
 8002c28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b095      	sub	sp, #84	; 0x54
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c60:	643a      	str	r2, [r7, #64]	; 0x40
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e5      	bne.n	8002c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3314      	adds	r3, #20
 8002c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9c:	e841 2300 	strex	r3, r2, [r1]
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e5      	bne.n	8002c74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d119      	bne.n	8002ce4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f023 0310 	bic.w	r3, r3, #16
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cd0:	61ba      	str	r2, [r7, #24]
 8002cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6979      	ldr	r1, [r7, #20]
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e5      	bne.n	8002cb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cf2:	bf00      	nop
 8002cf4:	3754      	adds	r7, #84	; 0x54
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff fecb 	bl	8002ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b21      	cmp	r3, #33	; 0x21
 8002d38:	d13e      	bne.n	8002db8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d114      	bne.n	8002d6e <UART_Transmit_IT+0x48>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d110      	bne.n	8002d6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	1c9a      	adds	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	621a      	str	r2, [r3, #32]
 8002d6c:	e008      	b.n	8002d80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	1c59      	adds	r1, r3, #1
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6211      	str	r1, [r2, #32]
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10f      	bne.n	8002db4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fe5a 	bl	8002aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b08c      	sub	sp, #48	; 0x30
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b22      	cmp	r3, #34	; 0x22
 8002e08:	f040 80ab 	bne.w	8002f62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e14:	d117      	bne.n	8002e46 <UART_Receive_IT+0x50>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d113      	bne.n	8002e46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
 8002e44:	e026      	b.n	8002e94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e58:	d007      	beq.n	8002e6a <UART_Receive_IT+0x74>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <UART_Receive_IT+0x82>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e008      	b.n	8002e8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d15a      	bne.n	8002f5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0220 	bic.w	r2, r2, #32
 8002eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d135      	bne.n	8002f54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	613b      	str	r3, [r7, #16]
   return(result);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f023 0310 	bic.w	r3, r3, #16
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	623a      	str	r2, [r7, #32]
 8002f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	69f9      	ldr	r1, [r7, #28]
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e5      	bne.n	8002eee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d10a      	bne.n	8002f46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fdbb 	bl	8002ac8 <HAL_UARTEx_RxEventCallback>
 8002f52:	e002      	b.n	8002f5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fd fce5 	bl	8000924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e002      	b.n	8002f64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3730      	adds	r7, #48	; 0x30
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f70:	b0c0      	sub	sp, #256	; 0x100
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	68d9      	ldr	r1, [r3, #12]
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	ea40 0301 	orr.w	r3, r0, r1
 8002f94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fc4:	f021 010c 	bic.w	r1, r1, #12
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe6:	6999      	ldr	r1, [r3, #24]
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	ea40 0301 	orr.w	r3, r0, r1
 8002ff2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b8f      	ldr	r3, [pc, #572]	; (8003238 <UART_SetConfig+0x2cc>)
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d005      	beq.n	800300c <UART_SetConfig+0xa0>
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b8d      	ldr	r3, [pc, #564]	; (800323c <UART_SetConfig+0x2d0>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d104      	bne.n	8003016 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800300c:	f7fe fec0 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8003010:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003014:	e003      	b.n	800301e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003016:	f7fe fea7 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 800301a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003028:	f040 810c 	bne.w	8003244 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800302c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003030:	2200      	movs	r2, #0
 8003032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003036:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800303a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800303e:	4622      	mov	r2, r4
 8003040:	462b      	mov	r3, r5
 8003042:	1891      	adds	r1, r2, r2
 8003044:	65b9      	str	r1, [r7, #88]	; 0x58
 8003046:	415b      	adcs	r3, r3
 8003048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800304a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800304e:	4621      	mov	r1, r4
 8003050:	eb12 0801 	adds.w	r8, r2, r1
 8003054:	4629      	mov	r1, r5
 8003056:	eb43 0901 	adc.w	r9, r3, r1
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800306a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800306e:	4690      	mov	r8, r2
 8003070:	4699      	mov	r9, r3
 8003072:	4623      	mov	r3, r4
 8003074:	eb18 0303 	adds.w	r3, r8, r3
 8003078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800307c:	462b      	mov	r3, r5
 800307e:	eb49 0303 	adc.w	r3, r9, r3
 8003082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003092:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800309a:	460b      	mov	r3, r1
 800309c:	18db      	adds	r3, r3, r3
 800309e:	653b      	str	r3, [r7, #80]	; 0x50
 80030a0:	4613      	mov	r3, r2
 80030a2:	eb42 0303 	adc.w	r3, r2, r3
 80030a6:	657b      	str	r3, [r7, #84]	; 0x54
 80030a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030b0:	f7fd f8f6 	bl	80002a0 <__aeabi_uldivmod>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <UART_SetConfig+0x2d4>)
 80030ba:	fba3 2302 	umull	r2, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	011c      	lsls	r4, r3, #4
 80030c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030d4:	4642      	mov	r2, r8
 80030d6:	464b      	mov	r3, r9
 80030d8:	1891      	adds	r1, r2, r2
 80030da:	64b9      	str	r1, [r7, #72]	; 0x48
 80030dc:	415b      	adcs	r3, r3
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030e4:	4641      	mov	r1, r8
 80030e6:	eb12 0a01 	adds.w	sl, r2, r1
 80030ea:	4649      	mov	r1, r9
 80030ec:	eb43 0b01 	adc.w	fp, r3, r1
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003104:	4692      	mov	sl, r2
 8003106:	469b      	mov	fp, r3
 8003108:	4643      	mov	r3, r8
 800310a:	eb1a 0303 	adds.w	r3, sl, r3
 800310e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003112:	464b      	mov	r3, r9
 8003114:	eb4b 0303 	adc.w	r3, fp, r3
 8003118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003128:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800312c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003130:	460b      	mov	r3, r1
 8003132:	18db      	adds	r3, r3, r3
 8003134:	643b      	str	r3, [r7, #64]	; 0x40
 8003136:	4613      	mov	r3, r2
 8003138:	eb42 0303 	adc.w	r3, r2, r3
 800313c:	647b      	str	r3, [r7, #68]	; 0x44
 800313e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003142:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003146:	f7fd f8ab 	bl	80002a0 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4611      	mov	r1, r2
 8003150:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <UART_SetConfig+0x2d4>)
 8003152:	fba3 2301 	umull	r2, r3, r3, r1
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2264      	movs	r2, #100	; 0x64
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	1acb      	subs	r3, r1, r3
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <UART_SetConfig+0x2d4>)
 8003168:	fba3 2302 	umull	r2, r3, r3, r2
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003174:	441c      	add	r4, r3
 8003176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003180:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003184:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003188:	4642      	mov	r2, r8
 800318a:	464b      	mov	r3, r9
 800318c:	1891      	adds	r1, r2, r2
 800318e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003190:	415b      	adcs	r3, r3
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003198:	4641      	mov	r1, r8
 800319a:	1851      	adds	r1, r2, r1
 800319c:	6339      	str	r1, [r7, #48]	; 0x30
 800319e:	4649      	mov	r1, r9
 80031a0:	414b      	adcs	r3, r1
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031b0:	4659      	mov	r1, fp
 80031b2:	00cb      	lsls	r3, r1, #3
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ba:	4651      	mov	r1, sl
 80031bc:	00ca      	lsls	r2, r1, #3
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	4642      	mov	r2, r8
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031cc:	464b      	mov	r3, r9
 80031ce:	460a      	mov	r2, r1
 80031d0:	eb42 0303 	adc.w	r3, r2, r3
 80031d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031ec:	460b      	mov	r3, r1
 80031ee:	18db      	adds	r3, r3, r3
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f2:	4613      	mov	r3, r2
 80031f4:	eb42 0303 	adc.w	r3, r2, r3
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003202:	f7fd f84d 	bl	80002a0 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <UART_SetConfig+0x2d4>)
 800320c:	fba3 1302 	umull	r1, r3, r3, r2
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	2164      	movs	r1, #100	; 0x64
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	3332      	adds	r3, #50	; 0x32
 800321e:	4a08      	ldr	r2, [pc, #32]	; (8003240 <UART_SetConfig+0x2d4>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	f003 0207 	and.w	r2, r3, #7
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4422      	add	r2, r4
 8003232:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003234:	e105      	b.n	8003442 <UART_SetConfig+0x4d6>
 8003236:	bf00      	nop
 8003238:	40011000 	.word	0x40011000
 800323c:	40011400 	.word	0x40011400
 8003240:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800324e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003252:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003256:	4642      	mov	r2, r8
 8003258:	464b      	mov	r3, r9
 800325a:	1891      	adds	r1, r2, r2
 800325c:	6239      	str	r1, [r7, #32]
 800325e:	415b      	adcs	r3, r3
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003266:	4641      	mov	r1, r8
 8003268:	1854      	adds	r4, r2, r1
 800326a:	4649      	mov	r1, r9
 800326c:	eb43 0501 	adc.w	r5, r3, r1
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	00eb      	lsls	r3, r5, #3
 800327a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800327e:	00e2      	lsls	r2, r4, #3
 8003280:	4614      	mov	r4, r2
 8003282:	461d      	mov	r5, r3
 8003284:	4643      	mov	r3, r8
 8003286:	18e3      	adds	r3, r4, r3
 8003288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800328c:	464b      	mov	r3, r9
 800328e:	eb45 0303 	adc.w	r3, r5, r3
 8003292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032b2:	4629      	mov	r1, r5
 80032b4:	008b      	lsls	r3, r1, #2
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032bc:	4621      	mov	r1, r4
 80032be:	008a      	lsls	r2, r1, #2
 80032c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032c4:	f7fc ffec 	bl	80002a0 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4b60      	ldr	r3, [pc, #384]	; (8003450 <UART_SetConfig+0x4e4>)
 80032ce:	fba3 2302 	umull	r2, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	011c      	lsls	r4, r3, #4
 80032d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032e8:	4642      	mov	r2, r8
 80032ea:	464b      	mov	r3, r9
 80032ec:	1891      	adds	r1, r2, r2
 80032ee:	61b9      	str	r1, [r7, #24]
 80032f0:	415b      	adcs	r3, r3
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f8:	4641      	mov	r1, r8
 80032fa:	1851      	adds	r1, r2, r1
 80032fc:	6139      	str	r1, [r7, #16]
 80032fe:	4649      	mov	r1, r9
 8003300:	414b      	adcs	r3, r1
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003310:	4659      	mov	r1, fp
 8003312:	00cb      	lsls	r3, r1, #3
 8003314:	4651      	mov	r1, sl
 8003316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331a:	4651      	mov	r1, sl
 800331c:	00ca      	lsls	r2, r1, #3
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	4603      	mov	r3, r0
 8003324:	4642      	mov	r2, r8
 8003326:	189b      	adds	r3, r3, r2
 8003328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800332c:	464b      	mov	r3, r9
 800332e:	460a      	mov	r2, r1
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	67bb      	str	r3, [r7, #120]	; 0x78
 8003342:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003350:	4649      	mov	r1, r9
 8003352:	008b      	lsls	r3, r1, #2
 8003354:	4641      	mov	r1, r8
 8003356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800335a:	4641      	mov	r1, r8
 800335c:	008a      	lsls	r2, r1, #2
 800335e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003362:	f7fc ff9d 	bl	80002a0 <__aeabi_uldivmod>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <UART_SetConfig+0x4e4>)
 800336c:	fba3 1302 	umull	r1, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	3332      	adds	r3, #50	; 0x32
 800337e:	4a34      	ldr	r2, [pc, #208]	; (8003450 <UART_SetConfig+0x4e4>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338a:	441c      	add	r4, r3
 800338c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003390:	2200      	movs	r2, #0
 8003392:	673b      	str	r3, [r7, #112]	; 0x70
 8003394:	677a      	str	r2, [r7, #116]	; 0x74
 8003396:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800339a:	4642      	mov	r2, r8
 800339c:	464b      	mov	r3, r9
 800339e:	1891      	adds	r1, r2, r2
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	415b      	adcs	r3, r3
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033aa:	4641      	mov	r1, r8
 80033ac:	1851      	adds	r1, r2, r1
 80033ae:	6039      	str	r1, [r7, #0]
 80033b0:	4649      	mov	r1, r9
 80033b2:	414b      	adcs	r3, r1
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033c2:	4659      	mov	r1, fp
 80033c4:	00cb      	lsls	r3, r1, #3
 80033c6:	4651      	mov	r1, sl
 80033c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033cc:	4651      	mov	r1, sl
 80033ce:	00ca      	lsls	r2, r1, #3
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	4603      	mov	r3, r0
 80033d6:	4642      	mov	r2, r8
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	66bb      	str	r3, [r7, #104]	; 0x68
 80033dc:	464b      	mov	r3, r9
 80033de:	460a      	mov	r2, r1
 80033e0:	eb42 0303 	adc.w	r3, r2, r3
 80033e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	663b      	str	r3, [r7, #96]	; 0x60
 80033f0:	667a      	str	r2, [r7, #100]	; 0x64
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033fe:	4649      	mov	r1, r9
 8003400:	008b      	lsls	r3, r1, #2
 8003402:	4641      	mov	r1, r8
 8003404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003408:	4641      	mov	r1, r8
 800340a:	008a      	lsls	r2, r1, #2
 800340c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003410:	f7fc ff46 	bl	80002a0 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <UART_SetConfig+0x4e4>)
 800341a:	fba3 1302 	umull	r1, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2164      	movs	r1, #100	; 0x64
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	3332      	adds	r3, #50	; 0x32
 800342c:	4a08      	ldr	r2, [pc, #32]	; (8003450 <UART_SetConfig+0x4e4>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4422      	add	r2, r4
 8003440:	609a      	str	r2, [r3, #8]
}
 8003442:	bf00      	nop
 8003444:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	51eb851f 	.word	0x51eb851f

08003454 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f103 0208 	add.w	r2, r3, #8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f103 0208 	add.w	r2, r3, #8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f103 0208 	add.w	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c4:	d103      	bne.n	80034ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e00c      	b.n	80034e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3308      	adds	r3, #8
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e002      	b.n	80034dc <vListInsert+0x2e>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d2f6      	bcs.n	80034d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	601a      	str	r2, [r3, #0]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6892      	ldr	r2, [r2, #8]
 8003536:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6852      	ldr	r2, [r2, #4]
 8003540:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d103      	bne.n	8003554 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800357e:	2301      	movs	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d052      	beq.n	800364e <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d04e      	beq.n	800364e <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	2100      	movs	r1, #0
 80035ba:	fba3 2302 	umull	r2, r3, r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d000      	beq.n	80035c4 <xQueueGenericReset+0x50>
 80035c2:	2101      	movs	r1, #1
 80035c4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d141      	bne.n	800364e <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80035ca:	f001 fd7d 	bl	80050c8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	6939      	ldr	r1, [r7, #16]
 80035d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	441a      	add	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2200      	movs	r2, #0
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6939      	ldr	r1, [r7, #16]
 80035fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	441a      	add	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	22ff      	movs	r2, #255	; 0xff
 800360e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00f      	beq.n	8003648 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	3310      	adds	r3, #16
 800362c:	4618      	mov	r0, r3
 800362e:	f000 feed 	bl	800440c <xTaskRemoveFromEventList>
 8003632:	e009      	b.n	8003648 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3310      	adds	r3, #16
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff0b 	bl	8003454 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	3324      	adds	r3, #36	; 0x24
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff06 	bl	8003454 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003648:	f001 fd6e 	bl	8005128 <vPortExitCritical>
 800364c:	e001      	b.n	8003652 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueGenericReset+0xfa>
        __asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	60bb      	str	r3, [r7, #8]
    }
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800366e:	697b      	ldr	r3, [r7, #20]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02e      	beq.n	80036ee <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003690:	2100      	movs	r1, #0
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	fba3 2302 	umull	r2, r3, r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d000      	beq.n	80036a0 <xQueueGenericCreate+0x28>
 800369e:	2101      	movs	r1, #1
 80036a0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d123      	bne.n	80036ee <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80036ae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80036b2:	d81c      	bhi.n	80036ee <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3350      	adds	r3, #80	; 0x50
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fde2 	bl	800528c <pvPortMalloc>
 80036c8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01c      	beq.n	800370a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3350      	adds	r3, #80	; 0x50
 80036d8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036da:	79fa      	ldrb	r2, [r7, #7]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f814 	bl	8003714 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80036ec:	e00d      	b.n	800370a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <xQueueGenericCreate+0x92>
        __asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	613b      	str	r3, [r7, #16]
    }
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800370a:	69fb      	ldr	r3, [r7, #28]
    }
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e002      	b.n	8003736 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003742:	2101      	movs	r1, #1
 8003744:	69b8      	ldr	r0, [r7, #24]
 8003746:	f7ff ff15 	bl	8003574 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	; 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <xQueueReceive+0x30>
        __asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	623b      	str	r3, [r7, #32]
    }
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <xQueueReceive+0x3e>
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <xQueueReceive+0x42>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <xQueueReceive+0x44>
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <xQueueReceive+0x5e>
        __asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61fb      	str	r3, [r7, #28]
    }
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ba:	f001 f831 	bl	8004820 <xTaskGetSchedulerState>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <xQueueReceive+0x6e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <xQueueReceive+0x72>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <xQueueReceive+0x74>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <xQueueReceive+0x8e>
        __asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	61bb      	str	r3, [r7, #24]
    }
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80037ea:	f001 fc6d 	bl	80050c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d014      	beq.n	8003824 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037fe:	f000 f881 	bl	8003904 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	1e5a      	subs	r2, r3, #1
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	3310      	adds	r3, #16
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fdf8 	bl	800440c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800381c:	f001 fc84 	bl	8005128 <vPortExitCritical>
                return pdPASS;
 8003820:	2301      	movs	r3, #1
 8003822:	e069      	b.n	80038f8 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800382a:	f001 fc7d 	bl	8005128 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800382e:	2300      	movs	r3, #0
 8003830:	e062      	b.n	80038f8 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003838:	f107 0310 	add.w	r3, r7, #16
 800383c:	4618      	mov	r0, r3
 800383e:	f000 febb 	bl	80045b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003842:	2301      	movs	r3, #1
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003846:	f001 fc6f 	bl	8005128 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800384a:	f000 fb19 	bl	8003e80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800384e:	f001 fc3b 	bl	80050c8 <vPortEnterCritical>
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003858:	b25b      	sxtb	r3, r3
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800385e:	d103      	bne.n	8003868 <xQueueReceive+0x10c>
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800386e:	b25b      	sxtb	r3, r3
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003874:	d103      	bne.n	800387e <xQueueReceive+0x122>
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800387e:	f001 fc53 	bl	8005128 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003882:	1d3a      	adds	r2, r7, #4
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f000 feaa 	bl	80045e4 <xTaskCheckForTimeOut>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d123      	bne.n	80038de <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003898:	f000 f8ac 	bl	80039f4 <prvIsQueueEmpty>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d017      	beq.n	80038d2 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	3324      	adds	r3, #36	; 0x24
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fd44 	bl	8004338 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80038b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b2:	f000 f84d 	bl	8003950 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80038b6:	f000 faf1 	bl	8003e9c <xTaskResumeAll>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d194      	bne.n	80037ea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <xQueueReceive+0x1a4>)
 80038c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	e78b      	b.n	80037ea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80038d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d4:	f000 f83c 	bl	8003950 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80038d8:	f000 fae0 	bl	8003e9c <xTaskResumeAll>
 80038dc:	e785      	b.n	80037ea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80038de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e0:	f000 f836 	bl	8003950 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80038e4:	f000 fada 	bl	8003e9c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ea:	f000 f883 	bl	80039f4 <prvIsQueueEmpty>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f43f af7a 	beq.w	80037ea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80038f6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3730      	adds	r7, #48	; 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d018      	beq.n	8003948 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	441a      	add	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	d303      	bcc.n	8003938 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68d9      	ldr	r1, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	461a      	mov	r2, r3
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	f002 fa08 	bl	8005d58 <memcpy>
    }
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003958:	f001 fbb6 	bl	80050c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003962:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003964:	e011      	b.n	800398a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3324      	adds	r3, #36	; 0x24
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd4a 	bl	800440c <xTaskRemoveFromEventList>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800397e:	f000 fe97 	bl	80046b0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	3b01      	subs	r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800398a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	dce9      	bgt.n	8003966 <prvUnlockQueue+0x16>
 8003992:	e000      	b.n	8003996 <prvUnlockQueue+0x46>
                    break;
 8003994:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	22ff      	movs	r2, #255	; 0xff
 800399a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800399e:	f001 fbc3 	bl	8005128 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80039a2:	f001 fb91 	bl	80050c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80039ae:	e011      	b.n	80039d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d012      	beq.n	80039de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3310      	adds	r3, #16
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fd25 	bl	800440c <xTaskRemoveFromEventList>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80039c8:	f000 fe72 	bl	80046b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80039cc:	7bbb      	ldrb	r3, [r7, #14]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80039d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dce9      	bgt.n	80039b0 <prvUnlockQueue+0x60>
 80039dc:	e000      	b.n	80039e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80039de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80039e8:	f001 fb9e 	bl	8005128 <vPortExitCritical>
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80039fc:	f001 fb64 	bl	80050c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e001      	b.n	8003a12 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003a12:	f001 fb89 	bl	8005128 <vPortExitCritical>

    return xReturn;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	60fb      	str	r3, [r7, #12]
    }
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d024      	beq.n	8003a9a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e01e      	b.n	8003a94 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <vQueueAddToRegistry+0x98>)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d105      	bne.n	8003a72 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <vQueueAddToRegistry+0x98>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
                    break;
 8003a70:	e013      	b.n	8003a9a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <vQueueAddToRegistry+0x6e>
 8003a78:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <vQueueAddToRegistry+0x98>)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <vQueueAddToRegistry+0x98>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b07      	cmp	r3, #7
 8003a98:	d9dd      	bls.n	8003a56 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	20000180 	.word	0x20000180

08003abc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003acc:	f001 fafc 	bl	80050c8 <vPortEnterCritical>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad6:	b25b      	sxtb	r3, r3
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003adc:	d103      	bne.n	8003ae6 <vQueueWaitForMessageRestricted+0x2a>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aec:	b25b      	sxtb	r3, r3
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af2:	d103      	bne.n	8003afc <vQueueWaitForMessageRestricted+0x40>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003afc:	f001 fb14 	bl	8005128 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3324      	adds	r3, #36	; 0x24
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fc35 	bl	8004380 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff ff1a 	bl	8003950 <prvUnlockQueue>
    }
 8003b1c:	bf00      	nop
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af04      	add	r7, sp, #16
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fba7 	bl	800528c <pvPortMalloc>
 8003b3e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b46:	2058      	movs	r0, #88	; 0x58
 8003b48:	f001 fba0 	bl	800528c <pvPortMalloc>
 8003b4c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003b54:	2258      	movs	r2, #88	; 0x58
 8003b56:	2100      	movs	r1, #0
 8003b58:	69f8      	ldr	r0, [r7, #28]
 8003b5a:	f002 f90b 	bl	8005d74 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
 8003b64:	e005      	b.n	8003b72 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f001 fc4a 	bl	8005400 <vPortFree>
 8003b6c:	e001      	b.n	8003b72 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b78:	88fa      	ldrh	r2, [r7, #6]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9303      	str	r3, [sp, #12]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	9302      	str	r3, [sp, #8]
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f80e 	bl	8003bb0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003b94:	69f8      	ldr	r0, [r7, #28]
 8003b96:	f000 f899 	bl	8003ccc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e002      	b.n	8003ba6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
    }
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	21a5      	movs	r1, #165	; 0xa5
 8003bca:	f002 f8d3 	bl	8005d74 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	617b      	str	r3, [r7, #20]
    }
 8003c04:	bf00      	nop
 8003c06:	e7fe      	b.n	8003c06 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01e      	beq.n	8003c4c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e012      	b.n	8003c3a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	7819      	ldrb	r1, [r3, #0]
 8003c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	3334      	adds	r3, #52	; 0x34
 8003c24:	460a      	mov	r2, r1
 8003c26:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3301      	adds	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b09      	cmp	r3, #9
 8003c3e:	d9e9      	bls.n	8003c14 <prvInitialiseNewTask+0x64>
 8003c40:	e000      	b.n	8003c44 <prvInitialiseNewTask+0x94>
            {
                break;
 8003c42:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d90a      	bls.n	8003c68 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	613b      	str	r3, [r7, #16]
    }
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d901      	bls.n	8003c72 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c6e:	2304      	movs	r3, #4
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	3304      	adds	r3, #4
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fc06 	bl	8003494 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fc01 	bl	8003494 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	f1c3 0205 	rsb	r2, r3, #5
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	69b8      	ldr	r0, [r7, #24]
 8003cae:	f001 f8d9 	bl	8004e64 <pxPortInitialiseStack>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003cc4:	bf00      	nop
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003cd4:	f001 f9f8 	bl	80050c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	; (8003dc4 <prvAddNewTaskToReadyList+0xf8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	4a39      	ldr	r2, [pc, #228]	; (8003dc4 <prvAddNewTaskToReadyList+0xf8>)
 8003ce0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <prvAddNewTaskToReadyList+0xfc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003cea:	4a37      	ldr	r2, [pc, #220]	; (8003dc8 <prvAddNewTaskToReadyList+0xfc>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cf0:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <prvAddNewTaskToReadyList+0xf8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d110      	bne.n	8003d1a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003cf8:	f000 fcf8 	bl	80046ec <prvInitialiseTaskLists>
 8003cfc:	e00d      	b.n	8003d1a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003cfe:	4b33      	ldr	r3, [pc, #204]	; (8003dcc <prvAddNewTaskToReadyList+0x100>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <prvAddNewTaskToReadyList+0xfc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d802      	bhi.n	8003d1a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <prvAddNewTaskToReadyList+0xfc>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <prvAddNewTaskToReadyList+0x104>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <prvAddNewTaskToReadyList+0x104>)
 8003d22:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <prvAddNewTaskToReadyList+0x104>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	2201      	movs	r2, #1
 8003d32:	409a      	lsls	r2, r3
 8003d34:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <prvAddNewTaskToReadyList+0x108>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <prvAddNewTaskToReadyList+0x108>)
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	4925      	ldr	r1, [pc, #148]	; (8003dd8 <prvAddNewTaskToReadyList+0x10c>)
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3304      	adds	r3, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	3204      	adds	r2, #4
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <prvAddNewTaskToReadyList+0x10c>)
 8003d82:	441a      	add	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	615a      	str	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4912      	ldr	r1, [pc, #72]	; (8003dd8 <prvAddNewTaskToReadyList+0x10c>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	480e      	ldr	r0, [pc, #56]	; (8003dd8 <prvAddNewTaskToReadyList+0x10c>)
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4403      	add	r3, r0
 8003da8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003daa:	f001 f9bd 	bl	8005128 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <prvAddNewTaskToReadyList+0x100>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <prvAddNewTaskToReadyList+0xfc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000298 	.word	0x20000298
 8003dc8:	200001c0 	.word	0x200001c0
 8003dcc:	200002a4 	.word	0x200002a4
 8003dd0:	200002b4 	.word	0x200002b4
 8003dd4:	200002a0 	.word	0x200002a0
 8003dd8:	200001c4 	.word	0x200001c4

08003ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <vTaskStartScheduler+0x88>)
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	2300      	movs	r3, #0
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2300      	movs	r3, #0
 8003dec:	2282      	movs	r2, #130	; 0x82
 8003dee:	491e      	ldr	r1, [pc, #120]	; (8003e68 <vTaskStartScheduler+0x8c>)
 8003df0:	481e      	ldr	r0, [pc, #120]	; (8003e6c <vTaskStartScheduler+0x90>)
 8003df2:	f7ff fe97 	bl	8003b24 <xTaskCreate>
 8003df6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003dfe:	f000 fdad 	bl	800495c <xTimerCreateTimerTask>
 8003e02:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d116      	bne.n	8003e38 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	60bb      	str	r3, [r7, #8]
    }
 8003e1c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <vTaskStartScheduler+0x94>)
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e24:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <vTaskStartScheduler+0x98>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <vTaskStartScheduler+0x9c>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003e32:	f001 f8a7 	bl	8004f84 <xPortStartScheduler>
 8003e36:	e00e      	b.n	8003e56 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e3e:	d10a      	bne.n	8003e56 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	607b      	str	r3, [r7, #4]
    }
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <vTaskStartScheduler+0xa0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200002bc 	.word	0x200002bc
 8003e68:	08006e8c 	.word	0x08006e8c
 8003e6c:	080046c9 	.word	0x080046c9
 8003e70:	200002b8 	.word	0x200002b8
 8003e74:	200002a4 	.word	0x200002a4
 8003e78:	2000029c 	.word	0x2000029c
 8003e7c:	20000008 	.word	0x20000008

08003e80 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <vTaskSuspendAll+0x18>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <vTaskSuspendAll+0x18>)
 8003e8c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	200002c0 	.word	0x200002c0

08003e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003eaa:	4b6b      	ldr	r3, [pc, #428]	; (8004058 <xTaskResumeAll+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <xTaskResumeAll+0x2c>
        __asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	607b      	str	r3, [r7, #4]
    }
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ec8:	f001 f8fe 	bl	80050c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ecc:	4b62      	ldr	r3, [pc, #392]	; (8004058 <xTaskResumeAll+0x1bc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	4a61      	ldr	r2, [pc, #388]	; (8004058 <xTaskResumeAll+0x1bc>)
 8003ed4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed6:	4b60      	ldr	r3, [pc, #384]	; (8004058 <xTaskResumeAll+0x1bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 80b4 	bne.w	8004048 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ee0:	4b5e      	ldr	r3, [pc, #376]	; (800405c <xTaskResumeAll+0x1c0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80af 	beq.w	8004048 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eea:	e08a      	b.n	8004002 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eec:	4b5c      	ldr	r3, [pc, #368]	; (8004060 <xTaskResumeAll+0x1c4>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	6a12      	ldr	r2, [r2, #32]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	69d2      	ldr	r2, [r2, #28]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3318      	adds	r3, #24
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d103      	bne.n	8003f22 <xTaskResumeAll+0x86>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	2200      	movs	r2, #0
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	68d2      	ldr	r2, [r2, #12]
 8003f40:	609a      	str	r2, [r3, #8]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	6892      	ldr	r2, [r2, #8]
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3304      	adds	r3, #4
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d103      	bne.n	8003f60 <xTaskResumeAll+0xc4>
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2200      	movs	r2, #0
 8003f64:	615a      	str	r2, [r3, #20]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	1e5a      	subs	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	2201      	movs	r2, #1
 8003f76:	409a      	lsls	r2, r3
 8003f78:	4b3a      	ldr	r3, [pc, #232]	; (8004064 <xTaskResumeAll+0x1c8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	4a39      	ldr	r2, [pc, #228]	; (8004064 <xTaskResumeAll+0x1c8>)
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f86:	4938      	ldr	r1, [pc, #224]	; (8004068 <xTaskResumeAll+0x1cc>)
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3304      	adds	r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	3204      	adds	r2, #4
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	1d1a      	adds	r2, r3, #4
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4a28      	ldr	r2, [pc, #160]	; (8004068 <xTaskResumeAll+0x1cc>)
 8003fc6:	441a      	add	r2, r3
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	615a      	str	r2, [r3, #20]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	4925      	ldr	r1, [pc, #148]	; (8004068 <xTaskResumeAll+0x1cc>)
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	4821      	ldr	r0, [pc, #132]	; (8004068 <xTaskResumeAll+0x1cc>)
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4403      	add	r3, r0
 8003fec:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	; (800406c <xTaskResumeAll+0x1d0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <xTaskResumeAll+0x1d4>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <xTaskResumeAll+0x1c4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f47f af70 	bne.w	8003eec <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004012:	f000 fbe9 	bl	80047e8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004016:	4b17      	ldr	r3, [pc, #92]	; (8004074 <xTaskResumeAll+0x1d8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d010      	beq.n	8004044 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004022:	f000 f839 	bl	8004098 <xTaskIncrementTick>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <xTaskResumeAll+0x1d4>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3b01      	subs	r3, #1
 8004036:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f1      	bne.n	8004022 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <xTaskResumeAll+0x1d8>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <xTaskResumeAll+0x1d4>)
 8004046:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004048:	f001 f86e 	bl	8005128 <vPortExitCritical>

    return xAlreadyYielded;
 800404c:	697b      	ldr	r3, [r7, #20]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200002c0 	.word	0x200002c0
 800405c:	20000298 	.word	0x20000298
 8004060:	20000258 	.word	0x20000258
 8004064:	200002a0 	.word	0x200002a0
 8004068:	200001c4 	.word	0x200001c4
 800406c:	200001c0 	.word	0x200001c0
 8004070:	200002ac 	.word	0x200002ac
 8004074:	200002a8 	.word	0x200002a8

08004078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <xTaskGetTickCount+0x1c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004084:	687b      	ldr	r3, [r7, #4]
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000029c 	.word	0x2000029c

08004098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040a2:	4b6e      	ldr	r3, [pc, #440]	; (800425c <xTaskIncrementTick+0x1c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 80cd 	bne.w	8004246 <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040ac:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <xTaskIncrementTick+0x1c8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80040b4:	4a6a      	ldr	r2, [pc, #424]	; (8004260 <xTaskIncrementTick+0x1c8>)
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d120      	bne.n	8004102 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80040c0:	4b68      	ldr	r3, [pc, #416]	; (8004264 <xTaskIncrementTick+0x1cc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <xTaskIncrementTick+0x48>
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	607b      	str	r3, [r7, #4]
    }
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <xTaskIncrementTick+0x46>
 80040e0:	4b60      	ldr	r3, [pc, #384]	; (8004264 <xTaskIncrementTick+0x1cc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	4b60      	ldr	r3, [pc, #384]	; (8004268 <xTaskIncrementTick+0x1d0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5e      	ldr	r2, [pc, #376]	; (8004264 <xTaskIncrementTick+0x1cc>)
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4a5e      	ldr	r2, [pc, #376]	; (8004268 <xTaskIncrementTick+0x1d0>)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b5d      	ldr	r3, [pc, #372]	; (800426c <xTaskIncrementTick+0x1d4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a5c      	ldr	r2, [pc, #368]	; (800426c <xTaskIncrementTick+0x1d4>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	f000 fb73 	bl	80047e8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004102:	4b5b      	ldr	r3, [pc, #364]	; (8004270 <xTaskIncrementTick+0x1d8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a3a      	ldr	r2, [r7, #32]
 8004108:	429a      	cmp	r2, r3
 800410a:	f0c0 80a1 	bcc.w	8004250 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410e:	4b55      	ldr	r3, [pc, #340]	; (8004264 <xTaskIncrementTick+0x1cc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	4b55      	ldr	r3, [pc, #340]	; (8004270 <xTaskIncrementTick+0x1d8>)
 800411a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800411e:	601a      	str	r2, [r3, #0]
                    break;
 8004120:	e096      	b.n	8004250 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004122:	4b50      	ldr	r3, [pc, #320]	; (8004264 <xTaskIncrementTick+0x1cc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004132:	6a3a      	ldr	r2, [r7, #32]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	429a      	cmp	r2, r3
 8004138:	d203      	bcs.n	8004142 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800413a:	4a4d      	ldr	r2, [pc, #308]	; (8004270 <xTaskIncrementTick+0x1d8>)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004140:	e086      	b.n	8004250 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	68d2      	ldr	r2, [r2, #12]
 8004150:	609a      	str	r2, [r3, #8]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	6892      	ldr	r2, [r2, #8]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	3304      	adds	r3, #4
 8004164:	429a      	cmp	r2, r3
 8004166:	d103      	bne.n	8004170 <xTaskIncrementTick+0xd8>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2200      	movs	r2, #0
 8004174:	615a      	str	r2, [r3, #20]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1e5a      	subs	r2, r3, #1
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01e      	beq.n	80041c6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	6a12      	ldr	r2, [r2, #32]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	69d2      	ldr	r2, [r2, #28]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3318      	adds	r3, #24
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d103      	bne.n	80041b6 <xTaskIncrementTick+0x11e>
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2200      	movs	r2, #0
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	1e5a      	subs	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	2201      	movs	r2, #1
 80041cc:	409a      	lsls	r2, r3
 80041ce:	4b29      	ldr	r3, [pc, #164]	; (8004274 <xTaskIncrementTick+0x1dc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	4a27      	ldr	r2, [pc, #156]	; (8004274 <xTaskIncrementTick+0x1dc>)
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041dc:	4926      	ldr	r1, [pc, #152]	; (8004278 <xTaskIncrementTick+0x1e0>)
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	3304      	adds	r3, #4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	3204      	adds	r2, #4
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	1d1a      	adds	r2, r3, #4
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <xTaskIncrementTick+0x1e0>)
 800421c:	441a      	add	r2, r3
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	615a      	str	r2, [r3, #20]
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	4914      	ldr	r1, [pc, #80]	; (8004278 <xTaskIncrementTick+0x1e0>)
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	1c59      	adds	r1, r3, #1
 8004236:	4810      	ldr	r0, [pc, #64]	; (8004278 <xTaskIncrementTick+0x1e0>)
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4403      	add	r3, r0
 8004242:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004244:	e763      	b.n	800410e <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <xTaskIncrementTick+0x1e4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	4a0b      	ldr	r2, [pc, #44]	; (800427c <xTaskIncrementTick+0x1e4>)
 800424e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004252:	4618      	mov	r0, r3
 8004254:	3728      	adds	r7, #40	; 0x28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200002c0 	.word	0x200002c0
 8004260:	2000029c 	.word	0x2000029c
 8004264:	20000250 	.word	0x20000250
 8004268:	20000254 	.word	0x20000254
 800426c:	200002b0 	.word	0x200002b0
 8004270:	200002b8 	.word	0x200002b8
 8004274:	200002a0 	.word	0x200002a0
 8004278:	200001c4 	.word	0x200001c4
 800427c:	200002a8 	.word	0x200002a8

08004280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004286:	4b27      	ldr	r3, [pc, #156]	; (8004324 <vTaskSwitchContext+0xa4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <vTaskSwitchContext+0xa8>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004294:	e03f      	b.n	8004316 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004296:	4b24      	ldr	r3, [pc, #144]	; (8004328 <vTaskSwitchContext+0xa8>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800429c:	4b23      	ldr	r3, [pc, #140]	; (800432c <vTaskSwitchContext+0xac>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	fab3 f383 	clz	r3, r3
 80042a8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80042aa:	7afb      	ldrb	r3, [r7, #11]
 80042ac:	f1c3 031f 	rsb	r3, r3, #31
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	491f      	ldr	r1, [pc, #124]	; (8004330 <vTaskSwitchContext+0xb0>)
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <vTaskSwitchContext+0x5c>
        __asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	607b      	str	r3, [r7, #4]
    }
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <vTaskSwitchContext+0x5a>
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <vTaskSwitchContext+0xb0>)
 80042e8:	4413      	add	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3308      	adds	r3, #8
 80042fe:	429a      	cmp	r2, r3
 8004300:	d104      	bne.n	800430c <vTaskSwitchContext+0x8c>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <vTaskSwitchContext+0xb4>)
 8004314:	6013      	str	r3, [r2, #0]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	200002c0 	.word	0x200002c0
 8004328:	200002ac 	.word	0x200002ac
 800432c:	200002a0 	.word	0x200002a0
 8004330:	200001c4 	.word	0x200001c4
 8004334:	200001c0 	.word	0x200001c0

08004338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
    }
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <vTaskPlaceOnEventList+0x44>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3318      	adds	r3, #24
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff f8a1 	bl	80034ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800436c:	2101      	movs	r1, #1
 800436e:	6838      	ldr	r0, [r7, #0]
 8004370:	f000 fa74 	bl	800485c <prvAddCurrentTaskToDelayedList>
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	200001c0 	.word	0x200001c0

08004380 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	613b      	str	r3, [r7, #16]
    }
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <vTaskPlaceOnEventListRestricted+0x88>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	61da      	str	r2, [r3, #28]
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <vTaskPlaceOnEventListRestricted+0x88>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	6892      	ldr	r2, [r2, #8]
 80043be:	621a      	str	r2, [r3, #32]
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <vTaskPlaceOnEventListRestricted+0x88>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	3218      	adds	r2, #24
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <vTaskPlaceOnEventListRestricted+0x88>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f103 0218 	add.w	r2, r3, #24
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <vTaskPlaceOnEventListRestricted+0x88>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	68b8      	ldr	r0, [r7, #8]
 80043fa:	f000 fa2f 	bl	800485c <prvAddCurrentTaskToDelayedList>
    }
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200001c0 	.word	0x200001c0

0800440c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800440c:	b480      	push	{r7}
 800440e:	b08b      	sub	sp, #44	; 0x2c
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60fb      	str	r3, [r7, #12]
    }
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	6a3a      	ldr	r2, [r7, #32]
 8004444:	6a12      	ldr	r2, [r2, #32]
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	6a3a      	ldr	r2, [r7, #32]
 800444e:	69d2      	ldr	r2, [r2, #28]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	3318      	adds	r3, #24
 800445a:	429a      	cmp	r2, r3
 800445c:	d103      	bne.n	8004466 <xTaskRemoveFromEventList+0x5a>
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	6a1a      	ldr	r2, [r3, #32]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2200      	movs	r2, #0
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <xTaskRemoveFromEventList+0x194>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d15e      	bne.n	800453c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	68d2      	ldr	r2, [r2, #12]
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	6892      	ldr	r2, [r2, #8]
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	3304      	adds	r3, #4
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d103      	bne.n	80044ac <xTaskRemoveFromEventList+0xa0>
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2200      	movs	r2, #0
 80044b0:	615a      	str	r2, [r3, #20]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	1e5a      	subs	r2, r3, #1
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <xTaskRemoveFromEventList+0x198>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <xTaskRemoveFromEventList+0x198>)
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d2:	4935      	ldr	r1, [pc, #212]	; (80045a8 <xTaskRemoveFromEventList+0x19c>)
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3304      	adds	r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	6a3a      	ldr	r2, [r7, #32]
 80044f8:	3204      	adds	r2, #4
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	1d1a      	adds	r2, r3, #4
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <xTaskRemoveFromEventList+0x19c>)
 8004512:	441a      	add	r2, r3
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	615a      	str	r2, [r3, #20]
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	4922      	ldr	r1, [pc, #136]	; (80045a8 <xTaskRemoveFromEventList+0x19c>)
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	481e      	ldr	r0, [pc, #120]	; (80045a8 <xTaskRemoveFromEventList+0x19c>)
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4403      	add	r3, r0
 8004538:	6019      	str	r1, [r3, #0]
 800453a:	e01b      	b.n	8004574 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <xTaskRemoveFromEventList+0x1a0>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	61da      	str	r2, [r3, #28]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	621a      	str	r2, [r3, #32]
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	3218      	adds	r2, #24
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	f103 0218 	add.w	r2, r3, #24
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	4a11      	ldr	r2, [pc, #68]	; (80045ac <xTaskRemoveFromEventList+0x1a0>)
 8004568:	629a      	str	r2, [r3, #40]	; 0x28
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <xTaskRemoveFromEventList+0x1a0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	4a0e      	ldr	r2, [pc, #56]	; (80045ac <xTaskRemoveFromEventList+0x1a0>)
 8004572:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <xTaskRemoveFromEventList+0x1a4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	429a      	cmp	r2, r3
 8004580:	d905      	bls.n	800458e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <xTaskRemoveFromEventList+0x1a8>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e001      	b.n	8004592 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004594:	4618      	mov	r0, r3
 8004596:	372c      	adds	r7, #44	; 0x2c
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	200002c0 	.word	0x200002c0
 80045a4:	200002a0 	.word	0x200002a0
 80045a8:	200001c4 	.word	0x200001c4
 80045ac:	20000258 	.word	0x20000258
 80045b0:	200001c0 	.word	0x200001c0
 80045b4:	200002ac 	.word	0x200002ac

080045b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <vTaskInternalSetTimeOutState+0x24>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <vTaskInternalSetTimeOutState+0x28>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	605a      	str	r2, [r3, #4]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	200002b0 	.word	0x200002b0
 80045e0:	2000029c 	.word	0x2000029c

080045e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	613b      	str	r3, [r7, #16]
    }
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
    }
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004626:	f000 fd4f 	bl	80050c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800462a:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <xTaskCheckForTimeOut+0xc4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004642:	d102      	bne.n	800464a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	e026      	b.n	8004698 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <xTaskCheckForTimeOut+0xc8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d00a      	beq.n	800466c <xTaskCheckForTimeOut+0x88>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	429a      	cmp	r2, r3
 800465e:	d305      	bcc.n	800466c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e015      	b.n	8004698 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	429a      	cmp	r2, r3
 8004674:	d20b      	bcs.n	800468e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	1ad2      	subs	r2, r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ff98 	bl	80045b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e004      	b.n	8004698 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004698:	f000 fd46 	bl	8005128 <vPortExitCritical>

    return xReturn;
 800469c:	69fb      	ldr	r3, [r7, #28]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000029c 	.word	0x2000029c
 80046ac:	200002b0 	.word	0x200002b0

080046b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <vTaskMissedYield+0x14>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	200002ac 	.word	0x200002ac

080046c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80046d0:	f000 f84c 	bl	800476c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <prvIdleTask+0x20>)
 80046d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80046e4:	e7f4      	b.n	80046d0 <prvIdleTask+0x8>
 80046e6:	bf00      	nop
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	e00c      	b.n	8004712 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4a12      	ldr	r2, [pc, #72]	; (800474c <prvInitialiseTaskLists+0x60>)
 8004704:	4413      	add	r3, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fea4 	bl	8003454 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d9ef      	bls.n	80046f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004718:	480d      	ldr	r0, [pc, #52]	; (8004750 <prvInitialiseTaskLists+0x64>)
 800471a:	f7fe fe9b 	bl	8003454 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800471e:	480d      	ldr	r0, [pc, #52]	; (8004754 <prvInitialiseTaskLists+0x68>)
 8004720:	f7fe fe98 	bl	8003454 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004724:	480c      	ldr	r0, [pc, #48]	; (8004758 <prvInitialiseTaskLists+0x6c>)
 8004726:	f7fe fe95 	bl	8003454 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800472a:	480c      	ldr	r0, [pc, #48]	; (800475c <prvInitialiseTaskLists+0x70>)
 800472c:	f7fe fe92 	bl	8003454 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004730:	480b      	ldr	r0, [pc, #44]	; (8004760 <prvInitialiseTaskLists+0x74>)
 8004732:	f7fe fe8f 	bl	8003454 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <prvInitialiseTaskLists+0x78>)
 8004738:	4a05      	ldr	r2, [pc, #20]	; (8004750 <prvInitialiseTaskLists+0x64>)
 800473a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <prvInitialiseTaskLists+0x7c>)
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <prvInitialiseTaskLists+0x68>)
 8004740:	601a      	str	r2, [r3, #0]
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200001c4 	.word	0x200001c4
 8004750:	20000228 	.word	0x20000228
 8004754:	2000023c 	.word	0x2000023c
 8004758:	20000258 	.word	0x20000258
 800475c:	2000026c 	.word	0x2000026c
 8004760:	20000284 	.word	0x20000284
 8004764:	20000250 	.word	0x20000250
 8004768:	20000254 	.word	0x20000254

0800476c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004772:	e019      	b.n	80047a8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004774:	f000 fca8 	bl	80050c8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004778:	4b10      	ldr	r3, [pc, #64]	; (80047bc <prvCheckTasksWaitingTermination+0x50>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fecb 	bl	8003520 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <prvCheckTasksWaitingTermination+0x54>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3b01      	subs	r3, #1
 8004790:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <prvCheckTasksWaitingTermination+0x54>)
 8004792:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <prvCheckTasksWaitingTermination+0x58>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3b01      	subs	r3, #1
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <prvCheckTasksWaitingTermination+0x58>)
 800479c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800479e:	f000 fcc3 	bl	8005128 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f810 	bl	80047c8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <prvCheckTasksWaitingTermination+0x58>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e1      	bne.n	8004774 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	2000026c 	.word	0x2000026c
 80047c0:	20000298 	.word	0x20000298
 80047c4:	20000280 	.word	0x20000280

080047c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fe13 	bl	8005400 <vPortFree>
            vPortFree( pxTCB );
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fe10 	bl	8005400 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <prvResetNextTaskUnblockTime+0x30>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <prvResetNextTaskUnblockTime+0x34>)
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047fc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80047fe:	e005      	b.n	800480c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <prvResetNextTaskUnblockTime+0x30>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a04      	ldr	r2, [pc, #16]	; (800481c <prvResetNextTaskUnblockTime+0x34>)
 800480a:	6013      	str	r3, [r2, #0]
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000250 	.word	0x20000250
 800481c:	200002b8 	.word	0x200002b8

08004820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <xTaskGetSchedulerState+0x34>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800482e:	2301      	movs	r3, #1
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	e008      	b.n	8004846 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <xTaskGetSchedulerState+0x38>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800483c:	2302      	movs	r3, #2
 800483e:	607b      	str	r3, [r7, #4]
 8004840:	e001      	b.n	8004846 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004846:	687b      	ldr	r3, [r7, #4]
    }
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	200002a4 	.word	0x200002a4
 8004858:	200002c0 	.word	0x200002c0

0800485c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004866:	4b36      	ldr	r3, [pc, #216]	; (8004940 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800486c:	4b35      	ldr	r3, [pc, #212]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fe54 	bl	8003520 <uxListRemove>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10b      	bne.n	8004896 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800487e:	4b31      	ldr	r3, [pc, #196]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	2201      	movs	r2, #1
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43da      	mvns	r2, r3
 800488c:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <prvAddCurrentTaskToDelayedList+0xec>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4013      	ands	r3, r2
 8004892:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <prvAddCurrentTaskToDelayedList+0xec>)
 8004894:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800489c:	d124      	bne.n	80048e8 <prvAddCurrentTaskToDelayedList+0x8c>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d021      	beq.n	80048e8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a4:	4b29      	ldr	r3, [pc, #164]	; (800494c <prvAddCurrentTaskToDelayedList+0xf0>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	4b26      	ldr	r3, [pc, #152]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	4b24      	ldr	r3, [pc, #144]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	6892      	ldr	r2, [r2, #8]
 80048ba:	60da      	str	r2, [r3, #12]
 80048bc:	4b21      	ldr	r3, [pc, #132]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	3204      	adds	r2, #4
 80048c6:	605a      	str	r2, [r3, #4]
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1d      	ldr	r2, [pc, #116]	; (800494c <prvAddCurrentTaskToDelayedList+0xf0>)
 80048d8:	615a      	str	r2, [r3, #20]
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <prvAddCurrentTaskToDelayedList+0xf0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	4a1a      	ldr	r2, [pc, #104]	; (800494c <prvAddCurrentTaskToDelayedList+0xf0>)
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80048e6:	e026      	b.n	8004936 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d209      	bcs.n	8004914 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7fe fdce 	bl	80034ae <vListInsert>
}
 8004912:	e010      	b.n	8004936 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <prvAddCurrentTaskToDelayedList+0xe8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3304      	adds	r3, #4
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f7fe fdc4 	bl	80034ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	429a      	cmp	r2, r3
 800492e:	d202      	bcs.n	8004936 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6013      	str	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	2000029c 	.word	0x2000029c
 8004944:	200001c0 	.word	0x200001c0
 8004948:	200002a0 	.word	0x200002a0
 800494c:	20000284 	.word	0x20000284
 8004950:	20000254 	.word	0x20000254
 8004954:	20000250 	.word	0x20000250
 8004958:	200002b8 	.word	0x200002b8

0800495c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004966:	f000 fa47 	bl	8004df8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <xTimerCreateTimerTask+0x54>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <xTimerCreateTimerTask+0x58>)
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	2302      	movs	r3, #2
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004980:	490d      	ldr	r1, [pc, #52]	; (80049b8 <xTimerCreateTimerTask+0x5c>)
 8004982:	480e      	ldr	r0, [pc, #56]	; (80049bc <xTimerCreateTimerTask+0x60>)
 8004984:	f7ff f8ce 	bl	8003b24 <xTaskCreate>
 8004988:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	603b      	str	r3, [r7, #0]
    }
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80049a6:	687b      	ldr	r3, [r7, #4]
    }
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	200002f4 	.word	0x200002f4
 80049b4:	200002f8 	.word	0x200002f8
 80049b8:	08006e94 	.word	0x08006e94
 80049bc:	08004a65 	.word	0x08004a65

080049c0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80049cc:	e008      	b.n	80049e0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	18d1      	adds	r1, r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f8dd 	bl	8004bac <prvInsertTimerInActiveList>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ea      	bne.n	80049ce <prvReloadTimer+0xe>
        }
    }
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0e:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <prvProcessExpiredTimer+0x5c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fd7f 	bl	8003520 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff ffc3 	bl	80049c0 <prvReloadTimer>
 8004a3a:	e008      	b.n	8004a4e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	4798      	blx	r3
    }
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	200002ec 	.word	0x200002ec

08004a64 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f857 	bl	8004b24 <prvGetNextExpireTime>
 8004a76:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f803 	bl	8004a88 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004a82:	f000 f8d5 	bl	8004c30 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a86:	e7f1      	b.n	8004a6c <prvTimerTask+0x8>

08004a88 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004a92:	f7ff f9f5 	bl	8003e80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a96:	f107 0308 	add.w	r3, r7, #8
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f866 	bl	8004b6c <prvSampleTimeNow>
 8004aa0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d130      	bne.n	8004b0a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <prvProcessTimerOrBlockTask+0x3c>
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d806      	bhi.n	8004ac4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004ab6:	f7ff f9f1 	bl	8003e9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff ffa1 	bl	8004a04 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004ac2:	e024      	b.n	8004b0e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <prvProcessTimerOrBlockTask+0x90>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <prvProcessTimerOrBlockTask+0x50>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <prvProcessTimerOrBlockTask+0x52>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <prvProcessTimerOrBlockTask+0x94>)
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f7fe ffe7 	bl	8003abc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004aee:	f7ff f9d5 	bl	8003e9c <xTaskResumeAll>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <prvProcessTimerOrBlockTask+0x98>)
 8004afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	f3bf 8f6f 	isb	sy
    }
 8004b08:	e001      	b.n	8004b0e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004b0a:	f7ff f9c7 	bl	8003e9c <xTaskResumeAll>
    }
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200002f0 	.word	0x200002f0
 8004b1c:	200002f4 	.word	0x200002f4
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <prvGetNextExpireTime+0x44>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <prvGetNextExpireTime+0x16>
 8004b36:	2201      	movs	r2, #1
 8004b38:	e000      	b.n	8004b3c <prvGetNextExpireTime+0x18>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <prvGetNextExpireTime+0x44>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e001      	b.n	8004b58 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004b58:	68fb      	ldr	r3, [r7, #12]
    }
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	200002ec 	.word	0x200002ec

08004b6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004b74:	f7ff fa80 	bl	8004078 <xTaskGetTickCount>
 8004b78:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <prvSampleTimeNow+0x3c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d205      	bcs.n	8004b90 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004b84:	f000 f912 	bl	8004dac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e002      	b.n	8004b96 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <prvSampleTimeNow+0x3c>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
    }
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	200002fc 	.word	0x200002fc

08004bac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d812      	bhi.n	8004bf8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	1ad2      	subs	r2, r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e01b      	b.n	8004c1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <prvInsertTimerInActiveList+0x7c>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f7fe fc5c 	bl	80034ae <vListInsert>
 8004bf6:	e012      	b.n	8004c1e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d206      	bcs.n	8004c0e <prvInsertTimerInActiveList+0x62>
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d302      	bcc.n	8004c0e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	e007      	b.n	8004c1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <prvInsertTimerInActiveList+0x80>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7fe fc48 	bl	80034ae <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004c1e:	697b      	ldr	r3, [r7, #20]
    }
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	200002f0 	.word	0x200002f0
 8004c2c:	200002ec 	.word	0x200002ec

08004c30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c36:	e0a6      	b.n	8004d86 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f2c0 80a2 	blt.w	8004d84 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe fc65 	bl	8003520 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ff87 	bl	8004b6c <prvSampleTimeNow>
 8004c5e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	f200 808e 	bhi.w	8004d86 <prvProcessReceivedCommands+0x156>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <prvProcessReceivedCommands+0x40>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c95 	.word	0x08004c95
 8004c78:	08004cfd 	.word	0x08004cfd
 8004c7c:	08004d11 	.word	0x08004d11
 8004c80:	08004d5b 	.word	0x08004d5b
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004c95 	.word	0x08004c95
 8004c8c:	08004cfd 	.word	0x08004cfd
 8004c90:	08004d11 	.word	0x08004d11
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	18d1      	adds	r1, r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	69f8      	ldr	r0, [r7, #28]
 8004cb4:	f7ff ff7a 	bl	8004bac <prvInsertTimerInActiveList>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d063      	beq.n	8004d86 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	69f8      	ldr	r0, [r7, #28]
 8004cda:	f7ff fe71 	bl	80049c0 <prvReloadTimer>
 8004cde:	e008      	b.n	8004cf2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	69f8      	ldr	r0, [r7, #28]
 8004cf8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004cfa:	e044      	b.n	8004d86 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004d0e:	e03a      	b.n	8004d86 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	617b      	str	r3, [r7, #20]
    }
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	18d1      	adds	r1, r2, r3
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	69f8      	ldr	r0, [r7, #28]
 8004d54:	f7ff ff2a 	bl	8004bac <prvInsertTimerInActiveList>
                        break;
 8004d58:	e015      	b.n	8004d86 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004d68:	69f8      	ldr	r0, [r7, #28]
 8004d6a:	f000 fb49 	bl	8005400 <vPortFree>
 8004d6e:	e00a      	b.n	8004d86 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004d82:	e000      	b.n	8004d86 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004d84:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <prvProcessReceivedCommands+0x178>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f107 0108 	add.w	r1, r7, #8
 8004d8e:	2200      	movs	r2, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe fce3 	bl	800375c <xQueueReceive>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f47f af4d 	bne.w	8004c38 <prvProcessReceivedCommands+0x8>
        }
    }
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	200002f4 	.word	0x200002f4

08004dac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004db2:	e009      	b.n	8004dc8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <prvSwitchTimerLists+0x44>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dc2:	6838      	ldr	r0, [r7, #0]
 8004dc4:	f7ff fe1e 	bl	8004a04 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <prvSwitchTimerLists+0x44>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <prvSwitchTimerLists+0x44>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <prvSwitchTimerLists+0x48>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <prvSwitchTimerLists+0x44>)
 8004dde:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <prvSwitchTimerLists+0x48>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6013      	str	r3, [r2, #0]
    }
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	200002ec 	.word	0x200002ec
 8004df4:	200002f0 	.word	0x200002f0

08004df8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004dfc:	f000 f964 	bl	80050c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004e00:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <prvCheckForValidListAndQueue+0x54>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11d      	bne.n	8004e44 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e08:	4811      	ldr	r0, [pc, #68]	; (8004e50 <prvCheckForValidListAndQueue+0x58>)
 8004e0a:	f7fe fb23 	bl	8003454 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e0e:	4811      	ldr	r0, [pc, #68]	; (8004e54 <prvCheckForValidListAndQueue+0x5c>)
 8004e10:	f7fe fb20 	bl	8003454 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <prvCheckForValidListAndQueue+0x60>)
 8004e16:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <prvCheckForValidListAndQueue+0x58>)
 8004e18:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004e1a:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <prvCheckForValidListAndQueue+0x64>)
 8004e1c:	4a0d      	ldr	r2, [pc, #52]	; (8004e54 <prvCheckForValidListAndQueue+0x5c>)
 8004e1e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004e20:	2200      	movs	r2, #0
 8004e22:	210c      	movs	r1, #12
 8004e24:	200a      	movs	r0, #10
 8004e26:	f7fe fc27 	bl	8003678 <xQueueGenericCreate>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <prvCheckForValidListAndQueue+0x54>)
 8004e2e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <prvCheckForValidListAndQueue+0x54>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <prvCheckForValidListAndQueue+0x54>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4908      	ldr	r1, [pc, #32]	; (8004e60 <prvCheckForValidListAndQueue+0x68>)
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fdee 	bl	8003a20 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e44:	f000 f970 	bl	8005128 <vPortExitCritical>
    }
 8004e48:	bf00      	nop
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	200002f4 	.word	0x200002f4
 8004e50:	200002c4 	.word	0x200002c4
 8004e54:	200002d8 	.word	0x200002d8
 8004e58:	200002ec 	.word	0x200002ec
 8004e5c:	200002f0 	.word	0x200002f0
 8004e60:	08006e9c 	.word	0x08006e9c

08004e64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3b04      	subs	r3, #4
 8004e74:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b04      	subs	r3, #4
 8004e82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004e94:	4a0c      	ldr	r2, [pc, #48]	; (8004ec8 <pxPortInitialiseStack+0x64>)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3b14      	subs	r3, #20
 8004e9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3b04      	subs	r3, #4
 8004eaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f06f 0202 	mvn.w	r2, #2
 8004eb2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3b20      	subs	r3, #32
 8004eb8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004eba:	68fb      	ldr	r3, [r7, #12]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	08004ecd 	.word	0x08004ecd

08004ecc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <prvTaskExitError+0x54>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ede:	d00a      	beq.n	8004ef6 <prvTaskExitError+0x2a>
        __asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	60fb      	str	r3, [r7, #12]
    }
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <prvTaskExitError+0x28>
        __asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	60bb      	str	r3, [r7, #8]
    }
 8004f08:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004f0a:	bf00      	nop
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0fc      	beq.n	8004f0c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	2000000c 	.word	0x2000000c
	...

08004f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <pxCurrentTCBConst2>)
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	f380 8809 	msr	PSP, r0
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8811 	msr	BASEPRI, r0
 8004f4a:	4770      	bx	lr
 8004f4c:	f3af 8000 	nop.w

08004f50 <pxCurrentTCBConst2>:
 8004f50:	200001c0 	.word	0x200001c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004f58:	4808      	ldr	r0, [pc, #32]	; (8004f7c <prvPortStartFirstTask+0x24>)
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	f380 8808 	msr	MSP, r0
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8814 	msr	CONTROL, r0
 8004f6a:	b662      	cpsie	i
 8004f6c:	b661      	cpsie	f
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	df00      	svc	0
 8004f78:	bf00      	nop
 8004f7a:	0000      	.short	0x0000
 8004f7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop

08004f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f8a:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <xPortStartScheduler+0x120>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a46      	ldr	r2, [pc, #280]	; (80050a8 <xPortStartScheduler+0x124>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d10a      	bne.n	8004faa <xPortStartScheduler+0x26>
        __asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	613b      	str	r3, [r7, #16]
    }
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004faa:	4b3e      	ldr	r3, [pc, #248]	; (80050a4 <xPortStartScheduler+0x120>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a3f      	ldr	r2, [pc, #252]	; (80050ac <xPortStartScheduler+0x128>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10a      	bne.n	8004fca <xPortStartScheduler+0x46>
        __asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
    }
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fca:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <xPortStartScheduler+0x12c>)
 8004fcc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	22ff      	movs	r2, #255	; 0xff
 8004fda:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <xPortStartScheduler+0x130>)
 8004ff0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ff2:	4b31      	ldr	r3, [pc, #196]	; (80050b8 <xPortStartScheduler+0x134>)
 8004ff4:	2207      	movs	r2, #7
 8004ff6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ff8:	e009      	b.n	800500e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004ffa:	4b2f      	ldr	r3, [pc, #188]	; (80050b8 <xPortStartScheduler+0x134>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	4a2d      	ldr	r2, [pc, #180]	; (80050b8 <xPortStartScheduler+0x134>)
 8005002:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b80      	cmp	r3, #128	; 0x80
 8005018:	d0ef      	beq.n	8004ffa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800501a:	4b27      	ldr	r3, [pc, #156]	; (80050b8 <xPortStartScheduler+0x134>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1c3 0307 	rsb	r3, r3, #7
 8005022:	2b04      	cmp	r3, #4
 8005024:	d00a      	beq.n	800503c <xPortStartScheduler+0xb8>
        __asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60bb      	str	r3, [r7, #8]
    }
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800503c:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <xPortStartScheduler+0x134>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <xPortStartScheduler+0x134>)
 8005044:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005046:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <xPortStartScheduler+0x134>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800504e:	4a1a      	ldr	r2, [pc, #104]	; (80050b8 <xPortStartScheduler+0x134>)
 8005050:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800505a:	4b18      	ldr	r3, [pc, #96]	; (80050bc <xPortStartScheduler+0x138>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a17      	ldr	r2, [pc, #92]	; (80050bc <xPortStartScheduler+0x138>)
 8005060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005064:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005066:	4b15      	ldr	r3, [pc, #84]	; (80050bc <xPortStartScheduler+0x138>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a14      	ldr	r2, [pc, #80]	; (80050bc <xPortStartScheduler+0x138>)
 800506c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005070:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005072:	f000 f8db 	bl	800522c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <xPortStartScheduler+0x13c>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800507c:	f000 f8fa 	bl	8005274 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005080:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <xPortStartScheduler+0x140>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a0f      	ldr	r2, [pc, #60]	; (80050c4 <xPortStartScheduler+0x140>)
 8005086:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800508a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800508c:	f7ff ff64 	bl	8004f58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005090:	f7ff f8f6 	bl	8004280 <vTaskSwitchContext>
    prvTaskExitError();
 8005094:	f7ff ff1a 	bl	8004ecc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	e000ed00 	.word	0xe000ed00
 80050a8:	410fc271 	.word	0x410fc271
 80050ac:	410fc270 	.word	0x410fc270
 80050b0:	e000e400 	.word	0xe000e400
 80050b4:	20000300 	.word	0x20000300
 80050b8:	20000304 	.word	0x20000304
 80050bc:	e000ed20 	.word	0xe000ed20
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	e000ef34 	.word	0xe000ef34

080050c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
        __asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	607b      	str	r3, [r7, #4]
    }
 80050e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80050e2:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <vPortEnterCritical+0x58>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3301      	adds	r3, #1
 80050e8:	4a0d      	ldr	r2, [pc, #52]	; (8005120 <vPortEnterCritical+0x58>)
 80050ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80050ec:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <vPortEnterCritical+0x58>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10f      	bne.n	8005114 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <vPortEnterCritical+0x5c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <vPortEnterCritical+0x4c>
        __asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	603b      	str	r3, [r7, #0]
    }
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <vPortEnterCritical+0x4a>
    }
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	2000000c 	.word	0x2000000c
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <vPortExitCritical+0x50>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <vPortExitCritical+0x24>
        __asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	607b      	str	r3, [r7, #4]
    }
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <vPortExitCritical+0x50>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3b01      	subs	r3, #1
 8005152:	4a09      	ldr	r2, [pc, #36]	; (8005178 <vPortExitCritical+0x50>)
 8005154:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005156:	4b08      	ldr	r3, [pc, #32]	; (8005178 <vPortExitCritical+0x50>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <vPortExitCritical+0x42>
 800515e:	2300      	movs	r3, #0
 8005160:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005168:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	2000000c 	.word	0x2000000c
 800517c:	00000000 	.word	0x00000000

08005180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005180:	f3ef 8009 	mrs	r0, PSP
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <pxCurrentTCBConst>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	f01e 0f10 	tst.w	lr, #16
 8005190:	bf08      	it	eq
 8005192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519a:	6010      	str	r0, [r2, #0]
 800519c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051a4:	f380 8811 	msr	BASEPRI, r0
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f7ff f866 	bl	8004280 <vTaskSwitchContext>
 80051b4:	f04f 0000 	mov.w	r0, #0
 80051b8:	f380 8811 	msr	BASEPRI, r0
 80051bc:	bc09      	pop	{r0, r3}
 80051be:	6819      	ldr	r1, [r3, #0]
 80051c0:	6808      	ldr	r0, [r1, #0]
 80051c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c6:	f01e 0f10 	tst.w	lr, #16
 80051ca:	bf08      	it	eq
 80051cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051d0:	f380 8809 	msr	PSP, r0
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	f3af 8000 	nop.w

080051e0 <pxCurrentTCBConst>:
 80051e0:	200001c0 	.word	0x200001c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop

080051e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
        __asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	607b      	str	r3, [r7, #4]
    }
 8005200:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005202:	f7fe ff49 	bl	8004098 <xTaskIncrementTick>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <SysTick_Handler+0x40>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f383 8811 	msr	BASEPRI, r3
    }
 800521e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <vPortSetupTimerInterrupt+0x34>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <vPortSetupTimerInterrupt+0x38>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <vPortSetupTimerInterrupt+0x3c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a0a      	ldr	r2, [pc, #40]	; (800526c <vPortSetupTimerInterrupt+0x40>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	4a09      	ldr	r2, [pc, #36]	; (8005270 <vPortSetupTimerInterrupt+0x44>)
 800524a:	3b01      	subs	r3, #1
 800524c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800524e:	4b04      	ldr	r3, [pc, #16]	; (8005260 <vPortSetupTimerInterrupt+0x34>)
 8005250:	2207      	movs	r2, #7
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000e010 	.word	0xe000e010
 8005264:	e000e018 	.word	0xe000e018
 8005268:	20000010 	.word	0x20000010
 800526c:	10624dd3 	.word	0x10624dd3
 8005270:	e000e014 	.word	0xe000e014

08005274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005284 <vPortEnableVFP+0x10>
 8005278:	6801      	ldr	r1, [r0, #0]
 800527a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800527e:	6001      	str	r1, [r0, #0]
 8005280:	4770      	bx	lr
 8005282:	0000      	.short	0x0000
 8005284:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop

0800528c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005298:	f7fe fdf2 	bl	8003e80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <pvPortMalloc+0x160>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80052a4:	f000 f908 	bl	80054b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d012      	beq.n	80052d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80052ae:	2208      	movs	r2, #8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	3308      	adds	r3, #8
 80052ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	43db      	mvns	r3, r3
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d804      	bhi.n	80052d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	4413      	add	r3, r2
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	e001      	b.n	80052d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	db70      	blt.n	80053bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d06d      	beq.n	80053bc <pvPortMalloc+0x130>
 80052e0:	4b43      	ldr	r3, [pc, #268]	; (80053f0 <pvPortMalloc+0x164>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d868      	bhi.n	80053bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80052ea:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <pvPortMalloc+0x168>)
 80052ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80052ee:	4b41      	ldr	r3, [pc, #260]	; (80053f4 <pvPortMalloc+0x168>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052f4:	e004      	b.n	8005300 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	429a      	cmp	r2, r3
 8005308:	d903      	bls.n	8005312 <pvPortMalloc+0x86>
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f1      	bne.n	80052f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005312:	4b36      	ldr	r3, [pc, #216]	; (80053ec <pvPortMalloc+0x160>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005318:	429a      	cmp	r2, r3
 800531a:	d04f      	beq.n	80053bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2208      	movs	r2, #8
 8005322:	4413      	add	r3, r2
 8005324:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	1ad2      	subs	r2, r2, r3
 8005336:	2308      	movs	r3, #8
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	429a      	cmp	r2, r3
 800533c:	d91f      	bls.n	800537e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800533e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4413      	add	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <pvPortMalloc+0xda>
        __asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	613b      	str	r3, [r7, #16]
    }
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	1ad2      	subs	r2, r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005378:	6978      	ldr	r0, [r7, #20]
 800537a:	f000 f8f9 	bl	8005570 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800537e:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <pvPortMalloc+0x164>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <pvPortMalloc+0x164>)
 800538a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800538c:	4b18      	ldr	r3, [pc, #96]	; (80053f0 <pvPortMalloc+0x164>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <pvPortMalloc+0x16c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d203      	bcs.n	80053a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <pvPortMalloc+0x164>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a16      	ldr	r2, [pc, #88]	; (80053f8 <pvPortMalloc+0x16c>)
 800539e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80053b2:	4b12      	ldr	r3, [pc, #72]	; (80053fc <pvPortMalloc+0x170>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	4a10      	ldr	r2, [pc, #64]	; (80053fc <pvPortMalloc+0x170>)
 80053ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80053bc:	f7fe fd6e 	bl	8003e9c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <pvPortMalloc+0x154>
        __asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	60fb      	str	r3, [r7, #12]
    }
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <pvPortMalloc+0x152>
    return pvReturn;
 80053e0:	69fb      	ldr	r3, [r7, #28]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3728      	adds	r7, #40	; 0x28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20012f10 	.word	0x20012f10
 80053f0:	20012f14 	.word	0x20012f14
 80053f4:	20012f08 	.word	0x20012f08
 80053f8:	20012f18 	.word	0x20012f18
 80053fc:	20012f1c 	.word	0x20012f1c

08005400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d049      	beq.n	80054a6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005412:	2308      	movs	r3, #8
 8005414:	425b      	negs	r3, r3
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	db0a      	blt.n	800543e <vPortFree+0x3e>
        __asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
    }
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <vPortFree+0x5c>
        __asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60bb      	str	r3, [r7, #8]
    }
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	0fdb      	lsrs	r3, r3, #31
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01c      	beq.n	80054a6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d118      	bne.n	80054a6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005480:	f7fe fcfe 	bl	8003e80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <vPortFree+0xb0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4413      	add	r3, r2
 800548e:	4a08      	ldr	r2, [pc, #32]	; (80054b0 <vPortFree+0xb0>)
 8005490:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005492:	6938      	ldr	r0, [r7, #16]
 8005494:	f000 f86c 	bl	8005570 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <vPortFree+0xb4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <vPortFree+0xb4>)
 80054a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80054a2:	f7fe fcfb 	bl	8003e9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80054a6:	bf00      	nop
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20012f14 	.word	0x20012f14
 80054b4:	20012f20 	.word	0x20012f20

080054b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80054c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80054c4:	4b25      	ldr	r3, [pc, #148]	; (800555c <prvHeapInit+0xa4>)
 80054c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00c      	beq.n	80054ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3307      	adds	r3, #7
 80054d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0307 	bic.w	r3, r3, #7
 80054de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	4a1d      	ldr	r2, [pc, #116]	; (800555c <prvHeapInit+0xa4>)
 80054e8:	4413      	add	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054f0:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <prvHeapInit+0xa8>)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80054f6:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <prvHeapInit+0xa8>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4413      	add	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005504:	2208      	movs	r2, #8
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0307 	bic.w	r3, r3, #7
 8005512:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4a13      	ldr	r2, [pc, #76]	; (8005564 <prvHeapInit+0xac>)
 8005518:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800551a:	4b12      	ldr	r3, [pc, #72]	; (8005564 <prvHeapInit+0xac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2200      	movs	r2, #0
 8005520:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <prvHeapInit+0xac>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	1ad2      	subs	r2, r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <prvHeapInit+0xac>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a08      	ldr	r2, [pc, #32]	; (8005568 <prvHeapInit+0xb0>)
 8005546:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4a07      	ldr	r2, [pc, #28]	; (800556c <prvHeapInit+0xb4>)
 800554e:	6013      	str	r3, [r2, #0]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	20000308 	.word	0x20000308
 8005560:	20012f08 	.word	0x20012f08
 8005564:	20012f10 	.word	0x20012f10
 8005568:	20012f18 	.word	0x20012f18
 800556c:	20012f14 	.word	0x20012f14

08005570 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005578:	4b28      	ldr	r3, [pc, #160]	; (800561c <prvInsertBlockIntoFreeList+0xac>)
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e002      	b.n	8005584 <prvInsertBlockIntoFreeList+0x14>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d8f7      	bhi.n	800557e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4413      	add	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d108      	bne.n	80055b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	441a      	add	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	441a      	add	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d118      	bne.n	80055f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <prvInsertBlockIntoFreeList+0xb0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d00d      	beq.n	80055ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	441a      	add	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e008      	b.n	8005600 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <prvInsertBlockIntoFreeList+0xb0>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e003      	b.n	8005600 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d002      	beq.n	800560e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20012f08 	.word	0x20012f08
 8005620:	20012f10 	.word	0x20012f10

08005624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005624:	480d      	ldr	r0, [pc, #52]	; (800565c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005626:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005628:	f000 fb60 	bl	8005cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800562c:	480c      	ldr	r0, [pc, #48]	; (8005660 <LoopForever+0x6>)
  ldr r1, =_edata
 800562e:	490d      	ldr	r1, [pc, #52]	; (8005664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005630:	4a0d      	ldr	r2, [pc, #52]	; (8005668 <LoopForever+0xe>)
  movs r3, #0
 8005632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005634:	e002      	b.n	800563c <LoopCopyDataInit>

08005636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800563a:	3304      	adds	r3, #4

0800563c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800563c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800563e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005640:	d3f9      	bcc.n	8005636 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005642:	4a0a      	ldr	r2, [pc, #40]	; (800566c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005644:	4c0a      	ldr	r4, [pc, #40]	; (8005670 <LoopForever+0x16>)
  movs r3, #0
 8005646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005648:	e001      	b.n	800564e <LoopFillZerobss>

0800564a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800564a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800564c:	3204      	adds	r2, #4

0800564e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800564e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005650:	d3fb      	bcc.n	800564a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005652:	f000 fb5d 	bl	8005d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005656:	f000 f80f 	bl	8005678 <main>

0800565a <LoopForever>:

LoopForever:
  b LoopForever
 800565a:	e7fe      	b.n	800565a <LoopForever>
  ldr   r0, =_estack
 800565c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005664:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8005668:	08006fa4 	.word	0x08006fa4
  ldr r2, =_sbss
 800566c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005670:	20012f84 	.word	0x20012f84

08005674 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005674:	e7fe      	b.n	8005674 <ADC_IRQHandler>
	...

08005678 <main>:

extern char LED1_ON_FLAG;
extern char LED2_ON_FLAG;

int main(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
	HAL_Init();
 800567c:	f7fb f978 	bl	8000970 <HAL_Init>
	SystemClock_Config();
 8005680:	f000 f822 	bl	80056c8 <SystemClock_Config>

	Timer_Init(TIM6);
 8005684:	480d      	ldr	r0, [pc, #52]	; (80056bc <main+0x44>)
 8005686:	f7fb f8b9 	bl	80007fc <Timer_Init>
	UART_Init();
 800568a:	f7fb f8fd 	bl	8000888 <UART_Init>
	I2C_Init();
 800568e:	f7fb f875 	bl	800077c <I2C_Init>

	GPIO_Init(GPIOG, GPIO_PIN_14);
 8005692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005696:	480a      	ldr	r0, [pc, #40]	; (80056c0 <main+0x48>)
 8005698:	f7fa ff84 	bl	80005a4 <GPIO_Init>
	GPIO_Init(GPIOG, GPIO_PIN_13);
 800569c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056a0:	4807      	ldr	r0, [pc, #28]	; (80056c0 <main+0x48>)
 80056a2:	f7fa ff7f 	bl	80005a4 <GPIO_Init>

	Timer_Start_IT();
 80056a6:	f7fb f8c5 	bl	8000834 <Timer_Start_IT>
	UART_Interrupt_Start(&rx_Buffer);
 80056aa:	4806      	ldr	r0, [pc, #24]	; (80056c4 <main+0x4c>)
 80056ac:	f7fb f950 	bl	8000950 <UART_Interrupt_Start>

#if RTOS_APP // RTOS Based Application

	RTOS_Application();
 80056b0:	f000 f880 	bl	80057b4 <RTOS_Application>
 80056b4:	2300      	movs	r3, #0
#else // Non RTOS Based Application

	Non_RTOS_Application();

#endif
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40001000 	.word	0x40001000
 80056c0:	40021800 	.word	0x40021800
 80056c4:	20012f24 	.word	0x20012f24

080056c8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b094      	sub	sp, #80	; 0x50
 80056cc:	af00      	add	r7, sp, #0
	/*    Configure processor to run at full speed i.e 180Mhz */
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056ce:	f107 0320 	add.w	r3, r7, #32
 80056d2:	2230      	movs	r2, #48	; 0x30
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fb4c 	bl	8005d74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056dc:	f107 030c 	add.w	r3, r7, #12
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80056ec:	2300      	movs	r3, #0
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <SystemClock_Config+0xd8>)
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <SystemClock_Config+0xd8>)
 80056f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fa:	6413      	str	r3, [r2, #64]	; 0x40
 80056fc:	4b28      	ldr	r3, [pc, #160]	; (80057a0 <SystemClock_Config+0xd8>)
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005708:	2300      	movs	r3, #0
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <SystemClock_Config+0xdc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <SystemClock_Config+0xdc>)
 8005712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <SystemClock_Config+0xdc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005724:	2301      	movs	r3, #1
 8005726:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800572e:	2302      	movs	r3, #2
 8005730:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8005738:	2304      	movs	r3, #4
 800573a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 800573c:	2350      	movs	r3, #80	; 0x50
 800573e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005740:	2302      	movs	r3, #2
 8005742:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8005744:	2307      	movs	r3, #7
 8005746:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005748:	f107 0320 	add.w	r3, r7, #32
 800574c:	4618      	mov	r0, r3
 800574e:	f7fb fe9b 	bl	8001488 <HAL_RCC_OscConfig>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8005758:	f000 f826 	bl	80057a8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800575c:	f7fb fe44 	bl	80013e8 <HAL_PWREx_EnableOverDrive>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8005766:	f000 f81f 	bl	80057a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800576a:	230f      	movs	r3, #15
 800576c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800576e:	2302      	movs	r3, #2
 8005770:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800577a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800577c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005780:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005782:	f107 030c 	add.w	r3, r7, #12
 8005786:	2105      	movs	r1, #5
 8005788:	4618      	mov	r0, r3
 800578a:	f7fc f8f5 	bl	8001978 <HAL_RCC_ClockConfig>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8005794:	f000 f808 	bl	80057a8 <Error_Handler>
	}
}
 8005798:	bf00      	nop
 800579a:	3750      	adds	r7, #80	; 0x50
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40007000 	.word	0x40007000

080057a8 <Error_Handler>:

void Error_Handler(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80057ac:	b672      	cpsid	i
}
 80057ae:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80057b0:	e7fe      	b.n	80057b0 <Error_Handler+0x8>
	...

080057b4 <RTOS_Application>:
	}

}

void RTOS_Application(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af02      	add	r7, sp, #8
	TaskHandle_t task1_handler, task2_handler;
	BaseType_t status;

	status = xTaskCreate(Task1_Handler, "Task-1", 200, "Hello From Task-1", 2, &task1_handler);
 80057ba:	f107 0308 	add.w	r3, r7, #8
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	2302      	movs	r3, #2
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <RTOS_Application+0x78>)
 80057c6:	22c8      	movs	r2, #200	; 0xc8
 80057c8:	4919      	ldr	r1, [pc, #100]	; (8005830 <RTOS_Application+0x7c>)
 80057ca:	481a      	ldr	r0, [pc, #104]	; (8005834 <RTOS_Application+0x80>)
 80057cc:	f7fe f9aa 	bl	8003b24 <xTaskCreate>
 80057d0:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d00a      	beq.n	80057ee <RTOS_Application+0x3a>
        __asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	613b      	str	r3, [r7, #16]
    }
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <RTOS_Application+0x38>

	status = xTaskCreate(Task2_Handler, "Task-2", 200, "Hello From Task-2", 2, &task2_handler);
 80057ee:	1d3b      	adds	r3, r7, #4
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	2302      	movs	r3, #2
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <RTOS_Application+0x84>)
 80057f8:	22c8      	movs	r2, #200	; 0xc8
 80057fa:	4910      	ldr	r1, [pc, #64]	; (800583c <RTOS_Application+0x88>)
 80057fc:	4810      	ldr	r0, [pc, #64]	; (8005840 <RTOS_Application+0x8c>)
 80057fe:	f7fe f991 	bl	8003b24 <xTaskCreate>
 8005802:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d00a      	beq.n	8005820 <RTOS_Application+0x6c>
        __asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60fb      	str	r3, [r7, #12]
    }
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <RTOS_Application+0x6a>

	vTaskStartScheduler(); // Start FreeRTOS Scheduler
 8005820:	f7fe fadc 	bl	8003ddc <vTaskStartScheduler>
}
 8005824:	bf00      	nop
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	08006ea4 	.word	0x08006ea4
 8005830:	08006eb8 	.word	0x08006eb8
 8005834:	08005845 	.word	0x08005845
 8005838:	08006ec0 	.word	0x08006ec0
 800583c:	08006ed4 	.word	0x08006ed4
 8005840:	08005889 	.word	0x08005889

08005844 <Task1_Handler>:
		}
	}
}

void Task1_Handler(void* parameters)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]
	/* Loop forever */
	for(;;)
	{
		Print_Msg("%s %d\r\n", (char*)parameters, counter++);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	60fa      	str	r2, [r7, #12]
 8005856:	461a      	mov	r2, r3
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4808      	ldr	r0, [pc, #32]	; (800587c <Task1_Handler+0x38>)
 800585c:	f7fb f83e 	bl	80008dc <Print_Msg>
		GPIO_Pin_Toggle(GPIOG, GPIO_PIN_13);
 8005860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005864:	4806      	ldr	r0, [pc, #24]	; (8005880 <Task1_Handler+0x3c>)
 8005866:	f7fa ff79 	bl	800075c <GPIO_Pin_Toggle>
		taskYIELD(); // context switching manually
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <Task1_Handler+0x40>)
 800586c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	f3bf 8f6f 	isb	sy
		Print_Msg("%s %d\r\n", (char*)parameters, counter++);
 800587a:	e7e9      	b.n	8005850 <Task1_Handler+0xc>
 800587c:	08006edc 	.word	0x08006edc
 8005880:	40021800 	.word	0x40021800
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <Task2_Handler>:
	}
}
void Task2_Handler(void* parameters)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
	/* Loop forever */
	for(;;)
	{
		Print_Msg("%s %d\r\n", (char*)parameters, counter++);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	60fa      	str	r2, [r7, #12]
 800589a:	461a      	mov	r2, r3
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4808      	ldr	r0, [pc, #32]	; (80058c0 <Task2_Handler+0x38>)
 80058a0:	f7fb f81c 	bl	80008dc <Print_Msg>
		GPIO_Pin_Toggle(GPIOG, GPIO_PIN_14);
 80058a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058a8:	4806      	ldr	r0, [pc, #24]	; (80058c4 <Task2_Handler+0x3c>)
 80058aa:	f7fa ff57 	bl	800075c <GPIO_Pin_Toggle>
		taskYIELD(); // context switching manually
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <Task2_Handler+0x40>)
 80058b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
		Print_Msg("%s %d\r\n", (char*)parameters, counter++);
 80058be:	e7e9      	b.n	8005894 <Task2_Handler+0xc>
 80058c0:	08006edc 	.word	0x08006edc
 80058c4:	40021800 	.word	0x40021800
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <HAL_MspInit>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"


void HAL_MspInit(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	607b      	str	r3, [r7, #4]
 80058d6:	4b19      	ldr	r3, [pc, #100]	; (800593c <HAL_MspInit+0x70>)
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <HAL_MspInit+0x70>)
 80058dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058e0:	6453      	str	r3, [r2, #68]	; 0x44
 80058e2:	4b16      	ldr	r3, [pc, #88]	; (800593c <HAL_MspInit+0x70>)
 80058e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ea:	607b      	str	r3, [r7, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80058ee:	2300      	movs	r3, #0
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <HAL_MspInit+0x70>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	4a11      	ldr	r2, [pc, #68]	; (800593c <HAL_MspInit+0x70>)
 80058f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fc:	6413      	str	r3, [r2, #64]	; 0x40
 80058fe:	4b0f      	ldr	r3, [pc, #60]	; (800593c <HAL_MspInit+0x70>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800590a:	2003      	movs	r0, #3
 800590c:	f7fb f91f 	bl	8000b4e <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/

	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8005910:	2200      	movs	r2, #0
 8005912:	2100      	movs	r1, #0
 8005914:	f06f 000b 	mvn.w	r0, #11
 8005918:	f7fb f924 	bl	8000b64 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800591c:	2200      	movs	r2, #0
 800591e:	2100      	movs	r1, #0
 8005920:	f06f 000a 	mvn.w	r0, #10
 8005924:	f7fb f91e 	bl	8000b64 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8005928:	2200      	movs	r2, #0
 800592a:	2100      	movs	r1, #0
 800592c:	f06f 0009 	mvn.w	r0, #9
 8005930:	f7fb f918 	bl	8000b64 <HAL_NVIC_SetPriority>
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40023800 	.word	0x40023800

08005940 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	4b0b      	ldr	r3, [pc, #44]	; (800597c <HAL_TIM_Base_MspInit+0x3c>)
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	4a0a      	ldr	r2, [pc, #40]	; (800597c <HAL_TIM_Base_MspInit+0x3c>)
 8005952:	f043 0310 	orr.w	r3, r3, #16
 8005956:	6413      	str	r3, [r2, #64]	; 0x40
 8005958:	4b08      	ldr	r3, [pc, #32]	; (800597c <HAL_TIM_Base_MspInit+0x3c>)
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005964:	2036      	movs	r0, #54	; 0x36
 8005966:	f7fb f919 	bl	8000b9c <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 800596a:	2200      	movs	r2, #0
 800596c:	210f      	movs	r1, #15
 800596e:	2036      	movs	r0, #54	; 0x36
 8005970:	f7fb f8f8 	bl	8000b64 <HAL_NVIC_SetPriority>

}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40023800 	.word	0x40023800

08005980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	611a      	str	r2, [r3, #16]
	if(huart->Instance==USART1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <HAL_UART_MspInit+0x94>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d134      	bne.n	8005a0c <HAL_UART_MspInit+0x8c>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <HAL_UART_MspInit+0x98>)
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <HAL_UART_MspInit+0x98>)
 80059ac:	f043 0310 	orr.w	r3, r3, #16
 80059b0:	6453      	str	r3, [r2, #68]	; 0x44
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <HAL_UART_MspInit+0x98>)
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <HAL_UART_MspInit+0x98>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <HAL_UART_MspInit+0x98>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	6313      	str	r3, [r2, #48]	; 0x30
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <HAL_UART_MspInit+0x98>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
		/**USART1 GPIO Configuration
    	PA9  ------> USART1_TX
    	PA10 ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80059da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80059de:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e0:	2302      	movs	r3, #2
 80059e2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e8:	2303      	movs	r3, #3
 80059ea:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80059ec:	2307      	movs	r3, #7
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	4619      	mov	r1, r3
 80059f6:	4809      	ldr	r0, [pc, #36]	; (8005a1c <HAL_UART_MspInit+0x9c>)
 80059f8:	f7fb f970 	bl	8000cdc <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80059fc:	2200      	movs	r2, #0
 80059fe:	2100      	movs	r1, #0
 8005a00:	2025      	movs	r0, #37	; 0x25
 8005a02:	f7fb f8af 	bl	8000b64 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a06:	2025      	movs	r0, #37	; 0x25
 8005a08:	f7fb f8c8 	bl	8000b9c <HAL_NVIC_EnableIRQ>
	}

}
 8005a0c:	bf00      	nop
 8005a0e:	3728      	adds	r7, #40	; 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40011000 	.word	0x40011000
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	40020000 	.word	0x40020000

08005a20 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	611a      	str	r2, [r3, #16]
	if(hi2c->Instance==I2C1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <HAL_I2C_MspInit+0x84>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d12b      	bne.n	8005a9a <HAL_I2C_MspInit+0x7a>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	4b18      	ldr	r3, [pc, #96]	; (8005aa8 <HAL_I2C_MspInit+0x88>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <HAL_I2C_MspInit+0x88>)
 8005a4c:	f043 0302 	orr.w	r3, r3, #2
 8005a50:	6313      	str	r3, [r2, #48]	; 0x30
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <HAL_I2C_MspInit+0x88>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
    	PB6------> I2C1_SCL
    	PB7------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a5e:	23c0      	movs	r3, #192	; 0xc0
 8005a60:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a62:	2312      	movs	r3, #18
 8005a64:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a6e:	2304      	movs	r3, #4
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a72:	f107 0314 	add.w	r3, r7, #20
 8005a76:	4619      	mov	r1, r3
 8005a78:	480c      	ldr	r0, [pc, #48]	; (8005aac <HAL_I2C_MspInit+0x8c>)
 8005a7a:	f7fb f92f 	bl	8000cdc <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_I2C_MspInit+0x88>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <HAL_I2C_MspInit+0x88>)
 8005a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <HAL_I2C_MspInit+0x88>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
	}

}
 8005a9a:	bf00      	nop
 8005a9c:	3728      	adds	r7, #40	; 0x28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40005400 	.word	0x40005400
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40020400 	.word	0x40020400

08005ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08e      	sub	sp, #56	; 0x38
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	4b33      	ldr	r3, [pc, #204]	; (8005b94 <HAL_InitTick+0xe4>)
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <HAL_InitTick+0xe4>)
 8005aca:	f043 0320 	orr.w	r3, r3, #32
 8005ace:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad0:	4b30      	ldr	r3, [pc, #192]	; (8005b94 <HAL_InitTick+0xe4>)
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005adc:	f107 0210 	add.w	r2, r7, #16
 8005ae0:	f107 0314 	add.w	r3, r7, #20
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fc f966 	bl	8001db8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005af6:	f7fc f937 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 8005afa:	6378      	str	r0, [r7, #52]	; 0x34
 8005afc:	e004      	b.n	8005b08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005afe:	f7fc f933 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 8005b02:	4603      	mov	r3, r0
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	4a23      	ldr	r2, [pc, #140]	; (8005b98 <HAL_InitTick+0xe8>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	0c9b      	lsrs	r3, r3, #18
 8005b12:	3b01      	subs	r3, #1
 8005b14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005b16:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <HAL_InitTick+0xec>)
 8005b18:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <HAL_InitTick+0xf0>)
 8005b1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8005b1c:	4b1f      	ldr	r3, [pc, #124]	; (8005b9c <HAL_InitTick+0xec>)
 8005b1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b22:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005b24:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <HAL_InitTick+0xec>)
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8005b2a:	4b1c      	ldr	r3, [pc, #112]	; (8005b9c <HAL_InitTick+0xec>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b30:	4b1a      	ldr	r3, [pc, #104]	; (8005b9c <HAL_InitTick+0xec>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b36:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <HAL_InitTick+0xec>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8005b3c:	4817      	ldr	r0, [pc, #92]	; (8005b9c <HAL_InitTick+0xec>)
 8005b3e:	f7fc f96d 	bl	8001e1c <HAL_TIM_Base_Init>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005b48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d11b      	bne.n	8005b88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8005b50:	4812      	ldr	r0, [pc, #72]	; (8005b9c <HAL_InitTick+0xec>)
 8005b52:	f7fc f9b3 	bl	8001ebc <HAL_TIM_Base_Start_IT>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d111      	bne.n	8005b88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005b64:	2037      	movs	r0, #55	; 0x37
 8005b66:	f7fb f819 	bl	8000b9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b0f      	cmp	r3, #15
 8005b6e:	d808      	bhi.n	8005b82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8005b70:	2200      	movs	r2, #0
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	2037      	movs	r0, #55	; 0x37
 8005b76:	f7fa fff5 	bl	8000b64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <HAL_InitTick+0xf4>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	e002      	b.n	8005b88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005b88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3738      	adds	r7, #56	; 0x38
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40023800 	.word	0x40023800
 8005b98:	431bde83 	.word	0x431bde83
 8005b9c:	20012f28 	.word	0x20012f28
 8005ba0:	40001400 	.word	0x40001400
 8005ba4:	20000000 	.word	0x20000000

08005ba8 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8005bac:	e7fe      	b.n	8005bac <NMI_Handler+0x4>

08005bae <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8005bb2:	e7fe      	b.n	8005bb2 <HardFault_Handler+0x4>

08005bb4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8005bb8:	e7fe      	b.n	8005bb8 <MemManage_Handler+0x4>

08005bba <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8005bbe:	e7fe      	b.n	8005bbe <BusFault_Handler+0x4>

08005bc0 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8005bc4:	e7fe      	b.n	8005bc4 <UsageFault_Handler+0x4>

08005bc6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bca:	bf00      	nop
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <TIM6_DAC_IRQHandler>:
extern TIM_HandleTypeDef htim7;
/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8005bd8:	4802      	ldr	r0, [pc, #8]	; (8005be4 <TIM6_DAC_IRQHandler+0x10>)
 8005bda:	f7fc f9df 	bl	8001f9c <HAL_TIM_IRQHandler>
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200000e8 	.word	0x200000e8

08005be8 <USART1_IRQHandler>:
/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8005bec:	4802      	ldr	r0, [pc, #8]	; (8005bf8 <USART1_IRQHandler+0x10>)
 8005bee:	f7fc fcc9 	bl	8002584 <HAL_UART_IRQHandler>
}
 8005bf2:	bf00      	nop
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000134 	.word	0x20000134

08005bfc <TIM7_IRQHandler>:
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 8005c00:	4802      	ldr	r0, [pc, #8]	; (8005c0c <TIM7_IRQHandler+0x10>)
 8005c02:	f7fc f9cb 	bl	8001f9c <HAL_TIM_IRQHandler>
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20012f28 	.word	0x20012f28

08005c10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e00a      	b.n	8005c38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005c22:	f3af 8000 	nop.w
 8005c26:	4601      	mov	r1, r0
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	60ba      	str	r2, [r7, #8]
 8005c2e:	b2ca      	uxtb	r2, r1
 8005c30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	3301      	adds	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	dbf0      	blt.n	8005c22 <_read+0x12>
  }

  return len;
 8005c40:	687b      	ldr	r3, [r7, #4]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	e009      	b.n	8005c70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	60ba      	str	r2, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	dbf1      	blt.n	8005c5c <_write+0x12>
  }
  return len;
 8005c78:	687b      	ldr	r3, [r7, #4]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <_close>:

int _close(int file)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005caa:	605a      	str	r2, [r3, #4]
  return 0;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <_isatty>:

int _isatty(int file)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005cc2:	2301      	movs	r3, #1
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <SystemInit+0x20>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf6:	4a05      	ldr	r2, [pc, #20]	; (8005d0c <SystemInit+0x20>)
 8005cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d00:	bf00      	nop
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <__libc_init_array>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	4d0d      	ldr	r5, [pc, #52]	; (8005d48 <__libc_init_array+0x38>)
 8005d14:	4c0d      	ldr	r4, [pc, #52]	; (8005d4c <__libc_init_array+0x3c>)
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	42a6      	cmp	r6, r4
 8005d1e:	d109      	bne.n	8005d34 <__libc_init_array+0x24>
 8005d20:	4d0b      	ldr	r5, [pc, #44]	; (8005d50 <__libc_init_array+0x40>)
 8005d22:	4c0c      	ldr	r4, [pc, #48]	; (8005d54 <__libc_init_array+0x44>)
 8005d24:	f001 f89c 	bl	8006e60 <_init>
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	d105      	bne.n	8005d3e <__libc_init_array+0x2e>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d38:	4798      	blx	r3
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7ee      	b.n	8005d1c <__libc_init_array+0xc>
 8005d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d42:	4798      	blx	r3
 8005d44:	3601      	adds	r6, #1
 8005d46:	e7f2      	b.n	8005d2e <__libc_init_array+0x1e>
 8005d48:	08006f9c 	.word	0x08006f9c
 8005d4c:	08006f9c 	.word	0x08006f9c
 8005d50:	08006f9c 	.word	0x08006f9c
 8005d54:	08006fa0 	.word	0x08006fa0

08005d58 <memcpy>:
 8005d58:	440a      	add	r2, r1
 8005d5a:	4291      	cmp	r1, r2
 8005d5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d60:	d100      	bne.n	8005d64 <memcpy+0xc>
 8005d62:	4770      	bx	lr
 8005d64:	b510      	push	{r4, lr}
 8005d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d6e:	4291      	cmp	r1, r2
 8005d70:	d1f9      	bne.n	8005d66 <memcpy+0xe>
 8005d72:	bd10      	pop	{r4, pc}

08005d74 <memset>:
 8005d74:	4402      	add	r2, r0
 8005d76:	4603      	mov	r3, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <_puts_r>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	460e      	mov	r6, r1
 8005d88:	4605      	mov	r5, r0
 8005d8a:	b118      	cbz	r0, 8005d94 <_puts_r+0x10>
 8005d8c:	6983      	ldr	r3, [r0, #24]
 8005d8e:	b90b      	cbnz	r3, 8005d94 <_puts_r+0x10>
 8005d90:	f000 fa68 	bl	8006264 <__sinit>
 8005d94:	69ab      	ldr	r3, [r5, #24]
 8005d96:	68ac      	ldr	r4, [r5, #8]
 8005d98:	b913      	cbnz	r3, 8005da0 <_puts_r+0x1c>
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 fa62 	bl	8006264 <__sinit>
 8005da0:	4b2c      	ldr	r3, [pc, #176]	; (8005e54 <_puts_r+0xd0>)
 8005da2:	429c      	cmp	r4, r3
 8005da4:	d120      	bne.n	8005de8 <_puts_r+0x64>
 8005da6:	686c      	ldr	r4, [r5, #4]
 8005da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005daa:	07db      	lsls	r3, r3, #31
 8005dac:	d405      	bmi.n	8005dba <_puts_r+0x36>
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	0598      	lsls	r0, r3, #22
 8005db2:	d402      	bmi.n	8005dba <_puts_r+0x36>
 8005db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db6:	f000 faf3 	bl	80063a0 <__retarget_lock_acquire_recursive>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	0719      	lsls	r1, r3, #28
 8005dbe:	d51d      	bpl.n	8005dfc <_puts_r+0x78>
 8005dc0:	6923      	ldr	r3, [r4, #16]
 8005dc2:	b1db      	cbz	r3, 8005dfc <_puts_r+0x78>
 8005dc4:	3e01      	subs	r6, #1
 8005dc6:	68a3      	ldr	r3, [r4, #8]
 8005dc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	60a3      	str	r3, [r4, #8]
 8005dd0:	bb39      	cbnz	r1, 8005e22 <_puts_r+0x9e>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da38      	bge.n	8005e48 <_puts_r+0xc4>
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	210a      	movs	r1, #10
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 f868 	bl	8005eb0 <__swbuf_r>
 8005de0:	3001      	adds	r0, #1
 8005de2:	d011      	beq.n	8005e08 <_puts_r+0x84>
 8005de4:	250a      	movs	r5, #10
 8005de6:	e011      	b.n	8005e0c <_puts_r+0x88>
 8005de8:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <_puts_r+0xd4>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d101      	bne.n	8005df2 <_puts_r+0x6e>
 8005dee:	68ac      	ldr	r4, [r5, #8]
 8005df0:	e7da      	b.n	8005da8 <_puts_r+0x24>
 8005df2:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <_puts_r+0xd8>)
 8005df4:	429c      	cmp	r4, r3
 8005df6:	bf08      	it	eq
 8005df8:	68ec      	ldreq	r4, [r5, #12]
 8005dfa:	e7d5      	b.n	8005da8 <_puts_r+0x24>
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f8a8 	bl	8005f54 <__swsetup_r>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d0dd      	beq.n	8005dc4 <_puts_r+0x40>
 8005e08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e0e:	07da      	lsls	r2, r3, #31
 8005e10:	d405      	bmi.n	8005e1e <_puts_r+0x9a>
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	059b      	lsls	r3, r3, #22
 8005e16:	d402      	bmi.n	8005e1e <_puts_r+0x9a>
 8005e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e1a:	f000 fac2 	bl	80063a2 <__retarget_lock_release_recursive>
 8005e1e:	4628      	mov	r0, r5
 8005e20:	bd70      	pop	{r4, r5, r6, pc}
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da04      	bge.n	8005e30 <_puts_r+0xac>
 8005e26:	69a2      	ldr	r2, [r4, #24]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	dc06      	bgt.n	8005e3a <_puts_r+0xb6>
 8005e2c:	290a      	cmp	r1, #10
 8005e2e:	d004      	beq.n	8005e3a <_puts_r+0xb6>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	6022      	str	r2, [r4, #0]
 8005e36:	7019      	strb	r1, [r3, #0]
 8005e38:	e7c5      	b.n	8005dc6 <_puts_r+0x42>
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f000 f837 	bl	8005eb0 <__swbuf_r>
 8005e42:	3001      	adds	r0, #1
 8005e44:	d1bf      	bne.n	8005dc6 <_puts_r+0x42>
 8005e46:	e7df      	b.n	8005e08 <_puts_r+0x84>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	250a      	movs	r5, #10
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	6022      	str	r2, [r4, #0]
 8005e50:	701d      	strb	r5, [r3, #0]
 8005e52:	e7db      	b.n	8005e0c <_puts_r+0x88>
 8005e54:	08006f20 	.word	0x08006f20
 8005e58:	08006f40 	.word	0x08006f40
 8005e5c:	08006f00 	.word	0x08006f00

08005e60 <puts>:
 8005e60:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <puts+0xc>)
 8005e62:	4601      	mov	r1, r0
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f7ff bf8d 	b.w	8005d84 <_puts_r>
 8005e6a:	bf00      	nop
 8005e6c:	20000014 	.word	0x20000014

08005e70 <_vsiprintf_r>:
 8005e70:	b500      	push	{lr}
 8005e72:	b09b      	sub	sp, #108	; 0x6c
 8005e74:	9100      	str	r1, [sp, #0]
 8005e76:	9104      	str	r1, [sp, #16]
 8005e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e7c:	9105      	str	r1, [sp, #20]
 8005e7e:	9102      	str	r1, [sp, #8]
 8005e80:	4905      	ldr	r1, [pc, #20]	; (8005e98 <_vsiprintf_r+0x28>)
 8005e82:	9103      	str	r1, [sp, #12]
 8005e84:	4669      	mov	r1, sp
 8005e86:	f000 fc2f 	bl	80066e8 <_svfiprintf_r>
 8005e8a:	9b00      	ldr	r3, [sp, #0]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	b01b      	add	sp, #108	; 0x6c
 8005e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e96:	bf00      	nop
 8005e98:	ffff0208 	.word	0xffff0208

08005e9c <vsiprintf>:
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	460a      	mov	r2, r1
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	4802      	ldr	r0, [pc, #8]	; (8005eac <vsiprintf+0x10>)
 8005ea4:	6800      	ldr	r0, [r0, #0]
 8005ea6:	f7ff bfe3 	b.w	8005e70 <_vsiprintf_r>
 8005eaa:	bf00      	nop
 8005eac:	20000014 	.word	0x20000014

08005eb0 <__swbuf_r>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	460e      	mov	r6, r1
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	b118      	cbz	r0, 8005ec2 <__swbuf_r+0x12>
 8005eba:	6983      	ldr	r3, [r0, #24]
 8005ebc:	b90b      	cbnz	r3, 8005ec2 <__swbuf_r+0x12>
 8005ebe:	f000 f9d1 	bl	8006264 <__sinit>
 8005ec2:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <__swbuf_r+0x98>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	d12b      	bne.n	8005f20 <__swbuf_r+0x70>
 8005ec8:	686c      	ldr	r4, [r5, #4]
 8005eca:	69a3      	ldr	r3, [r4, #24]
 8005ecc:	60a3      	str	r3, [r4, #8]
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	071a      	lsls	r2, r3, #28
 8005ed2:	d52f      	bpl.n	8005f34 <__swbuf_r+0x84>
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	b36b      	cbz	r3, 8005f34 <__swbuf_r+0x84>
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	6820      	ldr	r0, [r4, #0]
 8005edc:	1ac0      	subs	r0, r0, r3
 8005ede:	6963      	ldr	r3, [r4, #20]
 8005ee0:	b2f6      	uxtb	r6, r6
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	4637      	mov	r7, r6
 8005ee6:	dc04      	bgt.n	8005ef2 <__swbuf_r+0x42>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f926 	bl	800613c <_fflush_r>
 8005ef0:	bb30      	cbnz	r0, 8005f40 <__swbuf_r+0x90>
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	60a3      	str	r3, [r4, #8]
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	6022      	str	r2, [r4, #0]
 8005efe:	701e      	strb	r6, [r3, #0]
 8005f00:	6963      	ldr	r3, [r4, #20]
 8005f02:	3001      	adds	r0, #1
 8005f04:	4283      	cmp	r3, r0
 8005f06:	d004      	beq.n	8005f12 <__swbuf_r+0x62>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	07db      	lsls	r3, r3, #31
 8005f0c:	d506      	bpl.n	8005f1c <__swbuf_r+0x6c>
 8005f0e:	2e0a      	cmp	r6, #10
 8005f10:	d104      	bne.n	8005f1c <__swbuf_r+0x6c>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 f911 	bl	800613c <_fflush_r>
 8005f1a:	b988      	cbnz	r0, 8005f40 <__swbuf_r+0x90>
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <__swbuf_r+0x9c>)
 8005f22:	429c      	cmp	r4, r3
 8005f24:	d101      	bne.n	8005f2a <__swbuf_r+0x7a>
 8005f26:	68ac      	ldr	r4, [r5, #8]
 8005f28:	e7cf      	b.n	8005eca <__swbuf_r+0x1a>
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <__swbuf_r+0xa0>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	bf08      	it	eq
 8005f30:	68ec      	ldreq	r4, [r5, #12]
 8005f32:	e7ca      	b.n	8005eca <__swbuf_r+0x1a>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f80c 	bl	8005f54 <__swsetup_r>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d0cb      	beq.n	8005ed8 <__swbuf_r+0x28>
 8005f40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f44:	e7ea      	b.n	8005f1c <__swbuf_r+0x6c>
 8005f46:	bf00      	nop
 8005f48:	08006f20 	.word	0x08006f20
 8005f4c:	08006f40 	.word	0x08006f40
 8005f50:	08006f00 	.word	0x08006f00

08005f54 <__swsetup_r>:
 8005f54:	4b32      	ldr	r3, [pc, #200]	; (8006020 <__swsetup_r+0xcc>)
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	681d      	ldr	r5, [r3, #0]
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	b125      	cbz	r5, 8005f6a <__swsetup_r+0x16>
 8005f60:	69ab      	ldr	r3, [r5, #24]
 8005f62:	b913      	cbnz	r3, 8005f6a <__swsetup_r+0x16>
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 f97d 	bl	8006264 <__sinit>
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <__swsetup_r+0xd0>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d10f      	bne.n	8005f90 <__swsetup_r+0x3c>
 8005f70:	686c      	ldr	r4, [r5, #4]
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f78:	0719      	lsls	r1, r3, #28
 8005f7a:	d42c      	bmi.n	8005fd6 <__swsetup_r+0x82>
 8005f7c:	06dd      	lsls	r5, r3, #27
 8005f7e:	d411      	bmi.n	8005fa4 <__swsetup_r+0x50>
 8005f80:	2309      	movs	r3, #9
 8005f82:	6033      	str	r3, [r6, #0]
 8005f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f8e:	e03e      	b.n	800600e <__swsetup_r+0xba>
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <__swsetup_r+0xd4>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d101      	bne.n	8005f9a <__swsetup_r+0x46>
 8005f96:	68ac      	ldr	r4, [r5, #8]
 8005f98:	e7eb      	b.n	8005f72 <__swsetup_r+0x1e>
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <__swsetup_r+0xd8>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	bf08      	it	eq
 8005fa0:	68ec      	ldreq	r4, [r5, #12]
 8005fa2:	e7e6      	b.n	8005f72 <__swsetup_r+0x1e>
 8005fa4:	0758      	lsls	r0, r3, #29
 8005fa6:	d512      	bpl.n	8005fce <__swsetup_r+0x7a>
 8005fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005faa:	b141      	cbz	r1, 8005fbe <__swsetup_r+0x6a>
 8005fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	d002      	beq.n	8005fba <__swsetup_r+0x66>
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 fa5b 	bl	8006470 <_free_r>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	b94b      	cbnz	r3, 8005fee <__swsetup_r+0x9a>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d003      	beq.n	8005fee <__swsetup_r+0x9a>
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f000 fa01 	bl	80063f0 <__smakebuf_r>
 8005fee:	89a0      	ldrh	r0, [r4, #12]
 8005ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff4:	f010 0301 	ands.w	r3, r0, #1
 8005ff8:	d00a      	beq.n	8006010 <__swsetup_r+0xbc>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60a3      	str	r3, [r4, #8]
 8005ffe:	6963      	ldr	r3, [r4, #20]
 8006000:	425b      	negs	r3, r3
 8006002:	61a3      	str	r3, [r4, #24]
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	b943      	cbnz	r3, 800601a <__swsetup_r+0xc6>
 8006008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800600c:	d1ba      	bne.n	8005f84 <__swsetup_r+0x30>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	0781      	lsls	r1, r0, #30
 8006012:	bf58      	it	pl
 8006014:	6963      	ldrpl	r3, [r4, #20]
 8006016:	60a3      	str	r3, [r4, #8]
 8006018:	e7f4      	b.n	8006004 <__swsetup_r+0xb0>
 800601a:	2000      	movs	r0, #0
 800601c:	e7f7      	b.n	800600e <__swsetup_r+0xba>
 800601e:	bf00      	nop
 8006020:	20000014 	.word	0x20000014
 8006024:	08006f20 	.word	0x08006f20
 8006028:	08006f40 	.word	0x08006f40
 800602c:	08006f00 	.word	0x08006f00

08006030 <__sflush_r>:
 8006030:	898a      	ldrh	r2, [r1, #12]
 8006032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006036:	4605      	mov	r5, r0
 8006038:	0710      	lsls	r0, r2, #28
 800603a:	460c      	mov	r4, r1
 800603c:	d458      	bmi.n	80060f0 <__sflush_r+0xc0>
 800603e:	684b      	ldr	r3, [r1, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	dc05      	bgt.n	8006050 <__sflush_r+0x20>
 8006044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	dc02      	bgt.n	8006050 <__sflush_r+0x20>
 800604a:	2000      	movs	r0, #0
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006052:	2e00      	cmp	r6, #0
 8006054:	d0f9      	beq.n	800604a <__sflush_r+0x1a>
 8006056:	2300      	movs	r3, #0
 8006058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800605c:	682f      	ldr	r7, [r5, #0]
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	d032      	beq.n	80060c8 <__sflush_r+0x98>
 8006062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	075a      	lsls	r2, r3, #29
 8006068:	d505      	bpl.n	8006076 <__sflush_r+0x46>
 800606a:	6863      	ldr	r3, [r4, #4]
 800606c:	1ac0      	subs	r0, r0, r3
 800606e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006070:	b10b      	cbz	r3, 8006076 <__sflush_r+0x46>
 8006072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	2300      	movs	r3, #0
 8006078:	4602      	mov	r2, r0
 800607a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800607c:	6a21      	ldr	r1, [r4, #32]
 800607e:	4628      	mov	r0, r5
 8006080:	47b0      	blx	r6
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	d106      	bne.n	8006096 <__sflush_r+0x66>
 8006088:	6829      	ldr	r1, [r5, #0]
 800608a:	291d      	cmp	r1, #29
 800608c:	d82c      	bhi.n	80060e8 <__sflush_r+0xb8>
 800608e:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <__sflush_r+0x108>)
 8006090:	40ca      	lsrs	r2, r1
 8006092:	07d6      	lsls	r6, r2, #31
 8006094:	d528      	bpl.n	80060e8 <__sflush_r+0xb8>
 8006096:	2200      	movs	r2, #0
 8006098:	6062      	str	r2, [r4, #4]
 800609a:	04d9      	lsls	r1, r3, #19
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	d504      	bpl.n	80060ac <__sflush_r+0x7c>
 80060a2:	1c42      	adds	r2, r0, #1
 80060a4:	d101      	bne.n	80060aa <__sflush_r+0x7a>
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	b903      	cbnz	r3, 80060ac <__sflush_r+0x7c>
 80060aa:	6560      	str	r0, [r4, #84]	; 0x54
 80060ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ae:	602f      	str	r7, [r5, #0]
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d0ca      	beq.n	800604a <__sflush_r+0x1a>
 80060b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <__sflush_r+0x92>
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 f9d7 	bl	8006470 <_free_r>
 80060c2:	2000      	movs	r0, #0
 80060c4:	6360      	str	r0, [r4, #52]	; 0x34
 80060c6:	e7c1      	b.n	800604c <__sflush_r+0x1c>
 80060c8:	6a21      	ldr	r1, [r4, #32]
 80060ca:	2301      	movs	r3, #1
 80060cc:	4628      	mov	r0, r5
 80060ce:	47b0      	blx	r6
 80060d0:	1c41      	adds	r1, r0, #1
 80060d2:	d1c7      	bne.n	8006064 <__sflush_r+0x34>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0c4      	beq.n	8006064 <__sflush_r+0x34>
 80060da:	2b1d      	cmp	r3, #29
 80060dc:	d001      	beq.n	80060e2 <__sflush_r+0xb2>
 80060de:	2b16      	cmp	r3, #22
 80060e0:	d101      	bne.n	80060e6 <__sflush_r+0xb6>
 80060e2:	602f      	str	r7, [r5, #0]
 80060e4:	e7b1      	b.n	800604a <__sflush_r+0x1a>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	e7ad      	b.n	800604c <__sflush_r+0x1c>
 80060f0:	690f      	ldr	r7, [r1, #16]
 80060f2:	2f00      	cmp	r7, #0
 80060f4:	d0a9      	beq.n	800604a <__sflush_r+0x1a>
 80060f6:	0793      	lsls	r3, r2, #30
 80060f8:	680e      	ldr	r6, [r1, #0]
 80060fa:	bf08      	it	eq
 80060fc:	694b      	ldreq	r3, [r1, #20]
 80060fe:	600f      	str	r7, [r1, #0]
 8006100:	bf18      	it	ne
 8006102:	2300      	movne	r3, #0
 8006104:	eba6 0807 	sub.w	r8, r6, r7
 8006108:	608b      	str	r3, [r1, #8]
 800610a:	f1b8 0f00 	cmp.w	r8, #0
 800610e:	dd9c      	ble.n	800604a <__sflush_r+0x1a>
 8006110:	6a21      	ldr	r1, [r4, #32]
 8006112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006114:	4643      	mov	r3, r8
 8006116:	463a      	mov	r2, r7
 8006118:	4628      	mov	r0, r5
 800611a:	47b0      	blx	r6
 800611c:	2800      	cmp	r0, #0
 800611e:	dc06      	bgt.n	800612e <__sflush_r+0xfe>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800612c:	e78e      	b.n	800604c <__sflush_r+0x1c>
 800612e:	4407      	add	r7, r0
 8006130:	eba8 0800 	sub.w	r8, r8, r0
 8006134:	e7e9      	b.n	800610a <__sflush_r+0xda>
 8006136:	bf00      	nop
 8006138:	20400001 	.word	0x20400001

0800613c <_fflush_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	690b      	ldr	r3, [r1, #16]
 8006140:	4605      	mov	r5, r0
 8006142:	460c      	mov	r4, r1
 8006144:	b913      	cbnz	r3, 800614c <_fflush_r+0x10>
 8006146:	2500      	movs	r5, #0
 8006148:	4628      	mov	r0, r5
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	b118      	cbz	r0, 8006156 <_fflush_r+0x1a>
 800614e:	6983      	ldr	r3, [r0, #24]
 8006150:	b90b      	cbnz	r3, 8006156 <_fflush_r+0x1a>
 8006152:	f000 f887 	bl	8006264 <__sinit>
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <_fflush_r+0x6c>)
 8006158:	429c      	cmp	r4, r3
 800615a:	d11b      	bne.n	8006194 <_fflush_r+0x58>
 800615c:	686c      	ldr	r4, [r5, #4]
 800615e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0ef      	beq.n	8006146 <_fflush_r+0xa>
 8006166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006168:	07d0      	lsls	r0, r2, #31
 800616a:	d404      	bmi.n	8006176 <_fflush_r+0x3a>
 800616c:	0599      	lsls	r1, r3, #22
 800616e:	d402      	bmi.n	8006176 <_fflush_r+0x3a>
 8006170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006172:	f000 f915 	bl	80063a0 <__retarget_lock_acquire_recursive>
 8006176:	4628      	mov	r0, r5
 8006178:	4621      	mov	r1, r4
 800617a:	f7ff ff59 	bl	8006030 <__sflush_r>
 800617e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006180:	07da      	lsls	r2, r3, #31
 8006182:	4605      	mov	r5, r0
 8006184:	d4e0      	bmi.n	8006148 <_fflush_r+0xc>
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	059b      	lsls	r3, r3, #22
 800618a:	d4dd      	bmi.n	8006148 <_fflush_r+0xc>
 800618c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800618e:	f000 f908 	bl	80063a2 <__retarget_lock_release_recursive>
 8006192:	e7d9      	b.n	8006148 <_fflush_r+0xc>
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <_fflush_r+0x70>)
 8006196:	429c      	cmp	r4, r3
 8006198:	d101      	bne.n	800619e <_fflush_r+0x62>
 800619a:	68ac      	ldr	r4, [r5, #8]
 800619c:	e7df      	b.n	800615e <_fflush_r+0x22>
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <_fflush_r+0x74>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	bf08      	it	eq
 80061a4:	68ec      	ldreq	r4, [r5, #12]
 80061a6:	e7da      	b.n	800615e <_fflush_r+0x22>
 80061a8:	08006f20 	.word	0x08006f20
 80061ac:	08006f40 	.word	0x08006f40
 80061b0:	08006f00 	.word	0x08006f00

080061b4 <std>:
 80061b4:	2300      	movs	r3, #0
 80061b6:	b510      	push	{r4, lr}
 80061b8:	4604      	mov	r4, r0
 80061ba:	e9c0 3300 	strd	r3, r3, [r0]
 80061be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061c2:	6083      	str	r3, [r0, #8]
 80061c4:	8181      	strh	r1, [r0, #12]
 80061c6:	6643      	str	r3, [r0, #100]	; 0x64
 80061c8:	81c2      	strh	r2, [r0, #14]
 80061ca:	6183      	str	r3, [r0, #24]
 80061cc:	4619      	mov	r1, r3
 80061ce:	2208      	movs	r2, #8
 80061d0:	305c      	adds	r0, #92	; 0x5c
 80061d2:	f7ff fdcf 	bl	8005d74 <memset>
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <std+0x38>)
 80061d8:	6263      	str	r3, [r4, #36]	; 0x24
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <std+0x3c>)
 80061dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x40>)
 80061e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x44>)
 80061e4:	6224      	str	r4, [r4, #32]
 80061e6:	6323      	str	r3, [r4, #48]	; 0x30
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	bf00      	nop
 80061ec:	08006c31 	.word	0x08006c31
 80061f0:	08006c53 	.word	0x08006c53
 80061f4:	08006c8b 	.word	0x08006c8b
 80061f8:	08006caf 	.word	0x08006caf

080061fc <_cleanup_r>:
 80061fc:	4901      	ldr	r1, [pc, #4]	; (8006204 <_cleanup_r+0x8>)
 80061fe:	f000 b8af 	b.w	8006360 <_fwalk_reent>
 8006202:	bf00      	nop
 8006204:	0800613d 	.word	0x0800613d

08006208 <__sfmoreglue>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	2268      	movs	r2, #104	; 0x68
 800620c:	1e4d      	subs	r5, r1, #1
 800620e:	4355      	muls	r5, r2
 8006210:	460e      	mov	r6, r1
 8006212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006216:	f000 f997 	bl	8006548 <_malloc_r>
 800621a:	4604      	mov	r4, r0
 800621c:	b140      	cbz	r0, 8006230 <__sfmoreglue+0x28>
 800621e:	2100      	movs	r1, #0
 8006220:	e9c0 1600 	strd	r1, r6, [r0]
 8006224:	300c      	adds	r0, #12
 8006226:	60a0      	str	r0, [r4, #8]
 8006228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800622c:	f7ff fda2 	bl	8005d74 <memset>
 8006230:	4620      	mov	r0, r4
 8006232:	bd70      	pop	{r4, r5, r6, pc}

08006234 <__sfp_lock_acquire>:
 8006234:	4801      	ldr	r0, [pc, #4]	; (800623c <__sfp_lock_acquire+0x8>)
 8006236:	f000 b8b3 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	20012f71 	.word	0x20012f71

08006240 <__sfp_lock_release>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__sfp_lock_release+0x8>)
 8006242:	f000 b8ae 	b.w	80063a2 <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	20012f71 	.word	0x20012f71

0800624c <__sinit_lock_acquire>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__sinit_lock_acquire+0x8>)
 800624e:	f000 b8a7 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 8006252:	bf00      	nop
 8006254:	20012f72 	.word	0x20012f72

08006258 <__sinit_lock_release>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__sinit_lock_release+0x8>)
 800625a:	f000 b8a2 	b.w	80063a2 <__retarget_lock_release_recursive>
 800625e:	bf00      	nop
 8006260:	20012f72 	.word	0x20012f72

08006264 <__sinit>:
 8006264:	b510      	push	{r4, lr}
 8006266:	4604      	mov	r4, r0
 8006268:	f7ff fff0 	bl	800624c <__sinit_lock_acquire>
 800626c:	69a3      	ldr	r3, [r4, #24]
 800626e:	b11b      	cbz	r3, 8006278 <__sinit+0x14>
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	f7ff bff0 	b.w	8006258 <__sinit_lock_release>
 8006278:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800627c:	6523      	str	r3, [r4, #80]	; 0x50
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <__sinit+0x68>)
 8006280:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <__sinit+0x6c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	62a2      	str	r2, [r4, #40]	; 0x28
 8006286:	42a3      	cmp	r3, r4
 8006288:	bf04      	itt	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	61a3      	streq	r3, [r4, #24]
 800628e:	4620      	mov	r0, r4
 8006290:	f000 f820 	bl	80062d4 <__sfp>
 8006294:	6060      	str	r0, [r4, #4]
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f81c 	bl	80062d4 <__sfp>
 800629c:	60a0      	str	r0, [r4, #8]
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f818 	bl	80062d4 <__sfp>
 80062a4:	2200      	movs	r2, #0
 80062a6:	60e0      	str	r0, [r4, #12]
 80062a8:	2104      	movs	r1, #4
 80062aa:	6860      	ldr	r0, [r4, #4]
 80062ac:	f7ff ff82 	bl	80061b4 <std>
 80062b0:	68a0      	ldr	r0, [r4, #8]
 80062b2:	2201      	movs	r2, #1
 80062b4:	2109      	movs	r1, #9
 80062b6:	f7ff ff7d 	bl	80061b4 <std>
 80062ba:	68e0      	ldr	r0, [r4, #12]
 80062bc:	2202      	movs	r2, #2
 80062be:	2112      	movs	r1, #18
 80062c0:	f7ff ff78 	bl	80061b4 <std>
 80062c4:	2301      	movs	r3, #1
 80062c6:	61a3      	str	r3, [r4, #24]
 80062c8:	e7d2      	b.n	8006270 <__sinit+0xc>
 80062ca:	bf00      	nop
 80062cc:	08006efc 	.word	0x08006efc
 80062d0:	080061fd 	.word	0x080061fd

080062d4 <__sfp>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	4607      	mov	r7, r0
 80062d8:	f7ff ffac 	bl	8006234 <__sfp_lock_acquire>
 80062dc:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <__sfp+0x84>)
 80062de:	681e      	ldr	r6, [r3, #0]
 80062e0:	69b3      	ldr	r3, [r6, #24]
 80062e2:	b913      	cbnz	r3, 80062ea <__sfp+0x16>
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ffbd 	bl	8006264 <__sinit>
 80062ea:	3648      	adds	r6, #72	; 0x48
 80062ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	d503      	bpl.n	80062fc <__sfp+0x28>
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	b30b      	cbz	r3, 800633c <__sfp+0x68>
 80062f8:	6836      	ldr	r6, [r6, #0]
 80062fa:	e7f7      	b.n	80062ec <__sfp+0x18>
 80062fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006300:	b9d5      	cbnz	r5, 8006338 <__sfp+0x64>
 8006302:	4b16      	ldr	r3, [pc, #88]	; (800635c <__sfp+0x88>)
 8006304:	60e3      	str	r3, [r4, #12]
 8006306:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800630a:	6665      	str	r5, [r4, #100]	; 0x64
 800630c:	f000 f847 	bl	800639e <__retarget_lock_init_recursive>
 8006310:	f7ff ff96 	bl	8006240 <__sfp_lock_release>
 8006314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800631c:	6025      	str	r5, [r4, #0]
 800631e:	61a5      	str	r5, [r4, #24]
 8006320:	2208      	movs	r2, #8
 8006322:	4629      	mov	r1, r5
 8006324:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006328:	f7ff fd24 	bl	8005d74 <memset>
 800632c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006330:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006334:	4620      	mov	r0, r4
 8006336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006338:	3468      	adds	r4, #104	; 0x68
 800633a:	e7d9      	b.n	80062f0 <__sfp+0x1c>
 800633c:	2104      	movs	r1, #4
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ff62 	bl	8006208 <__sfmoreglue>
 8006344:	4604      	mov	r4, r0
 8006346:	6030      	str	r0, [r6, #0]
 8006348:	2800      	cmp	r0, #0
 800634a:	d1d5      	bne.n	80062f8 <__sfp+0x24>
 800634c:	f7ff ff78 	bl	8006240 <__sfp_lock_release>
 8006350:	230c      	movs	r3, #12
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	e7ee      	b.n	8006334 <__sfp+0x60>
 8006356:	bf00      	nop
 8006358:	08006efc 	.word	0x08006efc
 800635c:	ffff0001 	.word	0xffff0001

08006360 <_fwalk_reent>:
 8006360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006364:	4606      	mov	r6, r0
 8006366:	4688      	mov	r8, r1
 8006368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800636c:	2700      	movs	r7, #0
 800636e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006372:	f1b9 0901 	subs.w	r9, r9, #1
 8006376:	d505      	bpl.n	8006384 <_fwalk_reent+0x24>
 8006378:	6824      	ldr	r4, [r4, #0]
 800637a:	2c00      	cmp	r4, #0
 800637c:	d1f7      	bne.n	800636e <_fwalk_reent+0xe>
 800637e:	4638      	mov	r0, r7
 8006380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006384:	89ab      	ldrh	r3, [r5, #12]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d907      	bls.n	800639a <_fwalk_reent+0x3a>
 800638a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800638e:	3301      	adds	r3, #1
 8006390:	d003      	beq.n	800639a <_fwalk_reent+0x3a>
 8006392:	4629      	mov	r1, r5
 8006394:	4630      	mov	r0, r6
 8006396:	47c0      	blx	r8
 8006398:	4307      	orrs	r7, r0
 800639a:	3568      	adds	r5, #104	; 0x68
 800639c:	e7e9      	b.n	8006372 <_fwalk_reent+0x12>

0800639e <__retarget_lock_init_recursive>:
 800639e:	4770      	bx	lr

080063a0 <__retarget_lock_acquire_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <__retarget_lock_release_recursive>:
 80063a2:	4770      	bx	lr

080063a4 <__swhatbuf_r>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	460e      	mov	r6, r1
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	2900      	cmp	r1, #0
 80063ae:	b096      	sub	sp, #88	; 0x58
 80063b0:	4614      	mov	r4, r2
 80063b2:	461d      	mov	r5, r3
 80063b4:	da08      	bge.n	80063c8 <__swhatbuf_r+0x24>
 80063b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	602a      	str	r2, [r5, #0]
 80063be:	061a      	lsls	r2, r3, #24
 80063c0:	d410      	bmi.n	80063e4 <__swhatbuf_r+0x40>
 80063c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063c6:	e00e      	b.n	80063e6 <__swhatbuf_r+0x42>
 80063c8:	466a      	mov	r2, sp
 80063ca:	f000 fc97 	bl	8006cfc <_fstat_r>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	dbf1      	blt.n	80063b6 <__swhatbuf_r+0x12>
 80063d2:	9a01      	ldr	r2, [sp, #4]
 80063d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063dc:	425a      	negs	r2, r3
 80063de:	415a      	adcs	r2, r3
 80063e0:	602a      	str	r2, [r5, #0]
 80063e2:	e7ee      	b.n	80063c2 <__swhatbuf_r+0x1e>
 80063e4:	2340      	movs	r3, #64	; 0x40
 80063e6:	2000      	movs	r0, #0
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	b016      	add	sp, #88	; 0x58
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080063f0 <__smakebuf_r>:
 80063f0:	898b      	ldrh	r3, [r1, #12]
 80063f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063f4:	079d      	lsls	r5, r3, #30
 80063f6:	4606      	mov	r6, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	d507      	bpl.n	800640c <__smakebuf_r+0x1c>
 80063fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	2301      	movs	r3, #1
 8006406:	6163      	str	r3, [r4, #20]
 8006408:	b002      	add	sp, #8
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	ab01      	add	r3, sp, #4
 800640e:	466a      	mov	r2, sp
 8006410:	f7ff ffc8 	bl	80063a4 <__swhatbuf_r>
 8006414:	9900      	ldr	r1, [sp, #0]
 8006416:	4605      	mov	r5, r0
 8006418:	4630      	mov	r0, r6
 800641a:	f000 f895 	bl	8006548 <_malloc_r>
 800641e:	b948      	cbnz	r0, 8006434 <__smakebuf_r+0x44>
 8006420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006424:	059a      	lsls	r2, r3, #22
 8006426:	d4ef      	bmi.n	8006408 <__smakebuf_r+0x18>
 8006428:	f023 0303 	bic.w	r3, r3, #3
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	e7e3      	b.n	80063fc <__smakebuf_r+0xc>
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <__smakebuf_r+0x7c>)
 8006436:	62b3      	str	r3, [r6, #40]	; 0x28
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	6020      	str	r0, [r4, #0]
 800643c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	9b00      	ldr	r3, [sp, #0]
 8006444:	6163      	str	r3, [r4, #20]
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	6120      	str	r0, [r4, #16]
 800644a:	b15b      	cbz	r3, 8006464 <__smakebuf_r+0x74>
 800644c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006450:	4630      	mov	r0, r6
 8006452:	f000 fc65 	bl	8006d20 <_isatty_r>
 8006456:	b128      	cbz	r0, 8006464 <__smakebuf_r+0x74>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	81a3      	strh	r3, [r4, #12]
 8006464:	89a0      	ldrh	r0, [r4, #12]
 8006466:	4305      	orrs	r5, r0
 8006468:	81a5      	strh	r5, [r4, #12]
 800646a:	e7cd      	b.n	8006408 <__smakebuf_r+0x18>
 800646c:	080061fd 	.word	0x080061fd

08006470 <_free_r>:
 8006470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006472:	2900      	cmp	r1, #0
 8006474:	d044      	beq.n	8006500 <_free_r+0x90>
 8006476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800647a:	9001      	str	r0, [sp, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f1a1 0404 	sub.w	r4, r1, #4
 8006482:	bfb8      	it	lt
 8006484:	18e4      	addlt	r4, r4, r3
 8006486:	f000 fc87 	bl	8006d98 <__malloc_lock>
 800648a:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <_free_r+0x94>)
 800648c:	9801      	ldr	r0, [sp, #4]
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	b933      	cbnz	r3, 80064a0 <_free_r+0x30>
 8006492:	6063      	str	r3, [r4, #4]
 8006494:	6014      	str	r4, [r2, #0]
 8006496:	b003      	add	sp, #12
 8006498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800649c:	f000 bc82 	b.w	8006da4 <__malloc_unlock>
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d908      	bls.n	80064b6 <_free_r+0x46>
 80064a4:	6825      	ldr	r5, [r4, #0]
 80064a6:	1961      	adds	r1, r4, r5
 80064a8:	428b      	cmp	r3, r1
 80064aa:	bf01      	itttt	eq
 80064ac:	6819      	ldreq	r1, [r3, #0]
 80064ae:	685b      	ldreq	r3, [r3, #4]
 80064b0:	1949      	addeq	r1, r1, r5
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	e7ed      	b.n	8006492 <_free_r+0x22>
 80064b6:	461a      	mov	r2, r3
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	b10b      	cbz	r3, 80064c0 <_free_r+0x50>
 80064bc:	42a3      	cmp	r3, r4
 80064be:	d9fa      	bls.n	80064b6 <_free_r+0x46>
 80064c0:	6811      	ldr	r1, [r2, #0]
 80064c2:	1855      	adds	r5, r2, r1
 80064c4:	42a5      	cmp	r5, r4
 80064c6:	d10b      	bne.n	80064e0 <_free_r+0x70>
 80064c8:	6824      	ldr	r4, [r4, #0]
 80064ca:	4421      	add	r1, r4
 80064cc:	1854      	adds	r4, r2, r1
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	6011      	str	r1, [r2, #0]
 80064d2:	d1e0      	bne.n	8006496 <_free_r+0x26>
 80064d4:	681c      	ldr	r4, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	6053      	str	r3, [r2, #4]
 80064da:	4421      	add	r1, r4
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	e7da      	b.n	8006496 <_free_r+0x26>
 80064e0:	d902      	bls.n	80064e8 <_free_r+0x78>
 80064e2:	230c      	movs	r3, #12
 80064e4:	6003      	str	r3, [r0, #0]
 80064e6:	e7d6      	b.n	8006496 <_free_r+0x26>
 80064e8:	6825      	ldr	r5, [r4, #0]
 80064ea:	1961      	adds	r1, r4, r5
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf04      	itt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	bf04      	itt	eq
 80064f8:	1949      	addeq	r1, r1, r5
 80064fa:	6021      	streq	r1, [r4, #0]
 80064fc:	6054      	str	r4, [r2, #4]
 80064fe:	e7ca      	b.n	8006496 <_free_r+0x26>
 8006500:	b003      	add	sp, #12
 8006502:	bd30      	pop	{r4, r5, pc}
 8006504:	20012f74 	.word	0x20012f74

08006508 <sbrk_aligned>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4e0e      	ldr	r6, [pc, #56]	; (8006544 <sbrk_aligned+0x3c>)
 800650c:	460c      	mov	r4, r1
 800650e:	6831      	ldr	r1, [r6, #0]
 8006510:	4605      	mov	r5, r0
 8006512:	b911      	cbnz	r1, 800651a <sbrk_aligned+0x12>
 8006514:	f000 fb7c 	bl	8006c10 <_sbrk_r>
 8006518:	6030      	str	r0, [r6, #0]
 800651a:	4621      	mov	r1, r4
 800651c:	4628      	mov	r0, r5
 800651e:	f000 fb77 	bl	8006c10 <_sbrk_r>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d00a      	beq.n	800653c <sbrk_aligned+0x34>
 8006526:	1cc4      	adds	r4, r0, #3
 8006528:	f024 0403 	bic.w	r4, r4, #3
 800652c:	42a0      	cmp	r0, r4
 800652e:	d007      	beq.n	8006540 <sbrk_aligned+0x38>
 8006530:	1a21      	subs	r1, r4, r0
 8006532:	4628      	mov	r0, r5
 8006534:	f000 fb6c 	bl	8006c10 <_sbrk_r>
 8006538:	3001      	adds	r0, #1
 800653a:	d101      	bne.n	8006540 <sbrk_aligned+0x38>
 800653c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006540:	4620      	mov	r0, r4
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	20012f78 	.word	0x20012f78

08006548 <_malloc_r>:
 8006548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654c:	1ccd      	adds	r5, r1, #3
 800654e:	f025 0503 	bic.w	r5, r5, #3
 8006552:	3508      	adds	r5, #8
 8006554:	2d0c      	cmp	r5, #12
 8006556:	bf38      	it	cc
 8006558:	250c      	movcc	r5, #12
 800655a:	2d00      	cmp	r5, #0
 800655c:	4607      	mov	r7, r0
 800655e:	db01      	blt.n	8006564 <_malloc_r+0x1c>
 8006560:	42a9      	cmp	r1, r5
 8006562:	d905      	bls.n	8006570 <_malloc_r+0x28>
 8006564:	230c      	movs	r3, #12
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	2600      	movs	r6, #0
 800656a:	4630      	mov	r0, r6
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	4e2e      	ldr	r6, [pc, #184]	; (800662c <_malloc_r+0xe4>)
 8006572:	f000 fc11 	bl	8006d98 <__malloc_lock>
 8006576:	6833      	ldr	r3, [r6, #0]
 8006578:	461c      	mov	r4, r3
 800657a:	bb34      	cbnz	r4, 80065ca <_malloc_r+0x82>
 800657c:	4629      	mov	r1, r5
 800657e:	4638      	mov	r0, r7
 8006580:	f7ff ffc2 	bl	8006508 <sbrk_aligned>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	4604      	mov	r4, r0
 8006588:	d14d      	bne.n	8006626 <_malloc_r+0xde>
 800658a:	6834      	ldr	r4, [r6, #0]
 800658c:	4626      	mov	r6, r4
 800658e:	2e00      	cmp	r6, #0
 8006590:	d140      	bne.n	8006614 <_malloc_r+0xcc>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	4631      	mov	r1, r6
 8006596:	4638      	mov	r0, r7
 8006598:	eb04 0803 	add.w	r8, r4, r3
 800659c:	f000 fb38 	bl	8006c10 <_sbrk_r>
 80065a0:	4580      	cmp	r8, r0
 80065a2:	d13a      	bne.n	800661a <_malloc_r+0xd2>
 80065a4:	6821      	ldr	r1, [r4, #0]
 80065a6:	3503      	adds	r5, #3
 80065a8:	1a6d      	subs	r5, r5, r1
 80065aa:	f025 0503 	bic.w	r5, r5, #3
 80065ae:	3508      	adds	r5, #8
 80065b0:	2d0c      	cmp	r5, #12
 80065b2:	bf38      	it	cc
 80065b4:	250c      	movcc	r5, #12
 80065b6:	4629      	mov	r1, r5
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff ffa5 	bl	8006508 <sbrk_aligned>
 80065be:	3001      	adds	r0, #1
 80065c0:	d02b      	beq.n	800661a <_malloc_r+0xd2>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	442b      	add	r3, r5
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	e00e      	b.n	80065e8 <_malloc_r+0xa0>
 80065ca:	6822      	ldr	r2, [r4, #0]
 80065cc:	1b52      	subs	r2, r2, r5
 80065ce:	d41e      	bmi.n	800660e <_malloc_r+0xc6>
 80065d0:	2a0b      	cmp	r2, #11
 80065d2:	d916      	bls.n	8006602 <_malloc_r+0xba>
 80065d4:	1961      	adds	r1, r4, r5
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	6025      	str	r5, [r4, #0]
 80065da:	bf18      	it	ne
 80065dc:	6059      	strne	r1, [r3, #4]
 80065de:	6863      	ldr	r3, [r4, #4]
 80065e0:	bf08      	it	eq
 80065e2:	6031      	streq	r1, [r6, #0]
 80065e4:	5162      	str	r2, [r4, r5]
 80065e6:	604b      	str	r3, [r1, #4]
 80065e8:	4638      	mov	r0, r7
 80065ea:	f104 060b 	add.w	r6, r4, #11
 80065ee:	f000 fbd9 	bl	8006da4 <__malloc_unlock>
 80065f2:	f026 0607 	bic.w	r6, r6, #7
 80065f6:	1d23      	adds	r3, r4, #4
 80065f8:	1af2      	subs	r2, r6, r3
 80065fa:	d0b6      	beq.n	800656a <_malloc_r+0x22>
 80065fc:	1b9b      	subs	r3, r3, r6
 80065fe:	50a3      	str	r3, [r4, r2]
 8006600:	e7b3      	b.n	800656a <_malloc_r+0x22>
 8006602:	6862      	ldr	r2, [r4, #4]
 8006604:	42a3      	cmp	r3, r4
 8006606:	bf0c      	ite	eq
 8006608:	6032      	streq	r2, [r6, #0]
 800660a:	605a      	strne	r2, [r3, #4]
 800660c:	e7ec      	b.n	80065e8 <_malloc_r+0xa0>
 800660e:	4623      	mov	r3, r4
 8006610:	6864      	ldr	r4, [r4, #4]
 8006612:	e7b2      	b.n	800657a <_malloc_r+0x32>
 8006614:	4634      	mov	r4, r6
 8006616:	6876      	ldr	r6, [r6, #4]
 8006618:	e7b9      	b.n	800658e <_malloc_r+0x46>
 800661a:	230c      	movs	r3, #12
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4638      	mov	r0, r7
 8006620:	f000 fbc0 	bl	8006da4 <__malloc_unlock>
 8006624:	e7a1      	b.n	800656a <_malloc_r+0x22>
 8006626:	6025      	str	r5, [r4, #0]
 8006628:	e7de      	b.n	80065e8 <_malloc_r+0xa0>
 800662a:	bf00      	nop
 800662c:	20012f74 	.word	0x20012f74

08006630 <__ssputs_r>:
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	688e      	ldr	r6, [r1, #8]
 8006636:	429e      	cmp	r6, r3
 8006638:	4682      	mov	sl, r0
 800663a:	460c      	mov	r4, r1
 800663c:	4690      	mov	r8, r2
 800663e:	461f      	mov	r7, r3
 8006640:	d838      	bhi.n	80066b4 <__ssputs_r+0x84>
 8006642:	898a      	ldrh	r2, [r1, #12]
 8006644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006648:	d032      	beq.n	80066b0 <__ssputs_r+0x80>
 800664a:	6825      	ldr	r5, [r4, #0]
 800664c:	6909      	ldr	r1, [r1, #16]
 800664e:	eba5 0901 	sub.w	r9, r5, r1
 8006652:	6965      	ldr	r5, [r4, #20]
 8006654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800665c:	3301      	adds	r3, #1
 800665e:	444b      	add	r3, r9
 8006660:	106d      	asrs	r5, r5, #1
 8006662:	429d      	cmp	r5, r3
 8006664:	bf38      	it	cc
 8006666:	461d      	movcc	r5, r3
 8006668:	0553      	lsls	r3, r2, #21
 800666a:	d531      	bpl.n	80066d0 <__ssputs_r+0xa0>
 800666c:	4629      	mov	r1, r5
 800666e:	f7ff ff6b 	bl	8006548 <_malloc_r>
 8006672:	4606      	mov	r6, r0
 8006674:	b950      	cbnz	r0, 800668c <__ssputs_r+0x5c>
 8006676:	230c      	movs	r3, #12
 8006678:	f8ca 3000 	str.w	r3, [sl]
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006682:	81a3      	strh	r3, [r4, #12]
 8006684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668c:	6921      	ldr	r1, [r4, #16]
 800668e:	464a      	mov	r2, r9
 8006690:	f7ff fb62 	bl	8005d58 <memcpy>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800669a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	6126      	str	r6, [r4, #16]
 80066a2:	6165      	str	r5, [r4, #20]
 80066a4:	444e      	add	r6, r9
 80066a6:	eba5 0509 	sub.w	r5, r5, r9
 80066aa:	6026      	str	r6, [r4, #0]
 80066ac:	60a5      	str	r5, [r4, #8]
 80066ae:	463e      	mov	r6, r7
 80066b0:	42be      	cmp	r6, r7
 80066b2:	d900      	bls.n	80066b6 <__ssputs_r+0x86>
 80066b4:	463e      	mov	r6, r7
 80066b6:	6820      	ldr	r0, [r4, #0]
 80066b8:	4632      	mov	r2, r6
 80066ba:	4641      	mov	r1, r8
 80066bc:	f000 fb52 	bl	8006d64 <memmove>
 80066c0:	68a3      	ldr	r3, [r4, #8]
 80066c2:	1b9b      	subs	r3, r3, r6
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	4433      	add	r3, r6
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	2000      	movs	r0, #0
 80066ce:	e7db      	b.n	8006688 <__ssputs_r+0x58>
 80066d0:	462a      	mov	r2, r5
 80066d2:	f000 fb6d 	bl	8006db0 <_realloc_r>
 80066d6:	4606      	mov	r6, r0
 80066d8:	2800      	cmp	r0, #0
 80066da:	d1e1      	bne.n	80066a0 <__ssputs_r+0x70>
 80066dc:	6921      	ldr	r1, [r4, #16]
 80066de:	4650      	mov	r0, sl
 80066e0:	f7ff fec6 	bl	8006470 <_free_r>
 80066e4:	e7c7      	b.n	8006676 <__ssputs_r+0x46>
	...

080066e8 <_svfiprintf_r>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4698      	mov	r8, r3
 80066ee:	898b      	ldrh	r3, [r1, #12]
 80066f0:	061b      	lsls	r3, r3, #24
 80066f2:	b09d      	sub	sp, #116	; 0x74
 80066f4:	4607      	mov	r7, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	d50e      	bpl.n	800671a <_svfiprintf_r+0x32>
 80066fc:	690b      	ldr	r3, [r1, #16]
 80066fe:	b963      	cbnz	r3, 800671a <_svfiprintf_r+0x32>
 8006700:	2140      	movs	r1, #64	; 0x40
 8006702:	f7ff ff21 	bl	8006548 <_malloc_r>
 8006706:	6028      	str	r0, [r5, #0]
 8006708:	6128      	str	r0, [r5, #16]
 800670a:	b920      	cbnz	r0, 8006716 <_svfiprintf_r+0x2e>
 800670c:	230c      	movs	r3, #12
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006714:	e0d1      	b.n	80068ba <_svfiprintf_r+0x1d2>
 8006716:	2340      	movs	r3, #64	; 0x40
 8006718:	616b      	str	r3, [r5, #20]
 800671a:	2300      	movs	r3, #0
 800671c:	9309      	str	r3, [sp, #36]	; 0x24
 800671e:	2320      	movs	r3, #32
 8006720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006724:	f8cd 800c 	str.w	r8, [sp, #12]
 8006728:	2330      	movs	r3, #48	; 0x30
 800672a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068d4 <_svfiprintf_r+0x1ec>
 800672e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006732:	f04f 0901 	mov.w	r9, #1
 8006736:	4623      	mov	r3, r4
 8006738:	469a      	mov	sl, r3
 800673a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800673e:	b10a      	cbz	r2, 8006744 <_svfiprintf_r+0x5c>
 8006740:	2a25      	cmp	r2, #37	; 0x25
 8006742:	d1f9      	bne.n	8006738 <_svfiprintf_r+0x50>
 8006744:	ebba 0b04 	subs.w	fp, sl, r4
 8006748:	d00b      	beq.n	8006762 <_svfiprintf_r+0x7a>
 800674a:	465b      	mov	r3, fp
 800674c:	4622      	mov	r2, r4
 800674e:	4629      	mov	r1, r5
 8006750:	4638      	mov	r0, r7
 8006752:	f7ff ff6d 	bl	8006630 <__ssputs_r>
 8006756:	3001      	adds	r0, #1
 8006758:	f000 80aa 	beq.w	80068b0 <_svfiprintf_r+0x1c8>
 800675c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800675e:	445a      	add	r2, fp
 8006760:	9209      	str	r2, [sp, #36]	; 0x24
 8006762:	f89a 3000 	ldrb.w	r3, [sl]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80a2 	beq.w	80068b0 <_svfiprintf_r+0x1c8>
 800676c:	2300      	movs	r3, #0
 800676e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006776:	f10a 0a01 	add.w	sl, sl, #1
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	9307      	str	r3, [sp, #28]
 800677e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006782:	931a      	str	r3, [sp, #104]	; 0x68
 8006784:	4654      	mov	r4, sl
 8006786:	2205      	movs	r2, #5
 8006788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800678c:	4851      	ldr	r0, [pc, #324]	; (80068d4 <_svfiprintf_r+0x1ec>)
 800678e:	f7f9 fd37 	bl	8000200 <memchr>
 8006792:	9a04      	ldr	r2, [sp, #16]
 8006794:	b9d8      	cbnz	r0, 80067ce <_svfiprintf_r+0xe6>
 8006796:	06d0      	lsls	r0, r2, #27
 8006798:	bf44      	itt	mi
 800679a:	2320      	movmi	r3, #32
 800679c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067a0:	0711      	lsls	r1, r2, #28
 80067a2:	bf44      	itt	mi
 80067a4:	232b      	movmi	r3, #43	; 0x2b
 80067a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067aa:	f89a 3000 	ldrb.w	r3, [sl]
 80067ae:	2b2a      	cmp	r3, #42	; 0x2a
 80067b0:	d015      	beq.n	80067de <_svfiprintf_r+0xf6>
 80067b2:	9a07      	ldr	r2, [sp, #28]
 80067b4:	4654      	mov	r4, sl
 80067b6:	2000      	movs	r0, #0
 80067b8:	f04f 0c0a 	mov.w	ip, #10
 80067bc:	4621      	mov	r1, r4
 80067be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067c2:	3b30      	subs	r3, #48	; 0x30
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d94e      	bls.n	8006866 <_svfiprintf_r+0x17e>
 80067c8:	b1b0      	cbz	r0, 80067f8 <_svfiprintf_r+0x110>
 80067ca:	9207      	str	r2, [sp, #28]
 80067cc:	e014      	b.n	80067f8 <_svfiprintf_r+0x110>
 80067ce:	eba0 0308 	sub.w	r3, r0, r8
 80067d2:	fa09 f303 	lsl.w	r3, r9, r3
 80067d6:	4313      	orrs	r3, r2
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	46a2      	mov	sl, r4
 80067dc:	e7d2      	b.n	8006784 <_svfiprintf_r+0x9c>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	1d19      	adds	r1, r3, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	9103      	str	r1, [sp, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfbb      	ittet	lt
 80067ea:	425b      	neglt	r3, r3
 80067ec:	f042 0202 	orrlt.w	r2, r2, #2
 80067f0:	9307      	strge	r3, [sp, #28]
 80067f2:	9307      	strlt	r3, [sp, #28]
 80067f4:	bfb8      	it	lt
 80067f6:	9204      	strlt	r2, [sp, #16]
 80067f8:	7823      	ldrb	r3, [r4, #0]
 80067fa:	2b2e      	cmp	r3, #46	; 0x2e
 80067fc:	d10c      	bne.n	8006818 <_svfiprintf_r+0x130>
 80067fe:	7863      	ldrb	r3, [r4, #1]
 8006800:	2b2a      	cmp	r3, #42	; 0x2a
 8006802:	d135      	bne.n	8006870 <_svfiprintf_r+0x188>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	9203      	str	r2, [sp, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	bfb8      	it	lt
 8006810:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006814:	3402      	adds	r4, #2
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068e4 <_svfiprintf_r+0x1fc>
 800681c:	7821      	ldrb	r1, [r4, #0]
 800681e:	2203      	movs	r2, #3
 8006820:	4650      	mov	r0, sl
 8006822:	f7f9 fced 	bl	8000200 <memchr>
 8006826:	b140      	cbz	r0, 800683a <_svfiprintf_r+0x152>
 8006828:	2340      	movs	r3, #64	; 0x40
 800682a:	eba0 000a 	sub.w	r0, r0, sl
 800682e:	fa03 f000 	lsl.w	r0, r3, r0
 8006832:	9b04      	ldr	r3, [sp, #16]
 8006834:	4303      	orrs	r3, r0
 8006836:	3401      	adds	r4, #1
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683e:	4826      	ldr	r0, [pc, #152]	; (80068d8 <_svfiprintf_r+0x1f0>)
 8006840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006844:	2206      	movs	r2, #6
 8006846:	f7f9 fcdb 	bl	8000200 <memchr>
 800684a:	2800      	cmp	r0, #0
 800684c:	d038      	beq.n	80068c0 <_svfiprintf_r+0x1d8>
 800684e:	4b23      	ldr	r3, [pc, #140]	; (80068dc <_svfiprintf_r+0x1f4>)
 8006850:	bb1b      	cbnz	r3, 800689a <_svfiprintf_r+0x1b2>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	3307      	adds	r3, #7
 8006856:	f023 0307 	bic.w	r3, r3, #7
 800685a:	3308      	adds	r3, #8
 800685c:	9303      	str	r3, [sp, #12]
 800685e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006860:	4433      	add	r3, r6
 8006862:	9309      	str	r3, [sp, #36]	; 0x24
 8006864:	e767      	b.n	8006736 <_svfiprintf_r+0x4e>
 8006866:	fb0c 3202 	mla	r2, ip, r2, r3
 800686a:	460c      	mov	r4, r1
 800686c:	2001      	movs	r0, #1
 800686e:	e7a5      	b.n	80067bc <_svfiprintf_r+0xd4>
 8006870:	2300      	movs	r3, #0
 8006872:	3401      	adds	r4, #1
 8006874:	9305      	str	r3, [sp, #20]
 8006876:	4619      	mov	r1, r3
 8006878:	f04f 0c0a 	mov.w	ip, #10
 800687c:	4620      	mov	r0, r4
 800687e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006882:	3a30      	subs	r2, #48	; 0x30
 8006884:	2a09      	cmp	r2, #9
 8006886:	d903      	bls.n	8006890 <_svfiprintf_r+0x1a8>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0c5      	beq.n	8006818 <_svfiprintf_r+0x130>
 800688c:	9105      	str	r1, [sp, #20]
 800688e:	e7c3      	b.n	8006818 <_svfiprintf_r+0x130>
 8006890:	fb0c 2101 	mla	r1, ip, r1, r2
 8006894:	4604      	mov	r4, r0
 8006896:	2301      	movs	r3, #1
 8006898:	e7f0      	b.n	800687c <_svfiprintf_r+0x194>
 800689a:	ab03      	add	r3, sp, #12
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	462a      	mov	r2, r5
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <_svfiprintf_r+0x1f8>)
 80068a2:	a904      	add	r1, sp, #16
 80068a4:	4638      	mov	r0, r7
 80068a6:	f3af 8000 	nop.w
 80068aa:	1c42      	adds	r2, r0, #1
 80068ac:	4606      	mov	r6, r0
 80068ae:	d1d6      	bne.n	800685e <_svfiprintf_r+0x176>
 80068b0:	89ab      	ldrh	r3, [r5, #12]
 80068b2:	065b      	lsls	r3, r3, #25
 80068b4:	f53f af2c 	bmi.w	8006710 <_svfiprintf_r+0x28>
 80068b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ba:	b01d      	add	sp, #116	; 0x74
 80068bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c0:	ab03      	add	r3, sp, #12
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	462a      	mov	r2, r5
 80068c6:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <_svfiprintf_r+0x1f8>)
 80068c8:	a904      	add	r1, sp, #16
 80068ca:	4638      	mov	r0, r7
 80068cc:	f000 f87a 	bl	80069c4 <_printf_i>
 80068d0:	e7eb      	b.n	80068aa <_svfiprintf_r+0x1c2>
 80068d2:	bf00      	nop
 80068d4:	08006f60 	.word	0x08006f60
 80068d8:	08006f6a 	.word	0x08006f6a
 80068dc:	00000000 	.word	0x00000000
 80068e0:	08006631 	.word	0x08006631
 80068e4:	08006f66 	.word	0x08006f66

080068e8 <_printf_common>:
 80068e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ec:	4616      	mov	r6, r2
 80068ee:	4699      	mov	r9, r3
 80068f0:	688a      	ldr	r2, [r1, #8]
 80068f2:	690b      	ldr	r3, [r1, #16]
 80068f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068f8:	4293      	cmp	r3, r2
 80068fa:	bfb8      	it	lt
 80068fc:	4613      	movlt	r3, r2
 80068fe:	6033      	str	r3, [r6, #0]
 8006900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006904:	4607      	mov	r7, r0
 8006906:	460c      	mov	r4, r1
 8006908:	b10a      	cbz	r2, 800690e <_printf_common+0x26>
 800690a:	3301      	adds	r3, #1
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	0699      	lsls	r1, r3, #26
 8006912:	bf42      	ittt	mi
 8006914:	6833      	ldrmi	r3, [r6, #0]
 8006916:	3302      	addmi	r3, #2
 8006918:	6033      	strmi	r3, [r6, #0]
 800691a:	6825      	ldr	r5, [r4, #0]
 800691c:	f015 0506 	ands.w	r5, r5, #6
 8006920:	d106      	bne.n	8006930 <_printf_common+0x48>
 8006922:	f104 0a19 	add.w	sl, r4, #25
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	6832      	ldr	r2, [r6, #0]
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	42ab      	cmp	r3, r5
 800692e:	dc26      	bgt.n	800697e <_printf_common+0x96>
 8006930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006934:	1e13      	subs	r3, r2, #0
 8006936:	6822      	ldr	r2, [r4, #0]
 8006938:	bf18      	it	ne
 800693a:	2301      	movne	r3, #1
 800693c:	0692      	lsls	r2, r2, #26
 800693e:	d42b      	bmi.n	8006998 <_printf_common+0xb0>
 8006940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006944:	4649      	mov	r1, r9
 8006946:	4638      	mov	r0, r7
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d01e      	beq.n	800698c <_printf_common+0xa4>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	68e5      	ldr	r5, [r4, #12]
 8006952:	6832      	ldr	r2, [r6, #0]
 8006954:	f003 0306 	and.w	r3, r3, #6
 8006958:	2b04      	cmp	r3, #4
 800695a:	bf08      	it	eq
 800695c:	1aad      	subeq	r5, r5, r2
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	6922      	ldr	r2, [r4, #16]
 8006962:	bf0c      	ite	eq
 8006964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006968:	2500      	movne	r5, #0
 800696a:	4293      	cmp	r3, r2
 800696c:	bfc4      	itt	gt
 800696e:	1a9b      	subgt	r3, r3, r2
 8006970:	18ed      	addgt	r5, r5, r3
 8006972:	2600      	movs	r6, #0
 8006974:	341a      	adds	r4, #26
 8006976:	42b5      	cmp	r5, r6
 8006978:	d11a      	bne.n	80069b0 <_printf_common+0xc8>
 800697a:	2000      	movs	r0, #0
 800697c:	e008      	b.n	8006990 <_printf_common+0xa8>
 800697e:	2301      	movs	r3, #1
 8006980:	4652      	mov	r2, sl
 8006982:	4649      	mov	r1, r9
 8006984:	4638      	mov	r0, r7
 8006986:	47c0      	blx	r8
 8006988:	3001      	adds	r0, #1
 800698a:	d103      	bne.n	8006994 <_printf_common+0xac>
 800698c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006994:	3501      	adds	r5, #1
 8006996:	e7c6      	b.n	8006926 <_printf_common+0x3e>
 8006998:	18e1      	adds	r1, r4, r3
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	2030      	movs	r0, #48	; 0x30
 800699e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069a2:	4422      	add	r2, r4
 80069a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069ac:	3302      	adds	r3, #2
 80069ae:	e7c7      	b.n	8006940 <_printf_common+0x58>
 80069b0:	2301      	movs	r3, #1
 80069b2:	4622      	mov	r2, r4
 80069b4:	4649      	mov	r1, r9
 80069b6:	4638      	mov	r0, r7
 80069b8:	47c0      	blx	r8
 80069ba:	3001      	adds	r0, #1
 80069bc:	d0e6      	beq.n	800698c <_printf_common+0xa4>
 80069be:	3601      	adds	r6, #1
 80069c0:	e7d9      	b.n	8006976 <_printf_common+0x8e>
	...

080069c4 <_printf_i>:
 80069c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	7e0f      	ldrb	r7, [r1, #24]
 80069ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069cc:	2f78      	cmp	r7, #120	; 0x78
 80069ce:	4691      	mov	r9, r2
 80069d0:	4680      	mov	r8, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	469a      	mov	sl, r3
 80069d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069da:	d807      	bhi.n	80069ec <_printf_i+0x28>
 80069dc:	2f62      	cmp	r7, #98	; 0x62
 80069de:	d80a      	bhi.n	80069f6 <_printf_i+0x32>
 80069e0:	2f00      	cmp	r7, #0
 80069e2:	f000 80d8 	beq.w	8006b96 <_printf_i+0x1d2>
 80069e6:	2f58      	cmp	r7, #88	; 0x58
 80069e8:	f000 80a3 	beq.w	8006b32 <_printf_i+0x16e>
 80069ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069f4:	e03a      	b.n	8006a6c <_printf_i+0xa8>
 80069f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069fa:	2b15      	cmp	r3, #21
 80069fc:	d8f6      	bhi.n	80069ec <_printf_i+0x28>
 80069fe:	a101      	add	r1, pc, #4	; (adr r1, 8006a04 <_printf_i+0x40>)
 8006a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a04:	08006a5d 	.word	0x08006a5d
 8006a08:	08006a71 	.word	0x08006a71
 8006a0c:	080069ed 	.word	0x080069ed
 8006a10:	080069ed 	.word	0x080069ed
 8006a14:	080069ed 	.word	0x080069ed
 8006a18:	080069ed 	.word	0x080069ed
 8006a1c:	08006a71 	.word	0x08006a71
 8006a20:	080069ed 	.word	0x080069ed
 8006a24:	080069ed 	.word	0x080069ed
 8006a28:	080069ed 	.word	0x080069ed
 8006a2c:	080069ed 	.word	0x080069ed
 8006a30:	08006b7d 	.word	0x08006b7d
 8006a34:	08006aa1 	.word	0x08006aa1
 8006a38:	08006b5f 	.word	0x08006b5f
 8006a3c:	080069ed 	.word	0x080069ed
 8006a40:	080069ed 	.word	0x080069ed
 8006a44:	08006b9f 	.word	0x08006b9f
 8006a48:	080069ed 	.word	0x080069ed
 8006a4c:	08006aa1 	.word	0x08006aa1
 8006a50:	080069ed 	.word	0x080069ed
 8006a54:	080069ed 	.word	0x080069ed
 8006a58:	08006b67 	.word	0x08006b67
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	1d1a      	adds	r2, r3, #4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	602a      	str	r2, [r5, #0]
 8006a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0a3      	b.n	8006bb8 <_printf_i+0x1f4>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	6829      	ldr	r1, [r5, #0]
 8006a74:	0606      	lsls	r6, r0, #24
 8006a76:	f101 0304 	add.w	r3, r1, #4
 8006a7a:	d50a      	bpl.n	8006a92 <_printf_i+0xce>
 8006a7c:	680e      	ldr	r6, [r1, #0]
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	2e00      	cmp	r6, #0
 8006a82:	da03      	bge.n	8006a8c <_printf_i+0xc8>
 8006a84:	232d      	movs	r3, #45	; 0x2d
 8006a86:	4276      	negs	r6, r6
 8006a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a8c:	485e      	ldr	r0, [pc, #376]	; (8006c08 <_printf_i+0x244>)
 8006a8e:	230a      	movs	r3, #10
 8006a90:	e019      	b.n	8006ac6 <_printf_i+0x102>
 8006a92:	680e      	ldr	r6, [r1, #0]
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a9a:	bf18      	it	ne
 8006a9c:	b236      	sxthne	r6, r6
 8006a9e:	e7ef      	b.n	8006a80 <_printf_i+0xbc>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	6820      	ldr	r0, [r4, #0]
 8006aa4:	1d19      	adds	r1, r3, #4
 8006aa6:	6029      	str	r1, [r5, #0]
 8006aa8:	0601      	lsls	r1, r0, #24
 8006aaa:	d501      	bpl.n	8006ab0 <_printf_i+0xec>
 8006aac:	681e      	ldr	r6, [r3, #0]
 8006aae:	e002      	b.n	8006ab6 <_printf_i+0xf2>
 8006ab0:	0646      	lsls	r6, r0, #25
 8006ab2:	d5fb      	bpl.n	8006aac <_printf_i+0xe8>
 8006ab4:	881e      	ldrh	r6, [r3, #0]
 8006ab6:	4854      	ldr	r0, [pc, #336]	; (8006c08 <_printf_i+0x244>)
 8006ab8:	2f6f      	cmp	r7, #111	; 0x6f
 8006aba:	bf0c      	ite	eq
 8006abc:	2308      	moveq	r3, #8
 8006abe:	230a      	movne	r3, #10
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ac6:	6865      	ldr	r5, [r4, #4]
 8006ac8:	60a5      	str	r5, [r4, #8]
 8006aca:	2d00      	cmp	r5, #0
 8006acc:	bfa2      	ittt	ge
 8006ace:	6821      	ldrge	r1, [r4, #0]
 8006ad0:	f021 0104 	bicge.w	r1, r1, #4
 8006ad4:	6021      	strge	r1, [r4, #0]
 8006ad6:	b90e      	cbnz	r6, 8006adc <_printf_i+0x118>
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	d04d      	beq.n	8006b78 <_printf_i+0x1b4>
 8006adc:	4615      	mov	r5, r2
 8006ade:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ae2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ae6:	5dc7      	ldrb	r7, [r0, r7]
 8006ae8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006aec:	4637      	mov	r7, r6
 8006aee:	42bb      	cmp	r3, r7
 8006af0:	460e      	mov	r6, r1
 8006af2:	d9f4      	bls.n	8006ade <_printf_i+0x11a>
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d10b      	bne.n	8006b10 <_printf_i+0x14c>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	07de      	lsls	r6, r3, #31
 8006afc:	d508      	bpl.n	8006b10 <_printf_i+0x14c>
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	6861      	ldr	r1, [r4, #4]
 8006b02:	4299      	cmp	r1, r3
 8006b04:	bfde      	ittt	le
 8006b06:	2330      	movle	r3, #48	; 0x30
 8006b08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b10:	1b52      	subs	r2, r2, r5
 8006b12:	6122      	str	r2, [r4, #16]
 8006b14:	f8cd a000 	str.w	sl, [sp]
 8006b18:	464b      	mov	r3, r9
 8006b1a:	aa03      	add	r2, sp, #12
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4640      	mov	r0, r8
 8006b20:	f7ff fee2 	bl	80068e8 <_printf_common>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d14c      	bne.n	8006bc2 <_printf_i+0x1fe>
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b2c:	b004      	add	sp, #16
 8006b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b32:	4835      	ldr	r0, [pc, #212]	; (8006c08 <_printf_i+0x244>)
 8006b34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b38:	6829      	ldr	r1, [r5, #0]
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b40:	6029      	str	r1, [r5, #0]
 8006b42:	061d      	lsls	r5, r3, #24
 8006b44:	d514      	bpl.n	8006b70 <_printf_i+0x1ac>
 8006b46:	07df      	lsls	r7, r3, #31
 8006b48:	bf44      	itt	mi
 8006b4a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b4e:	6023      	strmi	r3, [r4, #0]
 8006b50:	b91e      	cbnz	r6, 8006b5a <_printf_i+0x196>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	f023 0320 	bic.w	r3, r3, #32
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	2310      	movs	r3, #16
 8006b5c:	e7b0      	b.n	8006ac0 <_printf_i+0xfc>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	f043 0320 	orr.w	r3, r3, #32
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	2378      	movs	r3, #120	; 0x78
 8006b68:	4828      	ldr	r0, [pc, #160]	; (8006c0c <_printf_i+0x248>)
 8006b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b6e:	e7e3      	b.n	8006b38 <_printf_i+0x174>
 8006b70:	0659      	lsls	r1, r3, #25
 8006b72:	bf48      	it	mi
 8006b74:	b2b6      	uxthmi	r6, r6
 8006b76:	e7e6      	b.n	8006b46 <_printf_i+0x182>
 8006b78:	4615      	mov	r5, r2
 8006b7a:	e7bb      	b.n	8006af4 <_printf_i+0x130>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	6826      	ldr	r6, [r4, #0]
 8006b80:	6961      	ldr	r1, [r4, #20]
 8006b82:	1d18      	adds	r0, r3, #4
 8006b84:	6028      	str	r0, [r5, #0]
 8006b86:	0635      	lsls	r5, r6, #24
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	d501      	bpl.n	8006b90 <_printf_i+0x1cc>
 8006b8c:	6019      	str	r1, [r3, #0]
 8006b8e:	e002      	b.n	8006b96 <_printf_i+0x1d2>
 8006b90:	0670      	lsls	r0, r6, #25
 8006b92:	d5fb      	bpl.n	8006b8c <_printf_i+0x1c8>
 8006b94:	8019      	strh	r1, [r3, #0]
 8006b96:	2300      	movs	r3, #0
 8006b98:	6123      	str	r3, [r4, #16]
 8006b9a:	4615      	mov	r5, r2
 8006b9c:	e7ba      	b.n	8006b14 <_printf_i+0x150>
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	1d1a      	adds	r2, r3, #4
 8006ba2:	602a      	str	r2, [r5, #0]
 8006ba4:	681d      	ldr	r5, [r3, #0]
 8006ba6:	6862      	ldr	r2, [r4, #4]
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4628      	mov	r0, r5
 8006bac:	f7f9 fb28 	bl	8000200 <memchr>
 8006bb0:	b108      	cbz	r0, 8006bb6 <_printf_i+0x1f2>
 8006bb2:	1b40      	subs	r0, r0, r5
 8006bb4:	6060      	str	r0, [r4, #4]
 8006bb6:	6863      	ldr	r3, [r4, #4]
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc0:	e7a8      	b.n	8006b14 <_printf_i+0x150>
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	4640      	mov	r0, r8
 8006bca:	47d0      	blx	sl
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d0ab      	beq.n	8006b28 <_printf_i+0x164>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	079b      	lsls	r3, r3, #30
 8006bd4:	d413      	bmi.n	8006bfe <_printf_i+0x23a>
 8006bd6:	68e0      	ldr	r0, [r4, #12]
 8006bd8:	9b03      	ldr	r3, [sp, #12]
 8006bda:	4298      	cmp	r0, r3
 8006bdc:	bfb8      	it	lt
 8006bde:	4618      	movlt	r0, r3
 8006be0:	e7a4      	b.n	8006b2c <_printf_i+0x168>
 8006be2:	2301      	movs	r3, #1
 8006be4:	4632      	mov	r2, r6
 8006be6:	4649      	mov	r1, r9
 8006be8:	4640      	mov	r0, r8
 8006bea:	47d0      	blx	sl
 8006bec:	3001      	adds	r0, #1
 8006bee:	d09b      	beq.n	8006b28 <_printf_i+0x164>
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	68e3      	ldr	r3, [r4, #12]
 8006bf4:	9903      	ldr	r1, [sp, #12]
 8006bf6:	1a5b      	subs	r3, r3, r1
 8006bf8:	42ab      	cmp	r3, r5
 8006bfa:	dcf2      	bgt.n	8006be2 <_printf_i+0x21e>
 8006bfc:	e7eb      	b.n	8006bd6 <_printf_i+0x212>
 8006bfe:	2500      	movs	r5, #0
 8006c00:	f104 0619 	add.w	r6, r4, #25
 8006c04:	e7f5      	b.n	8006bf2 <_printf_i+0x22e>
 8006c06:	bf00      	nop
 8006c08:	08006f71 	.word	0x08006f71
 8006c0c:	08006f82 	.word	0x08006f82

08006c10 <_sbrk_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4d06      	ldr	r5, [pc, #24]	; (8006c2c <_sbrk_r+0x1c>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	602b      	str	r3, [r5, #0]
 8006c1c:	f000 f912 	bl	8006e44 <_sbrk>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_sbrk_r+0x1a>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_sbrk_r+0x1a>
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	20012f7c 	.word	0x20012f7c

08006c30 <__sread>:
 8006c30:	b510      	push	{r4, lr}
 8006c32:	460c      	mov	r4, r1
 8006c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c38:	f000 f8ea 	bl	8006e10 <_read_r>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	bfab      	itete	ge
 8006c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c42:	89a3      	ldrhlt	r3, [r4, #12]
 8006c44:	181b      	addge	r3, r3, r0
 8006c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c4a:	bfac      	ite	ge
 8006c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c4e:	81a3      	strhlt	r3, [r4, #12]
 8006c50:	bd10      	pop	{r4, pc}

08006c52 <__swrite>:
 8006c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c56:	461f      	mov	r7, r3
 8006c58:	898b      	ldrh	r3, [r1, #12]
 8006c5a:	05db      	lsls	r3, r3, #23
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	4616      	mov	r6, r2
 8006c62:	d505      	bpl.n	8006c70 <__swrite+0x1e>
 8006c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c68:	2302      	movs	r3, #2
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f000 f868 	bl	8006d40 <_lseek_r>
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	463b      	mov	r3, r7
 8006c80:	4628      	mov	r0, r5
 8006c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c86:	f000 b817 	b.w	8006cb8 <_write_r>

08006c8a <__sseek>:
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c92:	f000 f855 	bl	8006d40 <_lseek_r>
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	bf15      	itete	ne
 8006c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ca6:	81a3      	strheq	r3, [r4, #12]
 8006ca8:	bf18      	it	ne
 8006caa:	81a3      	strhne	r3, [r4, #12]
 8006cac:	bd10      	pop	{r4, pc}

08006cae <__sclose>:
 8006cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb2:	f000 b813 	b.w	8006cdc <_close_r>
	...

08006cb8 <_write_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	; (8006cd8 <_write_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fe ffbf 	bl	8005c4a <_write>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_write_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_write_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20012f7c 	.word	0x20012f7c

08006cdc <_close_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d06      	ldr	r5, [pc, #24]	; (8006cf8 <_close_r+0x1c>)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	f7fe ffcb 	bl	8005c82 <_close>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_close_r+0x1a>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_close_r+0x1a>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20012f7c 	.word	0x20012f7c

08006cfc <_fstat_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d07      	ldr	r5, [pc, #28]	; (8006d1c <_fstat_r+0x20>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	4611      	mov	r1, r2
 8006d08:	602b      	str	r3, [r5, #0]
 8006d0a:	f7fe ffc6 	bl	8005c9a <_fstat>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	d102      	bne.n	8006d18 <_fstat_r+0x1c>
 8006d12:	682b      	ldr	r3, [r5, #0]
 8006d14:	b103      	cbz	r3, 8006d18 <_fstat_r+0x1c>
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20012f7c 	.word	0x20012f7c

08006d20 <_isatty_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4d06      	ldr	r5, [pc, #24]	; (8006d3c <_isatty_r+0x1c>)
 8006d24:	2300      	movs	r3, #0
 8006d26:	4604      	mov	r4, r0
 8006d28:	4608      	mov	r0, r1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	f7fe ffc5 	bl	8005cba <_isatty>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_isatty_r+0x1a>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_isatty_r+0x1a>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	20012f7c 	.word	0x20012f7c

08006d40 <_lseek_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d07      	ldr	r5, [pc, #28]	; (8006d60 <_lseek_r+0x20>)
 8006d44:	4604      	mov	r4, r0
 8006d46:	4608      	mov	r0, r1
 8006d48:	4611      	mov	r1, r2
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	602a      	str	r2, [r5, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f7fe ffbe 	bl	8005cd0 <_lseek>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_lseek_r+0x1e>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_lseek_r+0x1e>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	20012f7c 	.word	0x20012f7c

08006d64 <memmove>:
 8006d64:	4288      	cmp	r0, r1
 8006d66:	b510      	push	{r4, lr}
 8006d68:	eb01 0402 	add.w	r4, r1, r2
 8006d6c:	d902      	bls.n	8006d74 <memmove+0x10>
 8006d6e:	4284      	cmp	r4, r0
 8006d70:	4623      	mov	r3, r4
 8006d72:	d807      	bhi.n	8006d84 <memmove+0x20>
 8006d74:	1e43      	subs	r3, r0, #1
 8006d76:	42a1      	cmp	r1, r4
 8006d78:	d008      	beq.n	8006d8c <memmove+0x28>
 8006d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d82:	e7f8      	b.n	8006d76 <memmove+0x12>
 8006d84:	4402      	add	r2, r0
 8006d86:	4601      	mov	r1, r0
 8006d88:	428a      	cmp	r2, r1
 8006d8a:	d100      	bne.n	8006d8e <memmove+0x2a>
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d96:	e7f7      	b.n	8006d88 <memmove+0x24>

08006d98 <__malloc_lock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__malloc_lock+0x8>)
 8006d9a:	f7ff bb01 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 8006d9e:	bf00      	nop
 8006da0:	20012f70 	.word	0x20012f70

08006da4 <__malloc_unlock>:
 8006da4:	4801      	ldr	r0, [pc, #4]	; (8006dac <__malloc_unlock+0x8>)
 8006da6:	f7ff bafc 	b.w	80063a2 <__retarget_lock_release_recursive>
 8006daa:	bf00      	nop
 8006dac:	20012f70 	.word	0x20012f70

08006db0 <_realloc_r>:
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	4680      	mov	r8, r0
 8006db6:	4614      	mov	r4, r2
 8006db8:	460e      	mov	r6, r1
 8006dba:	b921      	cbnz	r1, 8006dc6 <_realloc_r+0x16>
 8006dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	f7ff bbc1 	b.w	8006548 <_malloc_r>
 8006dc6:	b92a      	cbnz	r2, 8006dd4 <_realloc_r+0x24>
 8006dc8:	f7ff fb52 	bl	8006470 <_free_r>
 8006dcc:	4625      	mov	r5, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	f000 f82e 	bl	8006e34 <_malloc_usable_size_r>
 8006dd8:	4284      	cmp	r4, r0
 8006dda:	4607      	mov	r7, r0
 8006ddc:	d802      	bhi.n	8006de4 <_realloc_r+0x34>
 8006dde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006de2:	d812      	bhi.n	8006e0a <_realloc_r+0x5a>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4640      	mov	r0, r8
 8006de8:	f7ff fbae 	bl	8006548 <_malloc_r>
 8006dec:	4605      	mov	r5, r0
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d0ed      	beq.n	8006dce <_realloc_r+0x1e>
 8006df2:	42bc      	cmp	r4, r7
 8006df4:	4622      	mov	r2, r4
 8006df6:	4631      	mov	r1, r6
 8006df8:	bf28      	it	cs
 8006dfa:	463a      	movcs	r2, r7
 8006dfc:	f7fe ffac 	bl	8005d58 <memcpy>
 8006e00:	4631      	mov	r1, r6
 8006e02:	4640      	mov	r0, r8
 8006e04:	f7ff fb34 	bl	8006470 <_free_r>
 8006e08:	e7e1      	b.n	8006dce <_realloc_r+0x1e>
 8006e0a:	4635      	mov	r5, r6
 8006e0c:	e7df      	b.n	8006dce <_realloc_r+0x1e>
	...

08006e10 <_read_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4d07      	ldr	r5, [pc, #28]	; (8006e30 <_read_r+0x20>)
 8006e14:	4604      	mov	r4, r0
 8006e16:	4608      	mov	r0, r1
 8006e18:	4611      	mov	r1, r2
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	602a      	str	r2, [r5, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f7fe fef6 	bl	8005c10 <_read>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d102      	bne.n	8006e2e <_read_r+0x1e>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	b103      	cbz	r3, 8006e2e <_read_r+0x1e>
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	20012f7c 	.word	0x20012f7c

08006e34 <_malloc_usable_size_r>:
 8006e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e38:	1f18      	subs	r0, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bfbc      	itt	lt
 8006e3e:	580b      	ldrlt	r3, [r1, r0]
 8006e40:	18c0      	addlt	r0, r0, r3
 8006e42:	4770      	bx	lr

08006e44 <_sbrk>:
 8006e44:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <_sbrk+0x14>)
 8006e46:	6811      	ldr	r1, [r2, #0]
 8006e48:	4603      	mov	r3, r0
 8006e4a:	b909      	cbnz	r1, 8006e50 <_sbrk+0xc>
 8006e4c:	4903      	ldr	r1, [pc, #12]	; (8006e5c <_sbrk+0x18>)
 8006e4e:	6011      	str	r1, [r2, #0]
 8006e50:	6810      	ldr	r0, [r2, #0]
 8006e52:	4403      	add	r3, r0
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	4770      	bx	lr
 8006e58:	20012f80 	.word	0x20012f80
 8006e5c:	20012f88 	.word	0x20012f88

08006e60 <_init>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	bf00      	nop
 8006e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e66:	bc08      	pop	{r3}
 8006e68:	469e      	mov	lr, r3
 8006e6a:	4770      	bx	lr

08006e6c <_fini>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	bf00      	nop
 8006e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e72:	bc08      	pop	{r3}
 8006e74:	469e      	mov	lr, r3
 8006e76:	4770      	bx	lr
